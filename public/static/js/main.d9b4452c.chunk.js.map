{"version":3,"sources":["types/service-types.ts","services/request.ts","services/api-user-service.ts","components/navigation/navigation-user.tsx","components/navigation/navigation-items.tsx","components/navigation/index.tsx","components/navigation/navigation.tsx","components/header/index.tsx","components/header/header.tsx","services/dashboard-service.ts","components/status/index.tsx","components/status/status.tsx","components/today-tasks/index.tsx","components/today-tasks/today-tasks.tsx","components/week-tasks/index.tsx","components/week-tasks/week-tasks.tsx","components/outdate-tasks/index.tsx","components/outdate-tasks/outdate-tasks.tsx","services/api-responsible-service.ts","components/my-responsibility-tasks/index.tsx","components/my-responsibility-tasks/my-responsibility-tasks.tsx","components/Dashboard/index.tsx","components/Dashboard/dashboard.tsx","components/pages/dashboard-pages.tsx","services/api-service.tsx","components/card/index.tsx","components/card/card.tsx","components/projects/index.tsx","components/projects/projects.tsx","components/pages/projects-page.tsx","components/profile/profile-statistics.tsx","components/profile/profile-user.tsx","services/api-profile-service.ts","components/profile/index.tsx","components/profile/profile.tsx","components/pages/profile-page.tsx","services/api-participant-service.ts","components/add-participant/index.tsx","components/add-participant/add-participant.tsx","components/participant-list/index.tsx","components/participant-list/participant-list.tsx","services/api-project-service.ts","components/project/project.tsx","components/project/index.tsx","services/api-category-service.ts","components/category/category.tsx","components/category/index.tsx","services/api-group-service.ts","components/group/group.tsx","components/group/index.tsx","components/comment/index.tsx","components/comment/comment.tsx","components/task/task-card.tsx","services/api-task-service.ts","services/api-comment-service.ts","components/comment-create/index.tsx","components/comment-create/comment-create.tsx","components/add-responsible/user-list.tsx","components/add-responsible/index.tsx","components/add-responsible/add-responsible.tsx","components/task/task.tsx","components/task/index.tsx","components/pages/task-page.tsx","components/pages/group-page.tsx","components/pages/category-page.tsx","components/pages/project-page.tsx","components/forms/form-project/inputs-project.tsx","components/forms/form-project/index.tsx","components/forms/form-project/form-project.tsx","components/forms/form-category/category-inputs.tsx","components/forms/form-select/select-project.tsx","components/forms/form-select/select-category.tsx","components/forms/form-select/select-group.tsx","components/forms/form-category/index.tsx","components/forms/form-category/form-category.tsx","components/forms/form-group/group-inputs.tsx","components/forms/form-group/from-group.tsx","components/forms/form-group/index.tsx","components/forms/form-task/task-inputs.tsx","components/forms/form-task/form-task.tsx","components/forms/form-task/index.tsx","components/create-nav/index.tsx","components/create-nav/create-nav.tsx","components/pages/create-page.tsx","App.tsx","index.tsx"],"names":["Method","RequestService","requestHeaders","Authorization","Cookies","get","Request","url","method","data","a","fetch","headers","body","JSON","stringify","response","console","log","ok","Error","Unauthorized","localStorage","removeItem","window","location","href","getRequest","Get","then","res","json","postRequest","Post","putRequest","Put","patchRequest","Patch","deleteRequest","Delete","ApiUserService","requestService","getUser","this","NavigationUser","props","useState","user","setUser","useEffect","Api","result","fetchData","to","className","username","email","NavigationItems","name","Navigation","id","userName","Header","size","icon","text","description","DashboardService","getAllTasks","getTodayTasks","getWeekTasks","getOutDateTasks","getStatistic","Status","status","el","TodayTasks","tasks","setTasks","bordered","dataSource","renderItem","item","Item","style","position","title","expiredDate","WeekTasks","OutDateTasks","ApiResponsibleService","getResponsible","addResponsible","projectId","categoryId","groupId","taskId","userId","MyResponsibilityTasks","Dashboard","defaultActiveKey","TabPane","tab","key","DashboardPage","Component","ApiService","GetRequest","axios","catch","e","error","PostRequest","post","getAllProjects","results","getProject","getCategory","getGroup","getTask","getAllProjectsMin","fullProjects","map","getCategoriesMin","fullProject","categories","getGroupMin","fullCategory","groups","saveProject","saveCategory","saveGroup","saveTask","content","_userMin","Card","match","useRouteMatch","Projects","apiService","state","projects","setState","length","ProjectsPage","exact","path","ProfileStatisctics","completed","outdate","total","span","margin","value","valueStyle","color","ProfileUser","date","ApiProfileService","getStatistics","Profile","statistics","setStatistics","resUser","resStatistics","registrationDate","ProfilePage","dd","ApiParticipantService","getParticipant","addParticipant","AddParticipant","visible","setVisible","onFinish","values","reload","onClick","placement","closable","onClose","layout","initialValues","remember","onFinishFailed","errorInfo","label","rules","required","message","type","htmlType","ParticipantList","participants","setParticipants","width","role","ApiProjectService","deleteProject","initialState","creator","Project","api","history","back","category","danger","index","ApiCategoryService","deleteCategory","Category","toString","items","renderItems","ApiGroupService","deleteGroup","Group","Comment","commentsList","comments","comment","author","link","TaskCard","btn","handleClick","marginTop","deleteTask","marginLeft","ApiTaskService","updateStatus","ApiCommentService","createComment","CommentCreate","UserList","selectUser","select","i","users","setUsers","bind","AddResponsible","setUserId","add","initionalState","Task","alert","TaskPage","useParams","GroupPage","CategoryPage","ProjectPage","InputsProject","nameValue","descriptionValue","HandleChangeName","HandleChangeDescription","onChange","FormProject","handleChangeName","event","currentTarget","handleChangeDescription","SendForm","success","CategoryInputs","SelectProject","setProjects","LoadData","projectIdValue","HandleChangeProject","hidden","SelectCategory","setCategory","categoryIdValue","HandleChangeCategory","SelectGroup","groupIdValue","HandleChangeGroup","setGroups","FormCategory","handleChangeProject","selected","GroupInputs","FormGroup","handleChangeCategory","TaskInputs","textValue","HandleChangeText","HandleChangeDate","FormTask","handleChangeText","handleChangeExpiredDate","moment","format","handleChangeGroup","CreateNav","CreatePage","App","basename","ReactDOM","render","document","getElementById"],"mappings":"2aAAYA,E,uHAAAA,K,UAAAA,E,YAAAA,E,UAAAA,E,cAAAA,E,iBAAAA,M,0BCWSC,E,iDAEFC,eAA8B,CAC7C,eAAgB,mBAChBC,cAAc,UAAD,OAAYC,IAAQC,IAAI,S,KAG/BC,Q,uCAAU,WAAWC,EAAaC,EAAgBC,GAAxC,eAAAC,EAAA,sEACOC,MAAM,kCAAD,OAAmCP,IAAQC,IAAI,UAA/C,YAA4DE,GAAO,CAC7FC,SACAI,QAAS,EAAKV,eACdW,KAAMC,KAAKC,UAAUN,KAJP,UACVO,EADU,OAMhBC,QAAQC,IAAI,WAAYF,GACnBA,EAASG,GAPE,sBAOQ,IAAIC,MAAM,wCAPlB,gCASTJ,GATS,2C,+DAYVK,aAAe,WACrBC,aAAaC,WAAW,OACxBC,OAAOC,SAASC,KAAO,S,KAGzBC,W,uCAAa,WAAWpB,GAAX,SAAAG,EAAA,sEACE,EAAKJ,QAAQC,EAAKP,EAAO4B,KAAKC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UADhD,mF,2DAIbC,Y,uCAAc,WAAWzB,EAAaE,GAAxB,SAAAC,EAAA,sEACN,EAAKJ,QAAWC,EAAKP,EAAOiC,KAAMxB,GAD5B,2C,6DAIdyB,W,uCAAa,WAAW3B,EAAaE,GAAxB,SAAAC,EAAA,sEACL,EAAKJ,QAAWC,EAAKP,EAAOmC,IAAK1B,GAD5B,2C,6DAGb2B,a,uCAAe,WAAW7B,EAAaE,GAAxB,SAAAC,EAAA,sEACP,EAAKJ,QAAWC,EAAKP,EAAOqC,MAAO5B,GAD5B,2C,6DAGf6B,c,uCAAgB,WAAW/B,GAAX,SAAAG,EAAA,sEACR,EAAKJ,QAAWC,EAAKP,EAAOuC,QADpB,2C,uDC9CGC,EAEnB,aAAgB,IAAD,gCADEC,oBACF,OAIhBC,QAJgB,sBAIN,sBAAAhC,EAAA,sEACM,EAAK+B,eAAed,WAAkB,IAD5C,mFAHPgB,KAAKF,eAAiB,IAAIxC,GC2Bf2C,EAvBQ,SAACC,GAAgC,IAAD,EAC7BC,qBAD6B,mBAC9CC,EAD8C,KACxCC,EADwC,KAarD,OAVAC,qBAAU,YACO,uCAAG,8BAAAvC,EAAA,6DACVwC,EAAM,IAAIV,EADA,SAEKU,EAAIR,UAFT,OAEVS,EAFU,OAGhBlC,QAAQC,IAAIiC,GACZH,EAAQG,GAJQ,2CAAH,qDAMfC,KACA,IAGA,kBAAC,IAAD,CAAMC,GAAG,YACP,yBAAKC,UAAU,cACb,yBAAKA,UAAU,oBAAf,OAAmCP,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAMQ,UACzC,yBAAKD,UAAU,qBAAf,OAAoCP,QAApC,IAAoCA,OAApC,EAAoCA,EAAMS,UCFnCC,EAtBS,WACtB,OACE,oCACE,yBAAKH,UAAU,cACb,kBAAC,IAAD,CAAMD,GAAG,WACP,8BAAUK,KAAK,eADjB,+CAIF,yBAAKJ,UAAU,gBACb,kBAAC,IAAD,CAAMD,GAAG,KACP,8BAAUK,KAAK,aADjB,4DAIF,yBAAKJ,UAAU,cACb,kBAAC,IAAD,CAAMD,GAAG,aACP,8BAAUK,KAAK,WADjB,iDCfOC,ECII,WACjB,OACE,yBAAKL,UAAU,QACb,kBAAC,EAAD,CAAgBM,GAAG,KAAKC,SAAS,gEAAcL,MAAM,8BACrD,kBAAC,EAAD,Q,wBCRSM,G,OCSuB,SAAAjB,GACpC,IAAIkB,EAAe,GACnB,OAAQlB,EAAMkB,MACZ,IAAK,SACHA,EAAO,SACP,MACF,IAAK,QACHA,EAAO,QAKX,OACE,kBAAC,WAAD,KACE,wBAAIT,UAAS,iBAAYS,IACvB,8BAAUL,KAAMb,EAAMmB,OACrBnB,EAAMoB,MAET,uBAAGX,UAAU,uBAAuBT,EAAMqB,gB,SC1B3BC,EAGnB,aAAgB,IAAD,gCAFE1B,oBAEF,OAIf2B,YAJe,sBAID,sBAAA1D,EAAA,sEACC,EAAK+B,eAAed,WAAgB,eADrC,mFAJC,KAQf0C,cARe,sBAQC,sBAAA3D,EAAA,sEACD,EAAK+B,eAAed,WAAoB,iBADvC,mFARD,KAYf2C,aAZe,sBAYA,sBAAA5D,EAAA,sEACA,EAAK+B,eAAed,WAAoB,gBADxC,mFAZA,KAgBf4C,gBAhBe,sBAgBG,sBAAA7D,EAAA,sEACD,EAAK+B,eAAed,WAAgB,mBADnC,mFAhBH,KAoBf6C,aApBe,sBAoBA,sBAAA9D,EAAA,sEACA,EAAK+B,eAAed,WAAgB,YADpC,mFAnBbgB,KAAKF,eAAiB,IAAIxC,G,SCLfwE,G,OCYA,SAAC5B,GAAyB,IAC/B6B,EAAW7B,EAAX6B,OACJC,EAAK,+BACT,OAAQD,GACN,IAAK,cACHC,EACE,0BAAMrB,UAAU,oBACd,8BAAUI,KAAK,YADjB,sEAKF,MACF,IAAK,YACHiB,EACE,0BAAMrB,UAAU,oBACd,8BAAUI,KAAK,cADjB,0DASN,OAAO,yBAAKJ,UAAU,UAAUqB,KCnCnBC,ECII,WAAO,IAAD,EACG9B,qBADH,mBAChB+B,EADgB,KACTC,EADS,KAUvB,OARA7B,qBAAU,YACO,uCAAG,8BAAAvC,EAAA,6DACVwC,EAAM,IAAIiB,EADA,SAEKjB,EAAImB,gBAFT,OAEVlB,EAFU,OAGhB2B,EAAS3B,GAHO,2CAAH,qDAKfC,KACC,IACI,kBAAC,IAAD,CACLW,KAAK,QACLgB,UAAQ,EACRC,WAAYH,EACZI,WAAY,SAAAC,GAAI,OAAI,kBAAC,IAAKC,KAAN,CAAWC,MAAO,CAACC,SAAU,aAAa,4BAAKH,EAAKI,MAAM,kBAAC,EAAD,CAAQZ,OAAQQ,EAAKR,UAA/E,IAA8F,2BAAIQ,EAAKhB,aAAvG,IAAwH,2BAAIgB,EAAKK,kBClB1IC,ECKG,WAAO,IAAD,EAEI1C,qBAFJ,mBAEf+B,EAFe,KAERC,EAFQ,KAYtB,OARA7B,qBAAU,YACO,uCAAG,8BAAAvC,EAAA,6DACVwC,EAAM,IAAIiB,EADA,SAEKjB,EAAIoB,eAFT,OAEVnB,EAFU,OAGhB2B,EAAS3B,GAHO,2CAAH,qDAKfC,KACC,IACI,kBAAC,IAAD,CACLW,KAAK,QACLgB,UAAQ,EACRC,WAAYH,EACZI,WAAY,SAAAC,GAAI,OAAI,kBAAC,IAAKC,KAAN,CAAWC,MAAO,CAACC,SAAU,aAAa,4BAAKH,EAAKI,MAAM,kBAAC,EAAD,CAAQZ,OAAQQ,EAAKR,UAA/E,IAA8F,2BAAIQ,EAAKhB,aAAvG,IAAwH,2BAAIgB,EAAKK,kBCrB1IE,ECIM,WAAO,IAAD,EACC3C,qBADD,mBAClB+B,EADkB,KACXC,EADW,KAUzB,OARA7B,qBAAU,YACO,uCAAG,8BAAAvC,EAAA,6DACVwC,EAAM,IAAIiB,EADA,SAEKjB,EAAIqB,kBAFT,OAEVpB,EAFU,OAGhB2B,EAAS3B,GAHO,2CAAH,qDAKfC,KACC,IACI,kBAAC,IAAD,CACLW,KAAK,QACLgB,UAAQ,EACRC,WAAYH,EACZI,WAAY,SAAAC,GAAI,OAAI,kBAAC,IAAKC,KAAN,CAAWC,MAAO,CAACC,SAAU,aAAa,4BAAKH,EAAKI,MAAM,kBAAC,EAAD,CAAQZ,OAAQQ,EAAKR,UAA/E,IAA8F,2BAAIQ,EAAKhB,aAAvG,IAAwH,2BAAIgB,EAAKK,kBCjBpIG,EAGnB,aAAgB,IAAD,gCAFEjD,oBAEF,OAIfkD,eAJe,sBAIE,sBAAAjF,EAAA,sEACF,EAAK+B,eAAed,WAApB,cADE,mFAJF,KAQfiE,eARe,uCAQE,uCAAAlF,EAAA,6DAAQmF,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,WAAYC,EAA/B,EAA+BA,QAASC,EAAxC,EAAwCA,OAAQC,EAAhD,EAAgDA,OAAhD,SACM,EAAKxD,eAAeP,WAApB,kBACR2D,EADQ,qBACcC,EADd,kBACkCC,EADlC,iBACkDC,EADlD,+BAC+EC,GAClG,IAHa,cACT9C,EADS,yBAKRA,GALQ,2CARF,sDACbR,KAAKF,eAAiB,IAAIxC,GCLfiG,ECKe,WAAO,IAAD,EACRpD,qBADQ,mBAC3B+B,EAD2B,KACpBC,EADoB,KAUlC,OARA7B,qBAAU,YACO,uCAAG,8BAAAvC,EAAA,6DACVwC,EAAM,IAAIwC,EADA,SAEKxC,EAAIyC,iBAFT,OAEVxC,EAFU,OAGhB2B,EAAS3B,GAHO,2CAAH,qDAKfC,KACC,IACI,kBAAC,IAAD,CACLW,KAAK,QACLgB,UAAQ,EACRC,WAAYH,EACZI,WAAY,SAAAC,GAAI,OAAI,kBAAC,IAAKC,KAAN,CAAWC,MAAO,CAACC,SAAU,aAAa,4BAAKH,EAAKI,MAAM,kBAAC,EAAD,CAAQZ,OAAQQ,EAAKR,UAA/E,IAA8F,2BAAIQ,EAAKhB,aAAvG,IAAwH,2BAAIgB,EAAKK,kBCnB1IY,ECMG,WAChB,OAAQ,kBAAC,IAAD,CAAMC,iBAAiB,KAE7B,kBAAC,IAAKC,QAAN,CAAcC,IAAI,+FAAoBC,IAAI,KACxC,kBAAC,EAAD,OAEF,kBAAC,IAAKF,QAAN,CAAcC,IAAI,0FAAoBC,IAAI,KACxC,kBAAC,EAAD,OAEF,kBAAC,IAAKF,QAAN,CAAcC,IAAI,iHAAuBC,IAAI,KAC3C,kBAAC,EAAD,OAEF,kBAAC,IAAKF,QAAN,CAAcC,IAAI,oLAAmCC,IAAI,KACvD,kBAAC,EAAD,SCjBeC,E,uKAEjB,OACE,6BACE,kBAAC,EAAD,CAAQvC,KAAK,oGAAoBD,KAAK,cACtC,kBAAC,EAAD,W,GALmCyC,a,0BCsEtBC,E,iDACXC,W,uCAAa,WAAOpG,GAAP,SAAAG,EAAA,+EACZkG,IACJvG,IADI,yCACkCD,IAAQC,IAAI,UAD9C,mBACkEE,GAAO,CAC5EK,QAAS,CACPT,cAAc,UAAD,OAAYC,IAAQC,IAAI,WAGxCwB,MAAK,SAACC,GACL,OAAOA,EAAIrB,QAEZoG,OAAM,SAACC,GAAD,OAAO7F,QAAQ8F,MAAMD,EAAI,kFAVf,2C,2DAYbE,Y,uCAAc,WAAOzG,EAAaE,GAApB,SAAAC,EAAA,+EACbkG,IAAMK,KAAN,yCAC6B7G,IAAQC,IAAI,UADzC,mBAC6DE,GAClEE,EACA,CACEG,QAAS,CACPT,cAAc,UAAD,OAAYC,IAAQC,IAAI,QACrC,eAAgB,uBAPF,2C,6DActB6G,e,sBAAiB,4BAAAxG,EAAA,sEACmB,EAAKiG,WAAL,IADnB,cACTQ,EADS,yBAERA,GAFQ,2C,KAMjBC,W,uCAAa,WAAOvB,GAAP,eAAAnF,EAAA,sEAC0B,EAAKiG,WAAL,WAAoBd,IAD9C,cACL1C,EADK,yBAEJA,GAFI,2C,2DAMbkE,Y,uCAAc,WAAOxB,EAAmBC,GAA1B,eAAApF,EAAA,sEAC0B,EAAKiG,WAAL,WAAoBd,EAApB,qBAA0CC,IADpE,cACN3C,EADM,yBAELA,GAFK,2C,6DAMdmE,S,uCAAW,WACTzB,EACAC,EACAC,GAHS,eAAArF,EAAA,sEAK0B,EAAKiG,WAAL,WAC7Bd,EAD6B,qBACPC,EADO,kBACaC,IANvC,cAKH5C,EALG,yBAQFA,GARE,2C,+DAYXoE,Q,uCAAU,WACR1B,EACAC,EACAC,EACAC,GAJQ,eAAAtF,EAAA,sEAM0B,EAAKiG,WAAL,WAC5Bd,EAD4B,qBACNC,EADM,kBACcC,EADd,iBAC8BC,IAPxD,cAMF7C,EANE,yBASDA,GATC,2C,iEAaVqE,kB,sBAAoB,8BAAA9G,EAAA,sEACqB,EAAKwG,iBAD1B,cACZO,EADY,OAEZtE,EAAwBsE,EAAaC,KAAI,SAAC5F,GAC9C,MAAO,CAAE8B,GAAI9B,EAAI8B,GAAI0B,MAAOxD,EAAIwD,UAHhB,kBAKXnC,GALW,2C,KASpBwE,iB,uCAAmB,WAAO/D,GAAP,iBAAAlD,EAAA,sEACyB,EAAK0G,WAAWxD,GADzC,cACXgE,EADW,OAEXzE,EAAyByE,EAAYC,WAF1B,kBAGV1E,GAHU,2C,2DAOnB2E,Y,uCAAc,WAAOjC,EAAmBC,GAA1B,iBAAApF,EAAA,sEACgC,EAAK2G,YAAYxB,EAAWC,GAD5D,cACNiC,EADM,OAEN5E,EAAsB4E,EAAaC,OACzC/G,QAAQC,IAAIiC,GAHA,kBAILA,GAJK,2C,6DAQd8E,Y,uCAAc,WAAO3C,EAAepB,GAAtB,eAAAxD,EAAA,sEACS,EAAKsG,YAAY,GAAI,CACxC1B,QACApB,gBAHU,cACNf,EADM,yBAKLA,GALK,2C,6DASd+E,a,uCAAe,WAAO5C,EAAepB,EAAqB2B,GAA3C,eAAAnF,EAAA,sEACQ,EAAKsG,YAAL,WAAqBnB,EAArB,aAA2C,CAC9DP,QACApB,gBAHW,cACPf,EADO,yBAKNA,GALM,2C,+DASfgF,U,uCAAY,WAAO7C,EAAepB,EAAqB2B,EAAmBC,GAA9D,eAAApF,EAAA,sEACW,EAAKsG,YAAL,WAAqBnB,EAArB,qBAA2CC,EAA3C,UAA+D,CAClFR,QACApB,gBAHQ,cACJf,EADI,yBAKHA,GALG,2C,iEASZiF,S,uCAAW,WACT9C,EACApB,EACAmE,EACAxC,EACAC,EACAC,GANS,eAAArF,EAAA,sEAQY,EAAKsG,YAAL,WACfnB,EADe,qBACOC,EADP,kBAC2BC,EAD3B,SAEnB,CACET,QACApB,cACAmE,UACA9C,YAAa,eAdR,cAQHpC,EARG,yBAiBFA,GAjBE,2C,qEAmBXT,Q,uCAAU,WAAOkB,GAAP,SAAAlD,EAAA,+EACD,EAAK4H,UADJ,2C,2DAIVA,SAAW,CACT1E,GAAI,KACJF,KAAM,gEACNF,MAAO,wBC3NI+E,G,OCYmB,SAAA1F,GAChC,IAAM2F,EAAQC,cAENnD,EAA+CzC,EAA/CyC,MAAOpB,EAAwCrB,EAAxCqB,YAH0B,EAGcrB,EAA3Be,UAHa,MAGR,GAHQ,IAGcf,EAAlB6B,cAHI,MAGK,KAHL,EAIzC,OACE,kBAAC,IAAD,CAAMrB,GAAE,UAAKmF,EAAMjI,IAAX,YAAkBqD,IACxB,yBAAKN,UAAU,QACb,kBAAC,EAAD,CAAQoB,OAAQA,IAEhB,wBAAIpB,UAAU,eAAegC,GAC7B,uBAAGhC,UAAU,qBAAqBY,GAClC,4BAAQZ,UAAU,gBAAlB,8DCvBOoF,E,kDCYb,WAAY7F,GAAY,IAAD,8BACrB,cAAMA,IAYR8F,WAAa,IAAIjC,EAXf,EAAKkC,MAAQ,CACXC,SAAU,CACR,CACEjF,GAAI,GACJ0B,MAAO,GACPpB,YAAa,MAPE,E,gEAcF,IAAD,OAClBvB,KAAKgG,WAAWzB,iBAAiBrF,MAAK,SAACC,GACjCA,EACF,EAAKgH,SAAS,CAAED,SAAU/G,IACrBb,QAAQ8F,MAAM,6C,+BAIf,IACA8B,EAAalG,KAAKiG,MAAlBC,SACR,OAAwB,IAApBA,EAASE,OACJ,iCAGP,yBAAKzF,UAAU,gBACZuF,EAASnB,KAAI,SAAC/C,GACb,OAAO,kBAAC,EAAD,CAAM4B,IAAK5B,EAAGf,GAAIA,GAAIe,EAAGf,GAAI0B,MAAOX,EAAGW,MAAOpB,YAAaS,EAAGT,sB,GA/BzCuC,aCWvBuC,EAhBM,WACnB,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAI,aACf,kBAAC,EAAD,CAAQjF,KAAK,6CAAUD,KAAK,WAC5B,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOkF,KAAI,wBACT,kBAAC,GAAD,U,kCCYKC,EApBgD,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,MACjF,OAAO,wCAAG,kBAAC,IAAD,KACV,kBAAC,IAAD,CAAKC,KAAM,IACP,kBAAC,IAAD,CAAMnE,MAAO,CAACoE,OAAQ,KAClB,kBAAC,IAAD,CAAWlE,MAAM,0GAAqBmE,MAAOL,EAAWM,WAAY,CAAEC,MAAO,eAGrF,kBAAC,IAAD,CAAKJ,KAAM,IACP,kBAAC,IAAD,CAAMnE,MAAO,CAACoE,OAAQ,KAClB,kBAAC,IAAD,CAAWlE,MAAM,gHAAsBmE,MAAOJ,EAASK,WAAY,CAAEC,MAAO,eAGpF,kBAAC,IAAD,CAAKJ,KAAM,IACP,kBAAC,IAAD,CAAMnE,MAAO,CAACoE,OAAQ,KAClB,kBAAC,IAAD,CAAWlE,MAAM,gEAAcmE,MAAOH,SCNnCM,EARwC,SAAC,GAA+B,IAA7B/F,EAA4B,EAA5BA,SAAUL,EAAkB,EAAlBA,MAAOqG,EAAW,EAAXA,KACvE,OAAO,4CAAO,kBAAC,IAAD,CAAMzE,MAAO,CAAEoE,OAAQ,KACjC,4BAAK3F,GACL,4BAAKL,GACL,4HAAuBqG,MCVVC,EAEnB,aAAgB,IAAD,gCADErH,oBACF,OAIfC,QAJe,sBAIL,sBAAAhC,EAAA,sEACK,EAAK+B,eAAed,WAAkB,IAD3C,mFAJK,KAOfoI,cAPe,sBAOC,sBAAArJ,EAAA,sEACC,EAAK+B,eAAed,WAAwB,qBAD7C,mFANdgB,KAAKF,eAAiB,IAAIxC,GCJf+J,ECKC,WAAO,IAAD,EAEMlH,qBAFN,mBAEXC,EAFW,KAELC,EAFK,OAGkBF,qBAHlB,mBAGXmH,EAHW,KAGCC,EAHD,KAsBlB,OAjBAjH,qBAAU,YACS,uCAAG,8BAAAvC,EAAA,6DACRwC,EAAM,IAAI4G,EADF,SAEQ5G,EAAIR,UAFZ,OAERyH,EAFQ,OAGdnH,EAAQmH,GAHM,2CAAH,qDAKf/G,KACD,IAEHH,qBAAU,YACS,uCAAG,8BAAAvC,EAAA,6DACRwC,EAAM,IAAI4G,EADF,SAEc5G,EAAI6G,gBAFlB,OAERK,EAFQ,OAGdF,EAAcE,GAHA,2CAAH,qDAKfhH,KACD,IACI,oCACFL,EACK,kBAAC,EAAD,CAAac,SAAUd,EAAKQ,SAAUC,MAAOT,EAAKS,MAAOqG,KAAM9G,EAAKsH,mBACpE,GAELJ,EACK,kBAAC,EAAD,CAAoBZ,QAASY,EAAWZ,QAASD,UAAWa,EAAWb,UAAWE,MAAOW,EAAWX,QACpG,KC9BOgB,E,4MACnBC,GAAK,IAAI7D,E,uDAGP,OADA/D,KAAK4H,GAAGrD,iBAEN,6BACE,kBAAC,EAAD,CAAQjD,KAAK,6CAAUD,KAAK,WAC5B,kBAAC,EAAD,W,GAPiCyC,a,qCCHpB+D,GAGnB,aAAgB,IAAD,gCAFE/H,oBAEF,OAIfgI,eAJe,uCAIE,WAAO5E,GAAP,SAAAnF,EAAA,sEACF,EAAK+B,eAAed,WAApB,kBAA0DkE,EAA1D,iBADE,mFAJF,2DAQf6E,eARe,uCAQE,WACflH,EAAeqC,GADA,eAAAnF,EAAA,sEAGM,EAAK+B,eAAeT,YAApB,kBACR6D,EADQ,+BACwBrC,GAC3C,IALa,cAGTL,EAHS,yBAORA,GAPQ,2CARF,wDACbR,KAAKF,eAAiB,IAAIxC,GCLf0K,GCMsC,SAAC,GAAiB,IAAhB9E,EAAe,EAAfA,UAAe,EACtC/C,oBAAS,GAD6B,mBAC7D8H,EAD6D,KACpDC,EADoD,KAQ9DC,EAAQ,uCAAG,WAAOC,GAAP,eAAArK,EAAA,6DACfO,QAAQC,IAAI,WAAY6J,GAClBpC,EAAc,IAAI6B,GAFT,SAGT7B,EAAW+B,eAAeK,EAAOvH,MAAOqC,GAH/B,OAIfrE,OAAOC,SAASuJ,SAJD,2CAAH,sDAUd,OAAO,oCACL,4BAAQ1H,UAAW,SAAW2H,QAjBb,WACjBJ,GAAW,KAgBX,uJAGA,kBAAC,IAAD,CACEvF,MAAM,sHACN4F,UAAU,QACVC,UAAU,EACVC,QArBY,WACdP,GAAW,IAqBTD,QAASA,GAET,kBAAC,IAAD,CACElH,KAAK,QACL2H,OAAQ,WACRC,cAAe,CAAEC,UAAU,GAC3BT,SAAUA,EACVU,eAnBiB,SAACC,GACtBxK,QAAQC,IAAI,UAAWuK,KAoBnB,kBAAC,IAAKtG,KAAN,CACEuG,MAAM,QACNhI,KAAK,QACLiI,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,wJAEnC,kBAAC,KAAD,OAEF,kBAAC,IAAK1G,KAAN,KACE,kBAAC,KAAD,CAAQ2G,KAAK,UAAUC,SAAS,UAAhC,gHClDKC,GCOyC,SAAC,GAAmB,IAAjBnG,EAAgB,EAAhBA,UAAgB,EAC3C/C,oBAAS,GADkC,mBAClE8H,EADkE,KACzDC,EADyD,OAEjC/H,qBAFiC,mBAElEmJ,EAFkE,KAEpDC,EAFoD,KAmBzE,OATAjJ,qBAAU,YACO,uCAAG,8BAAAvC,EAAA,6DACVwC,EAAM,IAAIsH,GADA,SAEKtH,EAAIuH,eAAe5E,GAFxB,OAEV1C,EAFU,OAGhB+I,EAAgB/I,GAHA,2CAAH,qDAKfC,KACC,IAEI,oCACL,4BAAQE,UAAW,SAAU2H,QAjBZ,WACjBJ,GAAW,KAgBX,qLAGA,kBAAC,IAAD,CACEvF,MAAM,oGACN4F,UAAU,QACViB,MAAO,MACPhB,UAAU,EACVC,QAtBY,WACdP,GAAW,IAsBTD,QAASA,GAET,kBAAC,IAAD,CACE7G,KAAK,QACLgB,UAAQ,EACRC,WAAYiH,EACZhH,WAAY,SAAAC,GAAI,OAAI,kBAAC,IAAKC,KAAN,KAAW,4BAAKD,EAAK3B,UAArB,IAAoC,2BAAI2B,EAAK1B,OAA7C,IAAwD,2BAAI0B,EAAKkH,aC1CxEC,GAEnB,aAAgB,IAAD,gCADE5J,oBACF,OAIhB6J,cAJgB,uCAIA,+BAAA5L,EAAA,6DACVmF,EADU,EACVA,UADU,SAGQ,EAAKpD,eAAeH,cAApB,kBACRuD,IAJA,cAGP1C,EAHO,yBAONA,GAPM,2CAJA,sDACbR,KAAKF,eAAiB,IAAIxC,GCQxBsM,GAA+B,CACnC3I,GAAI,GACJ0B,MAAO,GACPpB,YAAa,GACbsI,QAAS,CACP5I,GAAI,GACJJ,MAAO,IAETqE,WAAY,CACV,CACEjE,GAAI,GACJM,YAAa,GACboB,MAAO,2FCvBEmH,G,kDD6Bb,WAAY5J,GAAuB,IAAD,8BAChC,cAAMA,IAIR8F,WAAa,IAAIjC,EALiB,EAalC4F,cAbkC,sBAalB,8BAAA5L,EAAA,2DACNmF,EAAc,EAAKhD,MAAnBgD,WADM,uBAGN6G,EAAM,IAAIL,GAHJ,SAINK,EAAIJ,cAAc,CAAEzG,cAJd,OAKZrE,OAAOmL,QAAQC,OALH,2CAXd,EAAKhE,MAAQ2D,GAFmB,E,gEAMb,IAAD,OACd5J,KAAKE,MAAMgD,WACblD,KAAKgG,WAAWvB,WAAWzE,KAAKE,MAAMgD,WAAWhE,MAAK,SAACC,GACrD,EAAKgH,SAAShH,Q,+BAYV,IAAD,EAC8Ca,KAAKiG,MAAlDtD,EADD,EACCA,MAAOpB,EADR,EACQA,YAAyB2I,EADjC,EACqBhF,WAC5B,OACE,6BACE,kBAAC,EAAD,CAAQ5D,KAAMqB,EAAOtB,KAAK,SAASE,YAAaA,IAC/CvB,KAAKE,MAAMgD,UAAY,oCAAE,kBAAC,GAAD,CAAiBA,UAAWlD,KAAKE,MAAMgD,YAAa,kBAAC,GAAD,CAAgBA,UAAWlD,KAAKE,MAAMgD,aAAmB,GACvI,kBAAC,KAAD,CAAQiH,QAAM,EAAC7B,QAAStI,KAAK2J,eAA7B,mFACA,yBAAKhJ,UAAU,gBACZuJ,EAASnF,KAAI,SAAC/C,EAAIoI,GACjB,OAAO,kBAAC,EAAD,CAAMxG,IAAKwG,EAAOnJ,GAAIe,EAAGf,GAAI0B,MAAOX,EAAGW,MAAOpB,YAAaS,EAAGT,uB,GA/B5CuC,aE1BhBuG,GAEnB,aAAgB,IAAD,gCADEvK,oBACF,OAIjB4E,YAJiB,uCAIJ,WAAOxB,EAAmBC,GAA1B,SAAApF,EAAA,sEACI,EAAK+B,eAAed,WAApB,kBAAqDkE,EAArD,qBAA2EC,IAD/E,mFAJI,6DAQhBmH,eARgB,uCAQC,iCAAAvM,EAAA,6DACXmF,EADW,EACXA,UAAUC,EADC,EACDA,WADC,SAGO,EAAKrD,eAAeH,cAApB,kBACRuD,EADQ,qBACcC,IAJrB,cAGR3C,EAHQ,yBAOPA,GAPO,2CARD,sDACbR,KAAKF,eAAiB,IAAIxC,GCMxBsM,GAA0B,CAC9B3I,GAAI,EACJ0B,MAAO,GACPpB,YAAa,GACb8D,OAAQ,CACN,CACEpE,GAAI,EACJ0B,MAAO,GACPpB,YAAa,MCnBJgJ,G,kDD0Bb,WAAYrK,GAAwB,IAAD,8BACjC,cAAMA,IAIR8F,WAAa,IAAIqE,GALkB,EA+BnCC,eA/BmC,sBA+BlB,kCAAAvM,EAAA,2DACgB,EAAKmC,MAA9BgD,EADS,EACTA,UAAWC,EADF,EACEA,YACdD,IAAaC,EAFD,uBAGP4G,EAAM,IAAIM,GAHH,SAIPN,EAAIO,eAAe,CAACpH,YAAWC,eAJxB,OAKbtE,OAAOmL,QAAQC,OALF,2CA7Bf,EAAKhE,MAAQ2D,GAFoB,E,gEAMd,IAAD,OACd5J,KAAKE,MAAMiD,YAAcnD,KAAKE,MAAMgD,UACtClD,KAAKgG,WACFtB,YAAY1E,KAAKE,MAAMgD,UAAWlD,KAAKE,MAAMiD,YAC7CjE,MAAK,SAACC,GACL,EAAKgH,SAAShH,MAEbb,QAAQ8F,MAAM,wQ,oCAIrB,OAAOpE,KAAKiG,MAAMZ,OAAON,KAAI,SAAC/C,EAAIoI,GAChC,OACE,kBAAC,EAAD,CACExG,IAAKwG,EACLnJ,GAAIe,EAAGf,GAAGuJ,WACVzI,OAAU,KACVY,MAAOX,EAAGW,MACVpB,YAAaS,EAAGT,mB,+BAiBtB,IAAMkJ,EAAQzK,KAAK0K,cADZ,EAEwB1K,KAAKiG,MAA5BtD,EAFD,EAECA,MAAOpB,EAFR,EAEQA,YACf,OACE,6BACE,kBAAC,EAAD,CAAQD,KAAMqB,EAAOtB,KAAK,SAASE,YAAaA,IAChD,kBAAC,KAAD,CAAQ4I,QAAM,EAAC7B,QAAStI,KAAKsK,gBAA7B,qGACA,yBAAK3J,UAAU,gBAAgB8J,Q,GAhDD3G,aEvBjB6G,GAEnB,aAAgB,IAAD,gCADE7K,oBACF,OAIhB8K,YAJgB,uCAIF,mCAAA7M,EAAA,6DACRmF,EADQ,EACRA,UAAUC,EADF,EACEA,WAAYC,EADd,EACcA,QADd,SAGU,EAAKtD,eAAeH,cAApB,kBACRuD,EADQ,qBACcC,EADd,kBACkCC,IAJ5C,cAGL5C,EAHK,yBAOJA,GAPI,2CAJE,sDACbR,KAAKF,eAAiB,IAAIxC,GCKxBsM,GAA6B,CACjC3I,GAAI,GACJ0B,MAAO,GACPpB,YAAa,GACbW,MAAO,CACL,CACEjB,GAAI,GACJ0B,MAAO,GACPpB,YAAa,GACbQ,OAAQ,iBCnBC8I,G,kDDyBb,WAAY3K,GAAqB,IAAD,8BAC9B,cAAMA,IAIR8F,WAAa,IAAIjC,EALe,EA+BhC6G,YA/BgC,sBA+BlB,oCAAA7M,EAAA,2DAC+B,EAAKmC,MAAxCgD,EADI,EACJA,UAAWC,EADP,EACOA,WAAYC,EADnB,EACmBA,QAC/B9E,QAAQC,IAAI,EAAK2B,SACbgD,GAAaC,GAAcC,GAHnB,uBAIJ2G,EAAM,IAAIY,GAJN,SAKJZ,EAAIa,YAAY,CAAE1H,YAAWC,aAAYC,YALrC,OAMVvE,OAAOmL,QAAQC,OANL,2CA7BZ,EAAKhE,MAAQ2D,GAFiB,E,gEAMX,IAAD,SACyB5J,KAAKE,MAAxCgD,EADU,EACVA,UAAWC,EADD,EACCA,WAAYC,EADb,EACaA,QAC3BA,GAAWD,GAAcD,GAC3BlD,KAAKgG,WAAWrB,SAASzB,EAAWC,EAAYC,GAASlE,MAAK,SAACC,GAC7D,EAAKgH,SAAShH,Q,oCAMlB,GAAIa,KAAKiG,MAAM/D,MACb,OAAOlC,KAAKiG,MAAM/D,MAAM6C,KAAI,SAAC/C,EAAIoI,GAC/B,OACE,kBAAC,EAAD,CACExG,IAAK5B,EAAGf,GACRA,GAAIe,EAAGf,GACP0B,MAAOX,EAAGW,MACVpB,YAAaS,EAAGT,YAChBQ,OAAQC,EAAGD,c,+BAkBnB,IAAM0I,EAAQzK,KAAK0K,cAEnB,OACE,6BACE,kBAAC,EAAD,CAAQpJ,KAAMtB,KAAKiG,MAAMtD,MAAOtB,KAAK,SAASE,YAAavB,KAAKiG,MAAM1E,cACtE,kBAAC,KAAD,CAAQ4I,QAAM,EAAC7B,QAAStI,KAAK4K,aAA7B,mFACA,yBAAKjK,UAAU,gBAAgB8J,Q,GAjDJ3G,aExBpBgH,I,cCmBC,SAAC5K,GACf,IAAI6K,EAAe,CAAC,+NAiBpB,OAhBI7K,EAAM8K,WACRD,EAAe7K,EAAM8K,SAASjG,KAAI,SAACkG,EAASb,GAAW,IAAD,MACpD,OACE,yBAAKxG,IAAKwG,EAAOzJ,UAAU,WACzB,6BACE,8BAAUI,KAAK,WADjB,UAEGkK,EAAQC,cAFX,aAEG,EAAgBrK,OAElBoK,EAAQ3J,KACT,uBAAGX,UAAU,gBAAgB5B,KAAI,UAAEkM,EAAQE,YAAV,aAAE,EAAcvN,KAAjD,UACGqN,EAAQE,YADX,aACG,EAAc7J,WAOvB,yBAAKX,UAAU,QACb,kGACCoK,KCCQK,GA5BE,SAAClL,GAChB,IAAImL,EAAM,qCAEV,OAAQnL,EAAM6B,QACZ,IAAK,cACHsJ,EACE,kBAAC,KAAD,CAAQ/C,QAASpI,EAAMoL,aAAvB,+FAQN,OACE,yBAAK3K,UAAU,QACb,kBAAC,EAAD,CAAQoB,OAAQ7B,EAAM6B,SACtB,wBAAIpB,UAAU,eAAeT,EAAMyC,OACnC,uBAAGhC,UAAU,qBAAqBT,EAAMqB,aACxC,yBAAKZ,UAAU,cAAcT,EAAMoB,MACnC,yBAAKmB,MAAO,CAAC8I,UAAU,KACpBF,EACD,kBAAC,KAAD,CAAQlB,QAAM,EAAC7B,QAASpI,EAAMsL,WAAY/I,MAAO,CAACgJ,WAAY,KAA9D,sFClCaC,GAGnB,aAAgB,IAAD,gCAFE5L,oBAEF,OAIf8E,QAJe,uCAIL,mCAAA7G,EAAA,6DAAOmF,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,WAAYC,EAA9B,EAA8BA,QAASC,EAAvC,EAAuCA,OAAvC,SACK,EAAKvD,eAAed,WAApB,kBAA0CkE,EAA1C,qBAAgEC,EAAhE,kBAAoFC,EAApF,iBAAoGC,IADzG,mFAJK,2DAQfoC,SARe,uCAQJ,yCAAA1H,EAAA,6DACP4E,EADO,EACPA,MAAOpB,EADA,EACAA,YAAamE,EADb,EACaA,QAAS9C,EADtB,EACsBA,YAAaM,EADnC,EACmCA,UAAWC,EAD9C,EAC8CA,WAAYC,EAD1D,EAC0DA,QAD1D,kBAGF,EAAKtD,eAAeT,YAApB,kBACM6D,EADN,qBAC4BC,EAD5B,kBACgDC,EADhD,SAEL,CACET,QACApB,cACAmE,UACA9C,iBATK,2CARI,2DAqBf4I,WArBe,uCAqBF,mCAAAzN,EAAA,6DAAQmF,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,WAAYC,EAA/B,EAA+BA,QAASC,EAAxC,EAAwCA,OAAxC,SACL,EAAKvD,eAAeH,cAApB,kBAA6CuD,EAA7C,qBAAmEC,EAAnE,kBAAuFC,EAAvF,iBAAuGC,IADlG,2CArBE,2DAyBfsI,aAzBe,uCAyBA,mCAAA5N,EAAA,6DAAOmF,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,WAAYC,EAA9B,EAA8BA,QAASC,EAAvC,EAAuCA,OAAvC,SACP,EAAKvD,eAAeP,WAApB,kBAA+C2D,EAA/C,qBAAqEC,EAArE,kBAAyFC,EAAzF,iBAAyGC,EAAzG,4BAA2I,IADpI,2CAzBA,sDACbrD,KAAKF,eAAiB,IAAIxC,GCHTsO,GAGnB,aAAgB,IAAD,gCAFE9L,oBAEF,OAIfgI,eAJe,uCAIE,WAAO5E,GAAP,SAAAnF,EAAA,sEACF,EAAK+B,eAAed,WAApB,kBAA0DkE,EAA1D,iBADE,mFAJF,2DAQf2I,cARe,uCAQC,uCAAA9N,EAAA,6DACZuD,EADY,EACZA,KAAM4B,EADM,EACNA,UAAUC,EADJ,EACIA,WAAYC,EADhB,EACgBA,QAASC,EADzB,EACyBA,OADzB,SAGO,EAAKvD,eAAeT,YAApB,kBACR6D,EADQ,qBACcC,EADd,kBACkCC,EADlC,iBACkDC,EADlD,YAEnB,CACE/B,SANU,cAGRd,EAHQ,yBASPA,GATO,2CARD,sDACbR,KAAKF,eAAiB,IAAIxC,GCNfwO,GCSsC,SAAC,GAA8C,IAA7C5I,EAA4C,EAA5CA,UAAWC,EAAiC,EAAjCA,WAAYC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,OAC/E8E,EAAQ,uCAAG,WAAOC,GAAP,eAAArK,EAAA,6DACfO,QAAQC,IAAI,WAAY6J,GAClB2B,EAAM,IAAI6B,GAFD,SAGT7B,EAAI8B,cAAc,CAAEvK,KAAM8G,EAAO9G,KAAM4B,YAAWC,aAAYC,UAASC,WAH9D,OAIfxE,OAAOC,SAASuJ,SAJD,2CAAH,sDAWd,OACE,kBAAC,IAAD,CACEtH,KAAK,QACLoH,SAAUA,EACVU,eARmB,SAACC,GACtBxK,QAAQC,IAAI,UAAWuK,KAUrB,kBAAC,IAAKtG,KAAN,CACEzB,KAAK,OACLiI,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,kJAEnC,kBAAC,KAAD,OAEF,kBAAC,IAAK1G,KAAN,KACE,kBAAC,KAAD,CAAQ2G,KAAK,UAAUC,SAAS,UAAhC,6DCFO2C,GAxB4B,SAAC,GAA2B,IAA1B7I,EAAyB,EAAzBA,UAAU8I,EAAe,EAAfA,WAE7CC,EAAS,SAACC,GACZF,EAAWE,EAAE1B,aAHiD,EAKxCrK,qBALwC,mBAK3DgM,EAL2D,KAKpDC,EALoD,KAelE,OATA9L,qBAAU,YACS,uCAAG,8BAAAvC,EAAA,6DACVwC,EAAM,IAAIsH,GADA,SAEKtH,EAAIuH,eAAe5E,GAFxB,OAEV1C,EAFU,OAGhBlC,QAAQC,IAAIiC,GACZ4L,EAAS5L,GAJO,2CAAH,qDAMfC,KACA,IACG,oCACP,kBAAC,IAAD,CACAW,KAAK,QACLgB,UAAQ,EACRC,WAAY8J,EACZ7J,WAAY,SAAAC,GAAI,OAAI,kBAAC,IAAKC,KAAN,CAAW8F,QAAS2D,EAAOI,KAAK,KAAM9J,EAAKtB,KAAK,4BAAKsB,EAAK3B,UAA1D,IAAyE,2BAAI2B,EAAK1B,aC7B3FyL,GCYwC,SAAC,GAAgD,IAA9CpJ,EAA6C,EAA7CA,UAAWC,EAAkC,EAAlCA,WAAYC,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,OAAa,EAGvElD,qBAHuE,mBAG5FmD,EAH4F,KAGpFiJ,EAHoF,KAK7FC,EAAG,uCAAG,sBAAAzO,EAAA,sDACJuF,IACY,IAAIP,GACZE,eAAe,CAAEC,YAAWC,aAAYC,UAASC,SAAQC,OAAQA,IAHjE,2CAAH,qDAL0F,EAWrEnD,oBAAS,GAX4D,mBAW5F8H,EAX4F,KAWnFC,EAXmF,KAqBnG,OAAO,oCACH,kBAAC,KAAD,CAAQiB,KAAK,UAAUb,QAVR,WACfJ,GAAW,KASX,qJAGA,kBAAC,IAAD,CACIvF,MAAM,8IACN4F,UAAU,QACViB,MAAM,QACNhB,UAAU,EACVC,QAfQ,WACZP,GAAW,IAePD,QAASA,GAET,kBAAC,GAAD,CAAU/E,UAAWA,EAAW8I,WAfrB,SAACE,GAChBK,EAAUL,MAeN,qPAA4C5I,GAC5C,kBAAC,KAAD,CAAQgF,QAASkE,GAAjB,4ICnBNC,GAA6B,CACjCxL,GAAI,GACJ0B,MAAO,GACPpB,YAAa,GACbD,KAAM,GACNS,OAAQ,cACRiJ,SAAU,CACR,CACE1J,KAAM,GACN4J,OAAQ,CACNrK,MAAO,GACPI,GAAI,IAENkK,KAAM,CACJvN,IAAK,GACL0D,KAAM,OC3CCoL,G,kDDkDb,WAAYxM,GAAoB,IAAD,8BAC7B,cAAMA,IAIR8F,WAAa,IAAI0F,GALc,EAsB/BJ,YAAc,WACZzM,OAAO8N,MAAM,uJADK,MAEiC,EAAKzM,MAAhDgD,EAFU,EAEVA,UAAWC,EAFD,EAECA,WAAYC,EAFb,EAEaA,QAASC,EAFtB,EAEsBA,OACpCH,GAAaC,GAAcC,GAAWC,GACxC,EAAK2C,WAAW2F,aAAa,CAAEzI,YAAWC,aAAYC,UAASC,WAAUnE,MAAK,WAC5EL,OAAOC,SAASuJ,aA3BS,EAgC/BmD,WAhC+B,sBAgClB,sCAAAzN,EAAA,2DACwC,EAAKmC,MAAhDgD,EADG,EACHA,UAAWC,EADR,EACQA,WAAYC,EADpB,EACoBA,QAASC,EAD7B,EAC6BA,SACpCH,GAAaC,GAAcC,GAAWC,GAF/B,uBAGH0G,EAAM,IAAI2B,GAHP,SAIH3B,EAAIyB,WAAW,CAAEtI,YAAWC,aAAYC,UAASC,WAJ9C,OAKTxE,OAAOmL,QAAQC,OALN,2CA9BX,EAAKhE,MAAQwG,GAFgB,E,gEAOV,IAAD,SACiCzM,KAAKE,MAAhDgD,EADU,EACVA,UAAWC,EADD,EACCA,WAAYC,EADb,EACaA,QAASC,EADtB,EACsBA,OACpCH,GAAaC,GAAcC,GAAWC,GACxCrD,KAAKgG,WAAWpB,QAAQ,CAAE1B,YAAWC,aAAYC,UAASC,WAAUnE,MAAK,SAACC,GACxE,EAAKgH,SAAS,CACZxD,MAAOxD,EAAIwD,MACXpB,YAAapC,EAAIoC,YACjBD,KAAMnC,EAAIuG,QAAQpE,KAClBS,OAAQ5C,EAAI4C,OACZiJ,SAAU7L,EAAI6L,gB,+BA0BpB1M,QAAQC,IAAIyB,KAAKiG,OADV,MAE8BjG,KAAKiG,MAAlCtD,EAFD,EAECA,MAAOpB,EAFR,EAEQA,YAAaD,EAFrB,EAEqBA,KAFrB,EAG4CtB,KAAKE,MAAhDgD,EAHD,EAGCA,UAAWC,EAHZ,EAGYA,WAAYC,EAHxB,EAGwBA,QAASC,EAHjC,EAGiCA,OACxC,OACE,6BACE,kBAAC,GAAD,CACEV,MAAOA,EACPrB,KAAMA,EACNC,YAAaA,EACbQ,OAAQ/B,KAAKiG,MAAMlE,OACnBuJ,YAAatL,KAAKsL,YAClBE,WAAYxL,KAAKwL,aAGnB,yBAAK/I,MAAO,CAAEoE,OAAQ,KAEnB3D,GAAaC,GAAcC,GAAWC,EACnC,oCACF,kBAAC,GAAD,CAAgBH,UAAWA,EAAWC,WAAYA,EAChDC,QAASA,EAASC,OAAQA,IAC1B,wBAAIZ,MAAO,CAAC8I,UAAU,KAAtB,iHACF,kBAAC,GAAD,CAAerI,UAAWA,EAAWC,WAAYA,EAC/CC,QAASA,EAASC,OAAQA,KAC1B,IAGN,kBAAC,GAAD,CAASA,OAAQrD,KAAKE,MAAMmD,OAAQ2H,SAAUhL,KAAKiG,MAAM+E,gB,GArE/BlH,aEjCnB8I,GAVE,SAAC1M,GAA2B,IAEnCmD,EAAWwJ,cAAXxJ,OAER,OACE,oCACE,kBAAC,GAAD,eAAMA,OAAQA,GAAYnD,MCUjB4M,GAhBG,SAAC,GAAgD,IAA9C5J,EAA6C,EAA7CA,UAAWC,EAAkC,EAAlCA,WACxB0C,EAAQC,cACN1C,EAAYyJ,cAAZzJ,QACR,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOkD,OAAK,EAACC,KAAMV,EAAMjI,KACvB,kBAAC,GAAD,CAAOsF,UAAWA,EAAWC,WAAYA,EAAYC,QAASA,KAEhE,kBAAC,IAAD,CAAOmD,KAAI,UAAKV,EAAMjI,IAAX,aACT,kBAAC,GAAD,CAAUsF,UAAWA,EAAWC,WAAYA,EAAYC,QAASA,QCS5D2J,GAlBM,SAAC,GAAuC,IAArC7J,EAAoC,EAApCA,UAChB2C,EAAQC,cACN3C,EAAe0J,cAAf1J,WAER,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOmD,OAAK,EAACC,KAAMV,EAAMjI,KACvB,kBAAC,GAAD,CAAUsF,UAAWA,EAAWC,WAAYA,KAE9C,kBAAC,IAAD,CAAOoD,KAAI,UAAKV,EAAMjI,IAAX,cACT,kBAAC,GAAD,CAAWsF,UAAWA,EAAWC,WAAYA,QCDxC6J,GAdK,WAClB,IAAMnH,EAAQC,cACN5C,EAAc2J,cAAd3J,UACR,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOoD,OAAK,EAACC,KAAMV,EAAMjI,KACvB,kBAAC,GAAD,CAASsF,UAAWA,KAEtB,kBAAC,IAAD,CAAOqD,KAAI,UAAKV,EAAMjI,IAAX,iBACT,kBAAC,GAAD,CAAcsF,UAAWA,OCmBlB+J,I,OAxBO,SAAC/M,GAAgC,IAC7CgN,EAAgChN,EAAhCgN,UAAWC,EAAqBjN,EAArBiN,iBACXC,EAA8ClN,EAA9CkN,iBAAkBC,EAA4BnN,EAA5BmN,wBAC1B,OACE,yBAAK1M,UAAU,wBACb,yBAAKA,UAAU,+BACb,uBAAGA,UAAU,+BAAb,oDACA,2BACEmG,MAAOoG,EACPI,SAAUF,EACVzM,UAAU,iCAId,uBAAGA,UAAU,+BAAb,oDACA,2BACEmG,MAAOqG,EACPG,SAAUD,EACV1M,UAAU,mC,UCzBH4M,G,kDCWb,WAAYrN,GAAe,IAAD,8BACxB,cAAMA,IAOR8F,WAAa,IAAIjC,EARS,EAU1ByJ,iBAAmB,SAACC,GAClB,EAAKtH,SAAS,CAAExD,MAAO8K,EAAMC,cAAc5G,SAXnB,EAa1B6G,wBAA0B,SAACF,GACzB,EAAKtH,SAAS,CAAE5E,YAAakM,EAAMC,cAAc5G,SAdzB,EAgB1B8G,SAhB0B,sBAgBf,gCAAA7P,EAAA,2DACsB,EAAKkI,MAA5BtD,EADC,EACDA,MAAOpB,EADN,EACMA,aACXoB,IAASpB,EAFJ,gCAGD,EAAKyE,WAAWV,YAAY3C,EAAOpB,GAAarC,MAAK,SAACC,GAAD,OAASb,QAAQC,IAAIY,MAHzE,OAIP+J,KAAQ2E,QAAQ,wHAJT,sBAKFhP,OAAO8N,MAAM,yFALX,2CAdT,EAAK1G,MAAQ,CACXtD,MAAO,GACPpB,YAAa,IAJS,E,qDAwBxB,OACE,yBAAKZ,UAAU,QACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,6BACb,4BACE,8BAAUI,KAAK,WADjB,wCAIA,6NACA,4BAAQJ,UAAU,kBAAkB2H,QAAStI,KAAK4N,UAChD,8BAAU7M,KAAM,QADlB,oFAKF,kBAAC,GAAD,CACEmM,UAAWlN,KAAKiG,MAAMtD,MACtByK,iBAAkBpN,KAAKwN,iBACvBL,iBAAkBnN,KAAKiG,MAAM1E,YAC7B8L,wBAAyBrN,KAAK2N,gC,GA3CD7J,aCwB1BgK,I,OAzBQ,SAAC5N,GAAiC,IAC/CgN,EAAgChN,EAAhCgN,UAAWC,EAAqBjN,EAArBiN,iBACXC,EAA8ClN,EAA9CkN,iBAAkBC,EAA4BnN,EAA5BmN,wBAC1B,OACE,oCACE,yBAAK1M,UAAU,+BACb,uBAAGA,UAAU,+BAAb,oDACA,2BACEmG,MAAOoG,EACPI,SAAUF,EACVzM,UAAU,iCAGd,yBAAKA,UAAU,+BACb,uBAAGA,UAAU,+BAAb,oDACA,2BACEmG,MAAOqG,EACPG,SAAUD,EACV1M,UAAU,oCCkBLoN,GAlCO,SAAC7N,GAAgC,IAAD,EACpBC,mBAAS,CAAC,CAAEc,GAAI,GAAI0B,MAAO,2FADP,mBAC7CuD,EAD6C,KACnC8H,EADmC,KAG9ChI,EAAa,IAAIjC,EACjBkK,EAAQ,uCAAG,4BAAAlQ,EAAA,sEACkBiI,EAAWnB,oBAD7B,OACT1F,EADS,OAEf6O,EAAY7O,GAFG,2CAAH,qDAUd,OALAmB,qBAAU,WACRhC,QAAQC,IAAI,MACZ0P,MAEC,IAED,4BACEtN,UAAU,+BACVmG,MAAO5G,EAAMgO,eACbZ,SAAUpN,EAAMiO,qBAEhB,4BAAQrH,MAAM,GAAGsH,QAAM,GAAvB,yFAGClI,EAASnB,KAAI,SAACjH,GACb,OACE,4BAAQ8F,IAAK9F,EAAKmD,GAAI6F,MAAOhJ,EAAKmD,IAC/BnD,EAAK6E,YCQH0L,GAjCQ,SAACnO,GAAgC,IAAD,EACnBC,mBAAS,CAAC,CAAEc,GAAI,GAAI0B,MAAO,MADR,mBAC9CuC,EAD8C,KAClCoJ,EADkC,KAarD,OAVAhO,qBAAU,YACM,uCAAG,8BAAAvC,EAAA,6DACTiI,EAAa,IAAIjC,EADR,SAEmBiC,EAAWhB,iBAAiB9E,EAAMgO,gBAFrD,QAET/O,EAFS,SAIbmP,EAAYnP,GAJC,2CAAH,qDAOd8O,KACC,CAAC/N,EAAMgO,iBAER,4BACEvN,UAAU,+BACVmG,MAAO5G,EAAMqO,gBACbjB,SAAUpN,EAAMsO,sBAEhB,4BAAQ1H,MAAM,GAAGsH,QAAM,GAAvB,6GAGClJ,EAAWH,KAAI,SAACmF,GACf,OACE,4BAAQtG,IAAKsG,EAASjJ,GAAI6F,MAAOoD,EAASjJ,IACvCiJ,EAASvH,YCUP8L,GAlCK,SAACvO,GAA8B,IACzCgO,EAAqEhO,EAArEgO,eAAgBK,EAAqDrO,EAArDqO,gBAAiBG,EAAoCxO,EAApCwO,aAAcC,EAAsBzO,EAAtByO,kBADP,EAEpBxO,mBAAS,CAAC,CAAEc,GAAI,GAAI0B,MAAO,MAFP,mBAEzC0C,EAFyC,KAEjCuJ,EAFiC,KAchD,OAVAtO,qBAAU,WACgB,KAApBiO,GACY,uCAAG,8BAAAxQ,EAAA,6DACTiI,EAAa,IAAIjC,EADR,SAEgBiC,EAAWb,YAAY+I,EAAgBK,GAFvD,OAETpP,EAFS,OAGfyP,EAAUzP,GAHK,2CAAH,oDAKd8O,KAED,CAACM,EAAiBL,IAEnB,4BACEvN,UAAU,+BACVmG,MAAO4H,EACPpB,SAAUqB,GAEV,4BAAQ7H,MAAM,GAAGsH,QAAM,GAAvB,2GAGC/I,EAAON,KAAI,SAACjH,GACX,OACE,4BAAQ8F,IAAK9F,EAAKmD,GAAI6F,MAAOhJ,EAAKmD,IAC/BnD,EAAK6E,YCvCHkM,G,kDCcb,WAAY3O,GAAe,IAAD,8BACxB,cAAMA,IAOR8F,WAAa,IAAIjC,EARS,EAS1ByJ,iBAAmB,SAACC,GAClB,EAAKtH,SAAS,CAAExD,MAAO8K,EAAMC,cAAc5G,SAVnB,EAY1B6G,wBAA0B,SAACF,GACzB,EAAKtH,SAAS,CAAE5E,YAAakM,EAAMC,cAAc5G,SAbzB,EAe1BgI,oBAAsB,SAACC,GACrB,EAAK5I,SAAS,CAAEjD,UAAW6L,EAASrB,cAAc5G,QAClDxI,QAAQC,IAAIwQ,EAASrB,cAAc5G,QAjBX,EAmB1B8G,SAnB0B,sBAmBf,kCAAA7P,EAAA,2DACiC,EAAKkI,MAAvCtD,EADC,EACDA,MAAOpB,EADN,EACMA,YAAa2B,EADnB,EACmBA,YACxBP,GAASpB,GAAe2B,GAFnB,gCAGD,EAAK8C,WAAWT,aAAa5C,EAAOpB,EAAa2B,GAHhD,OAIPgG,KAAQ2E,QAAQ,gJAJT,2CAjBT,EAAK5H,MAAQ,CACXtD,MAAO,GACPpB,YAAa,GACb2B,UAAW,IALW,E,qDA0BhB,IAAD,EACmClD,KAAKiG,MAAvC/C,EADD,EACCA,UAAWP,EADZ,EACYA,MAAOpB,EADnB,EACmBA,YAClBiM,EAA6ExN,KAA7EwN,iBAAkBG,EAA2D3N,KAA3D2N,wBAAyBmB,EAAkC9O,KAAlC8O,oBAAqBlB,EAAa5N,KAAb4N,SACxE,OACE,yBAAKjN,UAAU,QACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,6BACb,4BACE,8BAAUI,KAAK,WADjB,0DAIA,oOACA,4BAAQJ,UAAU,kBAAkB2H,QAASsF,GAC3C,8BAAU7M,KAAM,QADlB,sGAKF,yBAAKJ,UAAU,wBACb,kBAAC,GAAD,CAAeuN,eAAgBhL,EAAWiL,oBAAqBW,IAC/D,kBAAC,GAAD,CACE5B,UAAWvK,EACXyK,iBAAkBI,EAClBL,iBAAkB5L,EAClB8L,wBAAyBM,W,GAlDG7J,aCgB3BkL,I,OAtBK,SAAC9O,GACnB,OACE,oCACE,yBAAKS,UAAU,+BACb,uBAAGA,UAAU,+BAAb,oDACA,2BACEmG,MAAO5G,EAAMgN,UACbI,SAAUpN,EAAMkN,iBAChBzM,UAAU,iCAId,uBAAGA,UAAU,+BAAb,oDACA,2BACEmG,MAAO5G,EAAMiN,iBACbG,SAAUpN,EAAMmN,wBAChB1M,UAAU,mCCVZiJ,GAAmC,CACvCjH,MAAO,GACPpB,YAAa,GACb2B,UAAW,GACXC,WAAY,ICjBC8L,G,kDDqBb,WAAY/O,GAAe,IAAD,8BACxB,cAAMA,IAIRsN,iBAAmB,SAACC,GAClB,EAAKtH,SAAS,CAAExD,MAAO8K,EAAMC,cAAc5G,SANnB,EAS1B6G,wBAA0B,SAACF,GACzB,EAAKtH,SAAS,CAAE5E,YAAakM,EAAMC,cAAc5G,SAVzB,EAa1BgI,oBAAsB,SAACC,GACrB,EAAK5I,SAAS,CAAEjD,UAAW6L,EAASrB,cAAc5G,SAd1B,EAiB1BoI,qBAAuB,SAACH,GACtB,EAAK5I,SAAS,CAAEhD,WAAY4L,EAASrB,cAAc5G,SAlB3B,EAqB1Bd,WAAa,IAAIjC,EArBS,EAuB1B6J,SAvB0B,sBAuBf,oCAAA7P,EAAA,6DACTO,QAAQC,IAAI,0IACZD,QAAQC,IAAI,EAAK0H,OAFR,EAG6C,EAAKA,MAAnDtD,EAHC,EAGDA,MAAOpB,EAHN,EAGMA,YAAa2B,EAHnB,EAGmBA,UAAWC,EAH9B,EAG8BA,WAH9B,SAIC,EAAK6C,WAAWR,UAAU7C,EAAOpB,EAAa2B,EAAWC,GAJ1D,OAKL+F,KAAQ2E,QAAQ,wHALX,2CArBT,EAAK5H,MAAQ2D,GAFW,E,qDA8BhB,IAAD,EACqD5J,KAAKiG,MAAlDlF,EADR,EACC4B,MAAapB,EADd,EACcA,YAAa2B,EAD3B,EAC2BA,UAAWC,EADtC,EACsCA,WAC7C,OACE,yBAAKxC,UAAU,QACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,6BACb,4BACE,8BAAUI,KAAK,WADjB,wCAIA,uNACA,4BAAQJ,UAAU,kBAAkB2H,QAAStI,KAAK4N,UAChD,8BAAU7M,KAAM,QADlB,oFAKF,yBAAKJ,UAAU,wBACb,kBAAC,GAAD,CACEuN,eAAgBhL,EAChBiL,oBAAqBnO,KAAK8O,sBAE5B,kBAAC,GAAD,CACEZ,eAAgBhL,EAChBqL,gBAAiBpL,EACjBqL,qBAAsBxO,KAAKkP,uBAE7B,kBAAC,GAAD,CACEhC,UAAWnM,EACXoM,iBAAkB5L,EAClB6L,iBAAkBpN,KAAKwN,iBACvBH,wBAAyBrN,KAAK2N,iC,GA7DL7J,a,mBEwBxBqL,GAlCI,SAACjP,GAA6B,IACvCgN,EAA2ChN,EAA3CgN,UAAWC,EAAgCjN,EAAhCiN,iBAAkBiC,EAAclP,EAAdkP,UAC7BhC,EAAkFlN,EAAlFkN,iBAAkBC,EAAgEnN,EAAhEmN,wBAAyBgC,EAAuCnP,EAAvCmP,iBAAkBC,EAAqBpP,EAArBoP,iBACrE,OACE,oCACE,yBAAK3O,UAAU,+BACb,uBAAGA,UAAU,+BAAb,oDACA,2BACEmG,MAAOoG,EACPI,SAAUF,EACVzM,UAAU,iCAGd,yBAAKA,UAAU,+BACb,uBAAGA,UAAU,+BAAb,oDACA,2BACEmG,MAAOqG,EACPG,SAAUD,EACV1M,UAAU,iCAGd,kBAAC,KAAD,CAAY2M,SAAUgC,IACtB,yBAAK3O,UAAU,+BACb,uBAAGA,UAAU,+BAAb,uEACA,8BACEmG,MAAOsI,EACP9B,SAAU+B,EACV1O,UAAU,mC,oBClBd8L,I,OAAiC,CACrC9J,MAAO,GACPpB,YAAa,GACbmE,QAAS,GACT9C,YAAa,KACbM,UAAW,GACXC,WAAY,GACZC,QAAS,KC1BImM,G,kDD8Bb,WAAarP,GAAe,IAAD,8BACzB,cAAMA,IAIRsN,iBAAmB,SAACC,GAClB,EAAKtH,SAAS,CAAExD,MAAO8K,EAAMC,cAAc5G,SANlB,EAQ3B6G,wBAA0B,SAACF,GACzB,EAAKtH,SAAS,CAAE5E,YAAakM,EAAMC,cAAc5G,SATxB,EAW3B0I,iBAAmB,SAAC/B,GAClB,EAAKtH,SAAS,CAAET,QAAS+H,EAAMC,cAAc5G,SAZpB,EAe3B2I,wBAA0B,SAACvI,GACzB,EAAKf,SAAS,CAAEvD,YAAa8M,KAAOxI,GAAMyI,OAAO,OACjDrR,QAAQC,IAAImR,KAAOxI,GAAMyI,OAAO,OAjBP,EAmB3Bb,oBAAsB,SAACC,GACrB,EAAK5I,SAAS,CAAEjD,UAAW6L,EAASrB,cAAc5G,MAAO3D,WAAY,MApB5C,EAsB3B+L,qBAAuB,SAACH,GACtB,EAAK5I,SAAS,CAAEhD,WAAY4L,EAASrB,cAAc5G,SAvB1B,EAyB3B8I,kBAAoB,SAACb,GACnB,EAAK5I,SAAS,CAAE/C,QAAS2L,EAASrB,cAAc5G,SA1BvB,EA4B3Bd,WAAa,IAAI0F,GA5BU,EA6B3BkC,SA7B2B,sBA6BhB,0CAAA7P,EAAA,+DAC4E,EAAKkI,MAAlFtD,EADC,EACDA,MAAOpB,EADN,EACMA,YAAamE,EADnB,EACmBA,QAASxC,EAD5B,EAC4BA,UAAWC,EADvC,EACuCA,WAAYC,EADnD,EACmDA,QAASR,EAD5D,EAC4DA,YAD5D,SAEH,EAAKoD,WAAWP,SAAS,CAAE9C,QAAOpB,cAAamE,UAASxC,YAAWC,aAAYC,UAASR,gBAFrF,OAGTsG,KAAQ2E,QAAQ,8HAHP,2CA3BT,EAAK5H,MAAQwG,GAFY,E,qDAmChB,IAAD,EACgEzM,KAAKiG,MAArEtD,EADA,EACAA,MAAOpB,EADP,EACOA,YAAamE,EADpB,EACoBA,QAASxC,EAD7B,EAC6BA,UAAWC,EADxC,EACwCA,WAAYC,EADpD,EACoDA,QAC5D,OACE,yBAAKzC,UAAU,QACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,6BACb,4BACE,8BAAUI,KAAK,kBADjB,wCAIA,uNACA,4BAAQJ,UAAU,kBAAkB2H,QAAStI,KAAK4N,UAChD,8BAAU7M,KAAK,QADjB,oFAKF,yBAAKJ,UAAU,wBACb,kBAAC,GAAD,CACEuN,eAAgBhL,EAChBiL,oBAAqBnO,KAAK8O,sBAE5B,kBAAC,GAAD,CACEP,gBAAiBpL,EACjB+K,eAAgBhL,EAChBsL,qBAAsBxO,KAAKkP,uBAE7B,kBAAC,GAAD,CACEX,gBAAiBpL,EACjB+K,eAAgBhL,EAChBwL,aAActL,EACduL,kBAAmB3O,KAAK4P,oBAE1B,kBAAC,GAAD,CACE1C,UAAWvK,EACXwK,iBAAkB5L,EAClB6N,UAAW1J,EACX0H,iBAAkBpN,KAAKwN,iBACvBH,wBAAyBrN,KAAK2N,wBAC9B0B,iBAAkBrP,KAAKwP,iBACvBF,iBAAkBtP,KAAKyP,iC,GA3EC3L,aE7BvB+L,I,OCEG,WAChB,IAAMhK,EAAQC,cAEd,OACE,yBAAKnF,UAAU,QACb,kBAAC,IAAD,CAAMA,UAAU,aAAaD,GAAE,UAAKmF,EAAMjI,MAA1C,mFAGA,kBAAC,IAAD,CAAM+C,UAAU,aAAaD,GAAE,UAAKmF,EAAMjI,IAAX,cAA/B,qGAGA,kBAAC,IAAD,CAAM+C,UAAU,aAAaD,GAAE,UAAKmF,EAAMjI,IAAX,WAA/B,mFAGA,kBAAC,IAAD,CAAM+C,UAAU,aAAaD,GAAE,UAAKmF,EAAMjI,IAAX,UAA/B,sFCgBSkS,GAzBI,WACjB,IAAMjK,EAAQC,cAEd,OADAxH,QAAQC,IAAR,UAAesH,EAAMjI,IAArB,cAEE,oCACE,kBAAC,EAAD,CAAQ0D,KAAK,6CAAUD,KAAK,eAC5B,kBAAC,GAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOiF,OAAK,EAACC,KAAI,UAAKV,EAAMjI,MAC1B,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAO2I,KAAI,UAAKV,EAAMjI,IAAX,cACT,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAO2I,KAAI,UAAKV,EAAMjI,IAAX,WACT,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAO2I,KAAI,UAAKV,EAAMjI,IAAX,UACT,kBAAC,GAAD,UCSKmS,GA1BO,WACpB,OACE,yBAAKpP,UAAU,OACb,kBAAC,IAAD,CAAQqP,SAAS,QACf,kBAAC,EAAD,MACA,yBAAKrP,UAAU,WACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO4F,KAAK,IAAID,OAAK,GACnB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOC,KAAK,WACV,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,aACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,YACV,kBAAC,EAAD,YCrBd0J,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.d9b4452c.chunk.js","sourcesContent":["export enum Method {\r\n  Get = 'GET',\r\n  Post = 'POST',\r\n  Put = 'PUT',\r\n  Patch = 'PATCH',\r\n  Delete = 'DELETE'\r\n\r\n}","import { Method } from '../types/service-types';\r\nimport Cookies from 'js-cookie';\r\n\r\nexport interface IRequestService {\r\n  getRequest: <T>(url: string) => Promise<T>,\r\n  postRequest: <T>(url: string, data: T) => void\r\n  putRequest: <T>(url: string, data: T) => void\r\n  patchRequest: <T>(url: string, data: T) => void\r\n  deleteRequest: <T>(url: string) => void\r\n}\r\n\r\nexport default class RequestService implements IRequestService {\r\n\r\n  private readonly requestHeaders: HeadersInit = {\r\n    'Content-Type': 'application/json',\r\n    Authorization: `Bearer ${Cookies.get(\"jwt\")}`,\r\n  };\r\n\r\n  private Request = async <T> (url: string, method: Method, data?: T): Promise<Response> => {\r\n    const response = await fetch(`http://localhost:8080/api/user/${Cookies.get(\"userId\")}/${url}`, {\r\n      method,\r\n      headers: this.requestHeaders,\r\n      body: JSON.stringify(data),\r\n    });\r\n    console.log(\"========\", response)\r\n    if (!response.ok) throw new Error('Ошибка');\r\n\r\n    return response;\r\n  };\r\n\r\n  private Unauthorized = () => {\r\n    localStorage.removeItem('jwt');\r\n    window.location.href = 'login';\r\n  };\r\n\r\n  getRequest = async <T> (url: string): Promise<T> => {\r\n    return await this.Request(url, Method.Get).then(res => res.json());\r\n  };\r\n\r\n  postRequest = async <T> (url: string, data: T) => {\r\n    await this.Request<T>(url, Method.Post, data);\r\n  };\r\n\r\n  putRequest = async <T> (url: string, data: T) => {\r\n    await this.Request<T>(url, Method.Put, data);\r\n  };\r\n  patchRequest = async <T> (url: string, data: T) => {\r\n    await this.Request<T>(url, Method.Patch, data);\r\n  };\r\n  deleteRequest = async <T> (url: string) => {\r\n    await this.Request<T>(url, Method.Delete);\r\n  };\r\n}\r\n","import RequestService, { IRequestService } from './request';\r\nimport {IUser } from '../types/model-types';\r\n\r\nexport default class ApiUserService {\r\n  private readonly requestService: IRequestService;\r\n  constructor () {\r\n    this.requestService = new RequestService();\r\n  }\r\n\r\n getUser = async () =>{\r\n    return await this.requestService.getRequest<IUser>('')\r\n }\r\n}\r\n\r\ninterface IDeleteGroupInput {\r\n  projectId: string,\r\n  categoryId: string,\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { IUser } from \"../../types/model-types\";\r\nimport ApiUserService from \"../../services/api-user-service\";\r\ninterface NavigationUserProps {\r\n  userName: string;\r\n  id: string;\r\n  email: string;\r\n}\r\n\r\nconst NavigationUser = (props: NavigationUserProps) => {\r\n  const [user, setUser] = useState<IUser>()\r\n\r\n  useEffect(()=>{\r\n    const fetchData = async () => {\r\n      const Api = new ApiUserService();\r\n      const result = await Api.getUser();\r\n      console.log(result)\r\n      setUser(result)\r\n    };\r\n    fetchData();\r\n  },[])\r\n\r\n  return (\r\n    <Link to=\"/profile\">\r\n      <div className=\"menu__user\">\r\n        <div className=\"menu__user__name\">{user?.username}</div>\r\n        <div className=\"menu__user__email\">{user?.email}</div>\r\n      </div>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default NavigationUser;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst NavigationItems = () => {\r\n  return (\r\n    <>\r\n      <div className=\"menu__item\">\r\n        <Link to=\"/create\">\r\n          <ion-icon name=\"add-circle\"></ion-icon>Создать\r\n        </Link>\r\n      </div>\r\n      <div className=\"menu__item  \">\r\n        <Link to=\"/\">\r\n          <ion-icon name=\"document\"></ion-icon>Мои задачи\r\n        </Link>\r\n      </div>\r\n      <div className=\"menu__item\">\r\n        <Link to=\"/projects\">\r\n          <ion-icon name=\"folder\"></ion-icon>Проекты\r\n        </Link>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NavigationItems;\r\n","import Navigation from \"./navigation\";\r\n\r\nexport default Navigation;\r\n","import React from \"react\";\r\nimport \"./navigation.css\";\r\nimport NavigationUser from \"./navigation-user\";\r\nimport NavigationItems from \"./navigation-items\";\r\n\r\n//!Реализовать раскрывающиеся пункты, с подгрузкой данных с сервера.\r\nconst Navigation = () => {\r\n  return (\r\n    <nav className=\"menu\">\r\n      <NavigationUser id=\"gg\" userName=\"Иванов Иван\" email=\"ivanov-super-star@mail.ru\" />\r\n      <NavigationItems />\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","import Header from \"./header\";\r\n\r\nexport default Header;\r\n","import React, { Fragment } from \"react\";\r\n\r\nimport \"./header.css\";\r\n\r\nexport interface HeaderProps {\r\n  size?: \"middle\" | \"small\" | undefined;\r\n  icon: string | undefined;\r\n  text: string | undefined;\r\n  description?: string;\r\n}\r\n\r\nconst Header: React.FC<HeaderProps> = props => {\r\n  let size: string = \"\";\r\n  switch (props.size) {\r\n    case \"middle\":\r\n      size = \"middle\";\r\n      break;\r\n    case \"small\":\r\n      size = \"small\";\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return (\r\n    <Fragment>\r\n      <h1 className={`header ${size}`}>\r\n        <ion-icon name={props.icon} />\r\n        {props.text}\r\n      </h1>\r\n      <p className=\"header__description\">{props.description}</p>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default Header;\r\n","import RequestService, { IRequestService } from './request';\r\nimport { ITask } from '../types/model-types';\r\n\r\nexport default class DashboardService {\r\n  private readonly requestService: IRequestService;\r\n\r\n  constructor () {\r\n    this.requestService = new RequestService();\r\n  }\r\n\r\n  getAllTasks = async () => {\r\n    return await this.requestService.getRequest<any>('project/all');\r\n  }\r\n\r\n  getTodayTasks = async () => {\r\n    return await this.requestService.getRequest<ITask[]>('project/today')\r\n  }\r\n\r\n  getWeekTasks = async () => {\r\n    return await this.requestService.getRequest<ITask[]>('project/week')\r\n  }\r\n\r\n  getOutDateTasks = async () => {\r\n      return await this.requestService.getRequest<any>('project/outdate')\r\n  }\r\n\r\n  getStatistic = async ()=>{\r\n    return await this.requestService.getRequest<any>('project/')\r\n  }\r\n}","import Status from \"./status\";\r\n\r\nexport default Status;\r\n","import React from \"react\";\r\n\r\nimport \"./status.css\";\r\n\r\nexport type statusType =\r\n  | \"IN_PROGRESS\"\r\n  | \"COMPLETED\"\r\n  | undefined\r\n  | null\r\n\r\ninterface IStatusProps {\r\n  status: statusType;\r\n}\r\n\r\nconst Status = (props: IStatusProps) => {\r\n  const { status } = props;\r\n  let el = <span></span>;\r\n  switch (status) {\r\n    case \"IN_PROGRESS\":\r\n      el = (\r\n        <span className=\"status_available\">\r\n          <ion-icon name=\"ellipse\" />\r\n          Выполняется\r\n        </span>\r\n      );\r\n      break;\r\n    case \"COMPLETED\":\r\n      el = (\r\n        <span className=\"status_complated\">\r\n          <ion-icon name=\"checkmark\" />\r\n          Завершено\r\n        </span>\r\n      );\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return <div className=\"status\">{el}</div>;\r\n};\r\n\r\nexport default Status;\r\n","import TodayTasks from './today-tasks';\r\n\r\nexport default TodayTasks;","import React, { useEffect, useState } from 'react';\r\nimport DashboardService from '../../services/dashboard-service';\r\nimport { ITask } from '../../types/model-types';\r\nimport { List } from 'antd';\r\nimport Status from '../status';\r\n\r\nconst TodayTasks = () => {\r\n  const [tasks, setTasks] = useState<ITask[]>();\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const Api = new DashboardService();\r\n      const result = await Api.getTodayTasks();\r\n      setTasks(result);\r\n    };\r\n    fetchData();\r\n  }, []);\r\n  return <List\r\n    size=\"large\"\r\n    bordered\r\n    dataSource={tasks}\r\n    renderItem={item => <List.Item style={{position: \"relative\"}}><h2>{item.title}<Status status={item.status}/></h2> <p>{item.description}</p> <p>{item.expiredDate}</p>\r\n    </List.Item>}\r\n  />;\r\n};\r\n\r\nexport default TodayTasks;","import WeekTasks from './week-tasks';\r\n\r\nexport default WeekTasks;","import React, { useEffect, useState } from 'react';\r\nimport DashboardService from '../../services/dashboard-service';\r\nimport { List } from 'antd';\r\nimport { ITask } from '../../types/model-types';\r\nimport Status from '../status';\r\nimport { relative } from 'path';\r\n\r\nconst WeekTasks = () => {\r\n\r\n  const [tasks, setTasks] = useState<ITask[]>();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const Api = new DashboardService();\r\n      const result = await Api.getWeekTasks();\r\n      setTasks(result);\r\n    };\r\n    fetchData();\r\n  }, []);\r\n  return <List\r\n    size=\"large\"\r\n    bordered\r\n    dataSource={tasks}\r\n    renderItem={item => <List.Item style={{position: \"relative\"}}><h2>{item.title}<Status status={item.status}/></h2> <p>{item.description}</p> <p>{item.expiredDate}</p>\r\n    </List.Item>}\r\n  />\r\n};\r\n\r\nexport default WeekTasks;","import OutDateTasks from './outdate-tasks';\r\n\r\nexport default OutDateTasks;","import React, { useEffect, useState } from 'react';\r\nimport DashboardService from '../../services/dashboard-service';\r\nimport { List } from 'antd';\r\nimport { ITask } from '../../types/model-types';\r\nimport Status from '../status';\r\n\r\nconst OutDateTasks = () => {\r\n  const [tasks, setTasks] = useState<ITask[]>();\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const Api = new DashboardService();\r\n      const result = await Api.getOutDateTasks();\r\n      setTasks(result);\r\n    };\r\n    fetchData();\r\n  }, []);\r\n  return <List\r\n    size=\"large\"\r\n    bordered\r\n    dataSource={tasks}\r\n    renderItem={item => <List.Item style={{position: \"relative\"}}><h2>{item.title}<Status status={item.status}/></h2> <p>{item.description}</p> <p>{item.expiredDate}</p>\r\n    </List.Item>}\r\n  />\r\n};\r\n\r\nexport default OutDateTasks;","import RequestService, { IRequestService } from './request';\r\nimport { IParticipant, ITask } from '../types/model-types';\r\n\r\nexport default class ApiResponsibleService {\r\n  private readonly requestService: IRequestService;\r\n\r\n  constructor () {\r\n    this.requestService = new RequestService();\r\n  }\r\n\r\n  getResponsible = async () => {\r\n    return await this.requestService.getRequest<ITask[]>(`project/my`)\r\n  };\r\n\r\n  addResponsible = async ({projectId, categoryId, groupId, taskId, userId}:IResponsibleInput ) => {\r\n    const result = await this.requestService.putRequest<any>(\r\n      `project/${projectId}/category/${categoryId}/group/${groupId}/task/${taskId}/responsible?userId=${userId}`,\r\n      {},\r\n    );\r\n    return result;\r\n  };\r\n}\r\n\r\ninterface IResponsibleInput{\r\n    projectId: string,\r\n    categoryId: string,\r\n    groupId: string,\r\n    taskId: string,\r\n    userId: string\r\n}","import MyResponsibilityTasks from \"./my-responsibility-tasks\"\r\n\r\nexport default MyResponsibilityTasks;","import React, { useEffect, useState } from 'react';\r\nimport DashboardService from '../../services/dashboard-service';\r\nimport { List } from 'antd';\r\nimport { ITask } from '../../types/model-types';\r\nimport Status from '../status';\r\nimport ApiResponsibleService from '../../services/api-responsible-service';\r\n\r\nconst MyResponsibilityTasks = () => {\r\n  const [tasks, setTasks] = useState<ITask[]>();\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const Api = new ApiResponsibleService();\r\n      const result = await Api.getResponsible();\r\n      setTasks(result);\r\n    };\r\n    fetchData();\r\n  }, []);\r\n  return <List\r\n    size=\"large\"\r\n    bordered\r\n    dataSource={tasks}\r\n    renderItem={item => <List.Item style={{position: \"relative\"}}><h2>{item.title}<Status status={item.status}/></h2> <p>{item.description}</p> <p>{item.expiredDate}</p>\r\n    </List.Item>}\r\n  />\r\n};\r\n\r\nexport default MyResponsibilityTasks;","import Dashboard from './dashboard';\r\n\r\nexport default Dashboard;","import React from 'react';\r\nimport { Tabs } from 'antd';\r\nimport AllTasks from '../all-tasks';\r\nimport TodayTasks from '../today-tasks';\r\nimport WeekTasks from '../week-tasks';\r\nimport OutDateTasks from '../outdate-tasks';\r\nimport MyResponsibilityTasks from '../my-responsibility-tasks';\r\n\r\nconst Dashboard = ()=>{\r\n  return  <Tabs defaultActiveKey=\"1\">\r\n\r\n    <Tabs.TabPane tab=\"Задачи на сегодня\" key=\"1\">\r\n      <TodayTasks/>\r\n    </Tabs.TabPane>\r\n    <Tabs.TabPane tab=\" Задачи на неделю\" key=\"2\">\r\n      <WeekTasks/>\r\n    </Tabs.TabPane>\r\n    <Tabs.TabPane tab=\" Просроченные задачи\" key=\"3\">\r\n      <OutDateTasks/>\r\n    </Tabs.TabPane>\r\n    <Tabs.TabPane tab=\"Задачи под моей ответственностью\" key=\"4\">\r\n      <MyResponsibilityTasks/>\r\n    </Tabs.TabPane>\r\n  </Tabs>\r\n}\r\n\r\nexport default Dashboard","import React, { Component } from \"react\";\r\nimport Header from \"../header\";\r\nimport Dashboard from '../Dashboard';\r\n\r\nexport default class DashboardPage extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header text=\"Актуальные задачи\" icon=\"bar-chart\"></Header>\r\n        <Dashboard/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import axios from \"axios\";\r\nimport Cookies from \"js-cookie\";\r\nimport { IProject } from \"../components/projects/projects\";\r\nimport { IProjectMin } from \"../components/forms/form-select/select-project\";\r\nimport { ICategoryMin } from \"../components/forms/form-select/select-category\";\r\nimport { IGroupMin } from \"../components/forms/form-select/select-group\";\r\nimport { statusType } from \"../components/status/status\";\r\n\r\ninterface ICreator {\r\n  id: string;\r\n  email: string;\r\n}\r\nexport interface IProjectExtend {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  creator: ICreator;\r\n  categories: ICategory[];\r\n}\r\n\r\ninterface ICategory {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n}\r\n\r\nexport interface ICategoryExtend {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  groups: IGroup[];\r\n  project: IProject;\r\n}\r\n\r\ninterface IGroup {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n}\r\n\r\nexport interface IGroupExtend {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n\r\n  tasks: ITask[];\r\n}\r\n\r\ninterface ITask {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  status: statusType;\r\n}\r\n\r\nexport interface ITaskExtend {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  expiredDate: Date,\r\n  status: string,\r\n  createDate: Date,\r\n  content: {\r\n    text: string;\r\n  };\r\n  comments: IComment[];\r\n}\r\n\r\ninterface IComment {\r\n  id: string;\r\n  text: string;\r\n  author: ICreator;\r\n}\r\n\r\nexport default class ApiService {\r\n  private GetRequest = async (url: string) => {\r\n    return axios\r\n      .get(`http://127.0.0.1:8080/api/user/${Cookies.get(\"userId\")}/project${url}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${Cookies.get(\"jwt\")}`,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        return res.data;\r\n      })\r\n      .catch((e) => console.error(e + \"какая-то херня\"));\r\n  };\r\n  private PostRequest = async (url: string, data: object) => {\r\n    return axios.post(\r\n      `http://localhost:8080/api/user/${Cookies.get(\"userId\")}/project${url}`,\r\n      data,\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${Cookies.get(\"jwt\")}`,\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      },\r\n    );\r\n  };\r\n\r\n  //*Получение всех проектов пользователя\r\n  getAllProjects = async (): Promise<IProject[]> => {\r\n    const results: IProject[] = await this.GetRequest(``);\r\n    return results;\r\n  };\r\n\r\n  //*Получение данных преокта  и списка категорий по id проекта\r\n  getProject = async (projectId: string): Promise<IProjectExtend> => {\r\n    const result: IProjectExtend = await this.GetRequest(`/${projectId}`);\r\n    return result;\r\n  };\r\n\r\n  //*Получение данных категории и списка групп по id категории\r\n  getCategory = async (projectId: string, categoryId: string): Promise<ICategoryExtend> => {\r\n    const result: ICategoryExtend = await this.GetRequest(`/${projectId}/category/${categoryId}`);\r\n    return result;\r\n  };\r\n\r\n  //*Получение данных группы и списка задач по id группы\r\n  getGroup = async (\r\n    projectId: string,\r\n    categoryId: string,\r\n    groupId: string,\r\n  ): Promise<IGroupExtend> => {\r\n    const result: IGroupExtend = await this.GetRequest(\r\n      `/${projectId}/category/${categoryId}/group/${groupId}`,\r\n    );\r\n    return result;\r\n  };\r\n\r\n  //*Получение данных задачи и списка коментариев\r\n  getTask = async (\r\n    projectId: string,\r\n    categoryId: string,\r\n    groupId: string,\r\n    taskId: string,\r\n  ): Promise<ITaskExtend> => {\r\n    const result: ITaskExtend = await this.GetRequest(\r\n      `/${projectId}/category/${categoryId}/group/${groupId}/task/${taskId}`,\r\n    );\r\n    return result;\r\n  };\r\n\r\n  //*Получение массива всех проектов в виде [{id, title}]\r\n  getAllProjectsMin = async (): Promise<IProjectMin[]> => {\r\n    const fullProjects: IProject[] = await this.getAllProjects();\r\n    const result: IProjectMin[] = fullProjects.map((res) => {\r\n      return { id: res.id, title: res.title };\r\n    });\r\n    return result;\r\n  };\r\n\r\n  //*Получение массива всех категорий в виде [{id, title}]\r\n  getCategoriesMin = async (id: string): Promise<ICategoryMin[]> => {\r\n    const fullProject: IProjectExtend = await this.getProject(id);\r\n    const result: ICategoryMin[] = fullProject.categories;\r\n    return result;\r\n  };\r\n\r\n  //*Получение массива всех групп в виде [{id, title}]\r\n  getGroupMin = async (projectId: string, categoryId: string) => {\r\n    const fullCategory: ICategoryExtend = await this.getCategory(projectId, categoryId);\r\n    const result: IGroupMin[] = fullCategory.groups;\r\n    console.log(result);\r\n    return result;\r\n  };\r\n\r\n  //*Создание нового проекта\r\n  saveProject = async (title: string, description: string) => {\r\n    const result = await this.PostRequest(\"\", {\r\n      title,\r\n      description,\r\n    });\r\n    return result;\r\n  };\r\n\r\n  //*Создание новой категории\r\n  saveCategory = async (title: string, description: string, projectId: string) => {\r\n    const result = await this.PostRequest(`/${projectId}/category`, {\r\n      title,\r\n      description,\r\n    });\r\n    return result;\r\n  };\r\n\r\n  //*Создание новой группы\r\n  saveGroup = async (title: string, description: string, projectId: string, categoryId: string) => {\r\n    const result = await this.PostRequest(`/${projectId}/category/${categoryId}/group`, {\r\n      title,\r\n      description,\r\n    });\r\n    return result;\r\n  };\r\n\r\n  //*Создание новой задачи\r\n  saveTask = async (\r\n    title: string,\r\n    description: string,\r\n    content: string,\r\n    projectId: string,\r\n    categoryId: string,\r\n    groupId: string,\r\n  ) => {\r\n    const result = await this.PostRequest(\r\n      `/${projectId}/category/${categoryId}/group/${groupId}/task`,\r\n      {\r\n        title,\r\n        description,\r\n        content,\r\n        expiredDate: \"13.06.2020\"\r\n      },\r\n    );\r\n    return result;\r\n  };\r\n  getUser = async (id?: string) => {\r\n    return this._userMin;\r\n  };\r\n\r\n  _userMin = {\r\n    id: \"00\",\r\n    name: \"Иванов Иван\",\r\n    email: \"ivanov.ivan@mail.ey\",\r\n  };\r\n}\r\n","import Card from \"./card\";\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport \"./card.css\";\r\nimport { Link, useRouteMatch } from \"react-router-dom\";\r\nimport Status from \"../status\";\r\nimport { statusType } from \"../status/status\";\r\n\r\n//Добавить deadline\r\ninterface CardProps {\r\n  id: string | undefined;\r\n  title: string | undefined;\r\n  description: string | undefined;\r\n  status?: statusType;\r\n}\r\n\r\nconst Card: React.FC<CardProps> = props => {\r\n  const match = useRouteMatch();\r\n\r\n  const { title, description, id = \"\", status = null } = props;\r\n  return (\r\n    <Link to={`${match.url}/${id}`}>\r\n      <div className=\"card\">\r\n        <Status status={status} />\r\n\r\n        <h2 className=\"card__title\">{title}</h2>\r\n        <p className=\"card__description\">{description}</p>\r\n        <button className=\"card__button\">Подробнее</button>\r\n      </div>\r\n    </Link>\r\n  );\r\n};\r\nexport default Card;\r\n","import Projects from \"./projects\";\r\n\r\nexport default Projects;\r\n","import React, { Component } from \"react\";\r\nimport ApiService from \"../../services/api-service\";\r\nimport Card from \"../card\";\r\n\r\nexport interface IProject {\r\n  id: string;\r\n  title: string;\r\n  description: string | undefined;\r\n}\r\ninterface IProjectsState {\r\n  projects: IProject[];\r\n}\r\n\r\nexport default class Projects extends Component<{}, IProjectsState> {\r\n  constructor(props: {}) {\r\n    super(props);\r\n    this.state = {\r\n      projects: [\r\n        {\r\n          id: \"\",\r\n          title: \"\",\r\n          description: \"\",\r\n        },\r\n      ],\r\n    };\r\n  }\r\n  //Запрос на сервер\r\n  apiService = new ApiService();\r\n  componentDidMount() {\r\n    this.apiService.getAllProjects().then((res: IProject[]) => {\r\n      if (res) {\r\n        this.setState({ projects: res });\r\n      } else console.error(\"Ошибка\");\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { projects } = this.state;\r\n    if (projects.length === 0) {\r\n      return <p>gg</p>;\r\n    }\r\n    return (\r\n      <div className=\"flex-wrapper\">\r\n        {projects.map((el: IProject) => {\r\n          return <Card key={el.id} id={el.id} title={el.title} description={el.description} />;\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Header from \"../header\";\r\nimport { ProjectItemPage } from \".\";\r\n\r\nimport { Switch, Route } from \"react-router-dom\";\r\n\r\nimport Projects from \"../projects\";\r\n\r\nconst ProjectsPage = () => {\r\n  return (\r\n    <div>\r\n      <Switch>\r\n        <Route exact path={`/projects`}>\r\n          <Header text=\"Проекты\" icon=\"folder\"></Header>\r\n          <Projects />\r\n        </Route>\r\n        <Route path={`/projects/:projectId`}>\r\n          <ProjectItemPage />\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProjectsPage;\r\n","import React from \"react\";\r\nimport { Row, Col, Card, Statistic } from \"antd\";\r\n\r\ninterface IProfileStatisticsProps{\r\n    outdate: number,\r\n    total: number,\r\n    completed: number\r\n}\r\n\r\nconst ProfileStatisctics: React.FC<IProfileStatisticsProps>  = ({completed, outdate, total}) =>{\r\n    return <> <Row>\r\n    <Col span={12}>\r\n        <Card style={{margin: 10}}>\r\n            <Statistic title=\"Завершённые задачи\" value={completed} valueStyle={{ color: '#3f8600' }}/>\r\n        </Card>\r\n    </Col>\r\n    <Col span={12}>\r\n        <Card style={{margin: 10}}>\r\n            <Statistic title=\"Просроченные задачи\" value={outdate} valueStyle={{ color: '#cf1322'}} />\r\n        </Card>\r\n    </Col>\r\n    <Col span={24}>\r\n        <Card style={{margin: 10}}>\r\n            <Statistic title=\"Всего задач\" value={total} />\r\n        </Card>\r\n    </Col>\r\n</Row></>\r\n}\r\n\r\nexport default ProfileStatisctics","import React from \"react\";\r\nimport { Row, Col, Card, Statistic } from \"antd\";\r\n\r\ninterface IProfileStatisticsProps {\r\n    userName: string,\r\n    email: string,\r\n    date?: string\r\n}\r\n\r\nconst ProfileUser: React.FC<IProfileStatisticsProps> = ({ userName, email, date }) => {\r\n    return <>     <Card style={{ margin: 10 }}>\r\n        <h2>{userName}</h2>\r\n        <h2>{email}</h2>\r\n        <h3>Дата регистрации: {date}</h3>\r\n    </Card></>\r\n}\r\n\r\nexport default ProfileUser","import RequestService, { IRequestService } from './request';\r\nimport { IUser, IStatistics } from '../types/model-types';\r\n\r\nexport default class ApiProfileService {\r\n  private readonly requestService: IRequestService;\r\n  constructor () {\r\n    this.requestService = new RequestService();\r\n  }\r\n\r\n  getUser = async ()=>{\r\n    return await this.requestService.getRequest<IUser>('');\r\n  }\r\n  getStatistics = async () => {\r\n      return await this.requestService.getRequest<IStatistics>('project/statistic')\r\n  }\r\n\r\n\r\n}","import Profile from './profile'\r\n\r\nexport default Profile","import React, { useState, useEffect } from 'react'\r\nimport { Row, Col, Statistic, Card } from 'antd'\r\nimport ProfileStatisctics from './profile-statistics'\r\nimport ProfileUser from './profile-user'\r\nimport { IUser, IStatistics } from '../../types/model-types'\r\nimport ApiProfileService from '../../services/api-profile-service'\r\n\r\nconst Profile = () => {\r\n\r\n    const [user, setUser] = useState<IUser>()\r\n    const [statistics, setStatistics] = useState<IStatistics>()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const Api = new ApiProfileService();\r\n            const resUser = await Api.getUser();\r\n            setUser(resUser);\r\n        };\r\n        fetchData();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const Api = new ApiProfileService();\r\n            const resStatistics = await Api.getStatistics();\r\n            setStatistics(resStatistics);\r\n        };\r\n        fetchData();\r\n    }, [])\r\n    return <>\r\n        {user\r\n            ? <ProfileUser userName={user.username} email={user.email} date={user.registrationDate} />\r\n            : ''\r\n        }\r\n        {statistics\r\n            ? <ProfileStatisctics outdate={statistics.outdate} completed={statistics.completed} total={statistics.total} />\r\n            : ''\r\n        }\r\n\r\n    </>\r\n}\r\n\r\nexport default Profile","import React, { Component } from \"react\";\r\nimport Header from \"../header\";\r\nimport Modal from \"../modal\";\r\nimport ApiService from \"../../services/api-service\";\r\nimport Profile from \"../profile\";\r\n\r\nexport default class ProfilePage extends Component {\r\n  dd = new ApiService();\r\n  render() {\r\n    this.dd.getAllProjects();\r\n    return (\r\n      <div>\r\n        <Header text=\"Профиль\" icon=\"person\"></Header>\r\n        <Profile/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import RequestService, { IRequestService } from './request';\r\nimport { IParticipant } from '../types/model-types';\r\n\r\nexport default class ApiParticipantService {\r\n  private readonly requestService: IRequestService;\r\n\r\n  constructor () {\r\n    this.requestService = new RequestService();\r\n  }\r\n\r\n  getParticipant = async (projectId: string) => {\r\n    return await this.requestService.getRequest<IParticipant[]>(`project/${projectId}/participant`)\r\n  };\r\n\r\n  addParticipant = async (\r\n    email: string, projectId: string,\r\n  ) => {\r\n    const result = await this.requestService.postRequest<any>(\r\n      `project/${projectId}/participant/?email=${email}`,\r\n      {},\r\n    );\r\n    return result;\r\n  };\r\n}","import AddParticipant from './add-participant';\r\n\r\nexport default AddParticipant","import React, { useState } from 'react';\r\nimport { Button, Drawer, Form, Input } from 'antd';\r\nimport ApiParticipantService from '../../services/api-participant-service';\r\n\r\ninterface AddParticipantProps {\r\n  projectId: string\r\n}\r\n\r\nconst AddParticipant:React.FC<AddParticipantProps> = ({projectId}) => {\r\n  const [visible, setVisible] = useState(false);\r\n  const showDrawer = () => {\r\n    setVisible(true);\r\n  };\r\n  const onClose = () => {\r\n    setVisible(false);\r\n  };\r\n  const onFinish = async (values:any) => {\r\n    console.log('Success:', values);\r\n    const apiService =  new ApiParticipantService();\r\n    await apiService.addParticipant(values.email, projectId);\r\n    window.location.reload();\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo:any) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n  return <>\r\n    <button className={\"button\"}  onClick={showDrawer}>\r\n      Добавить участника в проект\r\n    </button>\r\n    <Drawer\r\n      title=\"Добавление участника\"\r\n      placement=\"right\"\r\n      closable={false}\r\n      onClose={onClose}\r\n      visible={visible}\r\n    >\r\n      <Form\r\n        name=\"basic\"\r\n        layout={\"vertical\"}\r\n        initialValues={{ remember: true }}\r\n        onFinish={onFinish}\r\n        onFinishFailed={onFinishFailed}\r\n      >\r\n        <Form.Item\r\n          label=\"Email\"\r\n          name=\"email\"\r\n          rules={[{ required: true, message: 'Введите email участника проекта' }]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item >\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            Добавить участника\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </Drawer>\r\n  </>;\r\n};\r\n\r\nexport default AddParticipant;","import ParticipantList from './participant-list';\r\n\r\nexport default ParticipantList;","import React, { useEffect, useState } from 'react';\r\nimport { Drawer, List } from 'antd';\r\nimport { IParticipant } from '../../types/model-types';\r\nimport ApiParticipantService from '../../services/api-participant-service';\r\n\r\ninterface ParticipantListProps {\r\n  projectId: string\r\n}\r\n\r\nconst ParticipantList: React.FC<ParticipantListProps> = ({ projectId }) => {\r\n  const [visible, setVisible] = useState(false);\r\n  const [participants, setParticipants] = useState<IParticipant[]>();\r\n  const showDrawer = () => {\r\n    setVisible(true);\r\n  };\r\n  const onClose = () => {\r\n    setVisible(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const Api = new ApiParticipantService();\r\n      const result = await Api.getParticipant(projectId);\r\n      setParticipants(result);\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  return <>\r\n    <button className={'button'} onClick={showDrawer}>\r\n      Показать всех участников проекта\r\n    </button>\r\n    <Drawer\r\n      title=\"Список участников\"\r\n      placement=\"right\"\r\n      width={\"600\"}\r\n      closable={false}\r\n      onClose={onClose}\r\n      visible={visible}\r\n    >\r\n      <List\r\n        size=\"large\"\r\n        bordered\r\n        dataSource={participants}\r\n        renderItem={item => <List.Item><h2>{item.username}</h2> <p>{item.email}</p> <p>{item.role}</p></List.Item>}>\r\n      </List>\r\n    </Drawer>\r\n  </>;\r\n};\r\n\r\nexport default ParticipantList;","import RequestService, { IRequestService } from './request';\r\n\r\nexport default class ApiProjectService {\r\n  private readonly requestService: IRequestService;\r\n  constructor () {\r\n    this.requestService = new RequestService();\r\n  }\r\n\r\n deleteProject = async (\r\n    {  projectId,}: IDeleteProjectInput\r\n  ) => {\r\n    const result = await this.requestService.deleteRequest<any>(\r\n      `project/${projectId}`\r\n     \r\n    );\r\n    return result;\r\n  };\r\n}\r\n\r\ninterface IDeleteProjectInput {\r\n  projectId: string\r\n}","import React, { Component } from \"react\";\r\nimport ApiService, { IProjectExtend } from \"../../services/api-service\";\r\nimport Card from \"../card\";\r\nimport Header from \"../header\";\r\nimport AddParticipant from '../add-participant';\r\nimport ParticipantList from '../participant-list';\r\nimport { Button } from \"antd\";\r\nimport ApiProjectService from \"../../services/api-project-service\";\r\n\r\ninterface IProjectProps {\r\n  projectId: string | undefined;\r\n}\r\n\r\nconst initialState: IProjectExtend = {\r\n  id: \"\",\r\n  title: \"\",\r\n  description: \"\",\r\n  creator: {\r\n    id: \"\",\r\n    email: \"\",\r\n  },\r\n  categories: [\r\n    {\r\n      id: \"\",\r\n      description: \"\",\r\n      title: \"Загрузка данных\",\r\n    },\r\n  ],\r\n};\r\n\r\nexport default class Project extends Component<IProjectProps, IProjectExtend> {\r\n  constructor(props: IProjectProps) {\r\n    super(props);\r\n    this.state = initialState;\r\n  }\r\n  //Запрос на сервер\r\n  apiService = new ApiService();\r\n  componentDidMount() {\r\n    if (this.props.projectId) {\r\n      this.apiService.getProject(this.props.projectId).then((res: IProjectExtend) => {\r\n        this.setState(res);\r\n      });\r\n    }\r\n  }\r\n  deleteProject = async () => {\r\n    const { projectId } = this.props;\r\n    if (projectId) {\r\n      const api = new ApiProjectService();\r\n      await api.deleteProject({ projectId })\r\n      window.history.back();\r\n    }\r\n  }\r\n  render() {\r\n    const { title, description, categories: category } = this.state;\r\n    return (\r\n      <div>\r\n        <Header text={title} icon=\"folder\" description={description} />\r\n        {this.props.projectId ? <><ParticipantList projectId={this.props.projectId} /><AddParticipant projectId={this.props.projectId} /></> : ''}\r\n        <Button danger onClick={this.deleteProject}>Удалить проект</Button>\r\n        <div className=\"flex-wrapper\">\r\n          {category.map((el, index) => {\r\n            return <Card key={index} id={el.id} title={el.title} description={el.description} />;\r\n          })}\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import Project from \"./project\";\r\n\r\nexport default Project;\r\n","import RequestService, { IRequestService } from './request';\r\nimport { IParticipant, ICategory } from '../types/model-types';\r\nimport task from '../components/task/task';\r\n\r\nexport default class ApiCategoryService {\r\n  private readonly requestService: IRequestService;\r\n  constructor () {\r\n    this.requestService = new RequestService();\r\n  }\r\n\r\ngetCategory =async (projectId: string, categoryId: string) => {\r\n    return await this.requestService.getRequest<ICategory>(`project/${projectId}/category/${categoryId}`);\r\n}\r\n\r\n deleteCategory = async (\r\n    {  projectId,categoryId}: IDeleteGroupInput\r\n  ) => {\r\n    const result = await this.requestService.deleteRequest<any>(\r\n      `project/${projectId}/category/${categoryId}`\r\n     \r\n    );\r\n    return result;\r\n  };\r\n}\r\n\r\ninterface IDeleteGroupInput {\r\n  projectId: string,\r\n  categoryId: string,\r\n}","import React, { Component } from \"react\";\r\nimport ApiService, { ICategoryExtend } from \"../../services/api-service\";\r\nimport Card from \"../card\";\r\nimport Header from \"../header\";\r\nimport { Button } from \"antd\";\r\nimport ApiCategoryService from \"../../services/api-category-service\";\r\nimport { ICategory } from \"../../types/model-types\";\r\n\r\ninterface ICategoryProps {\r\n  categoryId: string | undefined;\r\n  projectId: string | undefined;\r\n}\r\n\r\nconst initialState: ICategory = {\r\n  id: 0,\r\n  title: \"\",\r\n  description: \"\",\r\n  groups: [\r\n    {\r\n      id: 0,\r\n      title: \"\",\r\n      description: \"\",\r\n    },\r\n  ],\r\n \r\n};\r\n\r\nexport default class Category extends Component<ICategoryProps, ICategory> {\r\n  constructor(props: ICategoryProps) {\r\n    super(props);\r\n    this.state = initialState;\r\n  }\r\n  //Запрос на сервер\r\n  apiService = new ApiCategoryService();\r\n  componentDidMount() {\r\n    if (this.props.categoryId && this.props.projectId) {\r\n      this.apiService\r\n        .getCategory(this.props.projectId, this.props.categoryId)\r\n        .then((res: ICategory) => {\r\n          this.setState(res);\r\n        });\r\n    } else console.error(\"Ошибка, нет идентификатора категории или проекта\");\r\n  }\r\n  //Создание массива карточек групп\r\n  renderItems() {\r\n    return this.state.groups.map((el, index) => {\r\n      return (\r\n        <Card\r\n          key={index}\r\n          id={el.id.toString()}\r\n          status = {null}\r\n          title={el.title}\r\n          description={el.description}\r\n        />\r\n      );\r\n    });\r\n  }\r\n\r\n\r\n  deleteCategory = async () =>{\r\n    const{projectId, categoryId} = this.props;\r\n    if(projectId && categoryId){\r\n      const api = new ApiCategoryService();\r\n      await api.deleteCategory({projectId, categoryId})\r\n      window.history.back();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const items = this.renderItems();\r\n    const { title, description } = this.state;\r\n    return (\r\n      <div>\r\n        <Header text={title} icon=\"shapes\" description={description} />\r\n        <Button danger onClick={this.deleteCategory}>Удалить категорию</Button>\r\n        <div className=\"flex-wrapper\">{items}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import Category from \"./category\";\r\n\r\nexport default Category;\r\n","import RequestService, { IRequestService } from './request';\r\nimport { IParticipant } from '../types/model-types';\r\nimport task from '../components/task/task';\r\n\r\nexport default class ApiGroupService {\r\n  private readonly requestService: IRequestService;\r\n  constructor () {\r\n    this.requestService = new RequestService();\r\n  }\r\n\r\n deleteGroup = async (\r\n    {  projectId,categoryId, groupId}: IDeleteGroupInput\r\n  ) => {\r\n    const result = await this.requestService.deleteRequest<any>(\r\n      `project/${projectId}/category/${categoryId}/group/${groupId}`\r\n     \r\n    );\r\n    return result;\r\n  };\r\n}\r\n\r\ninterface IDeleteGroupInput {\r\n  projectId: string,\r\n  categoryId: string,\r\n  groupId: string,\r\n}","import React, { Component } from \"react\";\r\nimport ApiService, { IGroupExtend } from \"../../services/api-service\";\r\nimport Card from \"../card\";\r\nimport Header from \"../header\";\r\nimport { Button } from \"antd\";\r\nimport ApiGroupService from \"../../services/api-group-service\";\r\ninterface IGroupProps {\r\n  groupId: string | undefined;\r\n  categoryId: string | undefined;\r\n  projectId: string | undefined;\r\n}\r\n\r\nconst initialState: IGroupExtend = {\r\n  id: \"\",\r\n  title: \"\",\r\n  description: \"\",\r\n  tasks: [\r\n    {\r\n      id: \"\",\r\n      title: \"\",\r\n      description: \"\",\r\n      status: \"IN_PROGRESS\"\r\n    },\r\n  ],\r\n};\r\n\r\nexport default class Group extends Component<IGroupProps, IGroupExtend> {\r\n  constructor(props: IGroupProps) {\r\n    super(props);\r\n    this.state = initialState;\r\n  }\r\n\r\n  apiService = new ApiService();\r\n  componentDidMount() {\r\n    const { projectId, categoryId, groupId } = this.props;\r\n    if (groupId && categoryId && projectId) {\r\n      this.apiService.getGroup(projectId, categoryId, groupId).then((res: IGroupExtend) => {\r\n        this.setState(res);\r\n      });\r\n    }\r\n  }\r\n\r\n  renderItems() {\r\n    if (this.state.tasks) {\r\n      return this.state.tasks.map((el, index) => {\r\n        return (\r\n          <Card\r\n            key={el.id}\r\n            id={el.id}\r\n            title={el.title}\r\n            description={el.description}\r\n            status={el.status}\r\n          />\r\n        );\r\n      });\r\n    }\r\n  }\r\n\r\n  deleteGroup = async () => {\r\n    const { projectId, categoryId, groupId } = this.props;\r\n    console.log(this.props)\r\n    if (projectId && categoryId && groupId) {\r\n      const api = new ApiGroupService();\r\n      await api.deleteGroup({ projectId, categoryId, groupId })\r\n      window.history.back();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const items = this.renderItems();\r\n\r\n    return (\r\n      <div>\r\n        <Header text={this.state.title} icon=\"albums\" description={this.state.description} />\r\n        <Button danger onClick={this.deleteGroup}>Удалить группу</Button>\r\n        <div className=\"flex-wrapper\">{items}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import Group from \"./group\";\r\n\r\nexport default Group;\r\n","import Comment from \"./comment\";\r\n\r\nexport default Comment;\r\n","import React from \"react\";\r\n\r\nimport \"./comment.css\";\r\n\r\nexport type comment = {\r\n  text?: string;\r\n  author?: {\r\n    email?: string;\r\n    id?: string;\r\n  };\r\n  link?: {\r\n    url?: string;\r\n    text?: string;\r\n  };\r\n};\r\n\r\ninterface ICommentProps {\r\n  taskId?: string;\r\n  comments?: comment[];\r\n}\r\n\r\nconst Comment = (props: ICommentProps) => {\r\n  let commentsList = [<p>Ни один комментарий ещё не добавленн</p>];\r\n  if (props.comments) {\r\n    commentsList = props.comments.map((comment, index) => {\r\n      return (\r\n        <div key={index} className=\"comment\">\r\n          <div>\r\n            <ion-icon name=\"person\" />\r\n            {comment.author?.email}\r\n          </div>\r\n          {comment.text}\r\n          <a className=\"comment__link\" href={comment.link?.url}>\r\n            {comment.link?.text}\r\n          </a>\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <div className=\"wrap\">\r\n      <h2>Комментарии</h2>\r\n      {commentsList}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Comment;\r\n","import React from \"react\";\r\nimport Status from \"../status\";\r\nimport { statusType } from \"../status/status\";\r\nimport { Button } from 'antd';\r\nimport ApiTaskService from '../../services/api-task-service';\r\n\r\ninterface ITaskCard {\r\n  title: string;\r\n  description: string | undefined;\r\n  text: string;\r\n  status: statusType;\r\n  handleClick: () => void;\r\n  deleteTask: () => void;\r\n}\r\n\r\nconst TaskCard = (props: ITaskCard) => {\r\n  let btn = <></>;\r\n\r\n  switch (props.status) {\r\n    case \"IN_PROGRESS\":\r\n      btn = (\r\n        <Button onClick={props.handleClick} >\r\n          Завершить задачу\r\n        </Button>\r\n      );\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return (\r\n    <div className=\"task\">\r\n      <Status status={props.status} />\r\n      <h1 className=\"task__title\">{props.title}</h1>\r\n      <p className=\"task__description\">{props.description}</p>\r\n      <div className=\"task__text\">{props.text}</div>\r\n      <div style={{marginTop:10}}>\r\n        {btn}\r\n        <Button danger onClick={props.deleteTask} style={{marginLeft: 20}}>Удалить задачу</Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskCard;\r\n","import RequestService, { IRequestService } from './request';\r\nimport { ITaskFull, ITask, ITaskCreate } from '../types/model-types';\r\n\r\nexport default class ApiTaskService {\r\n  private readonly requestService: IRequestService;\r\n\r\n  constructor () {\r\n    this.requestService = new RequestService();\r\n  }\r\n\r\n  getTask = async({projectId, categoryId, groupId, taskId}:ITaskInput) =>{\r\n    return await this.requestService.getRequest(`project/${projectId}/category/${categoryId}/group/${groupId}/task/${taskId}`)\r\n  }\r\n\r\n  saveTask = async (\r\n    { title, description, content, expiredDate, projectId, categoryId ,groupId} :ITaskCreateInput\r\n  ) => {\r\n    return this.requestService.postRequest<ITaskCreate>(\r\n      `project/${projectId}/category/${categoryId}/group/${groupId}/task`,\r\n      {\r\n        title,\r\n        description,\r\n        content,\r\n        expiredDate\r\n      },\r\n    );\r\n  };\r\n  deleteTask = async ({projectId, categoryId, groupId, taskId}:ITaskInput) =>{\r\n    await this.requestService.deleteRequest(`project/${projectId}/category/${categoryId}/group/${groupId}/task/${taskId}`)\r\n  }\r\n\r\n  updateStatus = async({projectId, categoryId, groupId, taskId}:ITaskInput) =>{\r\n    await this.requestService.putRequest<any>(`project/${projectId}/category/${categoryId}/group/${groupId}/task/${taskId}/status?status=COMPLETED`, {})\r\n  }\r\n}\r\n\r\n\r\ninterface ITaskCreateInput {\r\n  title: string,\r\n  description: string,\r\n  content: string,\r\n  projectId: string,\r\n  categoryId: string,\r\n  groupId: string,\r\n  expiredDate: string | null\r\n}\r\n\r\ninterface ITaskInput {\r\n  projectId: string,\r\n  categoryId: string,\r\n  groupId: string,\r\n  taskId: string\r\n}","import RequestService, { IRequestService } from './request';\r\nimport { IParticipant } from '../types/model-types';\r\nimport task from '../components/task/task';\r\n\r\nexport default class ApiCommentService {\r\n  private readonly requestService: IRequestService;\r\n\r\n  constructor () {\r\n    this.requestService = new RequestService();\r\n  }\r\n\r\n  getParticipant = async (projectId: string) => {\r\n    return await this.requestService.getRequest<IParticipant[]>(`project/${projectId}/participant`)\r\n  };\r\n\r\n  createComment = async (\r\n    { text, projectId,categoryId, groupId, taskId }: ICreateCommentInput\r\n  ) => {\r\n    const result = await this.requestService.postRequest<any>(\r\n      `project/${projectId}/category/${categoryId}/group/${groupId}/task/${taskId}/comment`,\r\n      {\r\n        text\r\n      },\r\n    );\r\n    return result;\r\n  };\r\n}\r\n\r\ninterface ICreateCommentInput {\r\n  text: string,\r\n  projectId: string,\r\n  categoryId: string,\r\n  groupId: string,\r\n  taskId: string\r\n}","import CommentCreate from './comment-create';\r\n\r\nexport default CommentCreate;","import React from 'react';\r\nimport { Button, Form, Input } from 'antd';\r\nimport ApiCommentService from '../../services/api-comment-service';\r\n\r\ninterface ICommentCreateProps {\r\n  projectId: string,\r\n  categoryId: string,\r\n  groupId: string,\r\n  taskId: string\r\n}\r\n\r\nconst CommentCreate: React.FC<ICommentCreateProps> = ({projectId, categoryId, groupId, taskId}) => {\r\n  const onFinish = async (values: any) => {\r\n    console.log('Success:', values);\r\n    const api = new ApiCommentService();\r\n    await api.createComment({ text: values.text, projectId, categoryId, groupId, taskId })\r\n    window.location.reload();\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo: any) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n\r\n  return (\r\n    <Form\r\n      name=\"basic\"\r\n      onFinish={onFinish}\r\n      onFinishFailed={onFinishFailed}\r\n    >\r\n\r\n      <Form.Item\r\n        name=\"text\"\r\n        rules={[{ required: true, message: 'Введите текст комментария' }]}\r\n      >\r\n        <Input/>\r\n      </Form.Item>\r\n      <Form.Item>\r\n        <Button type=\"primary\" htmlType=\"submit\">\r\n          Отправить\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default CommentCreate;","import React, { useState, useEffect } from \"react\"\r\nimport { List } from \"antd\";\r\nimport { IUser, IParticipant } from \"../../types/model-types\";\r\nimport ApiResponsibleService from \"../../services/api-responsible-service\";\r\nimport ApiParticipantService from \"../../services/api-participant-service\";\r\n\r\ninterface IUserListProps{\r\n    projectId: string\r\n    selectUser: (id: string) => void\r\n}\r\n\r\nconst UserList: React.FC<IUserListProps> = ({projectId,selectUser}) =>{\r\n\r\n    const select = (i:number | string)=>{\r\n        selectUser(i.toString())\r\n    }\r\n    const [users, setUsers] = useState<IParticipant[]>();\r\n    useEffect(()=>{\r\n        const fetchData = async () => {\r\n          const Api = new ApiParticipantService();\r\n          const result = await Api.getParticipant(projectId);\r\n          console.log(result)\r\n          setUsers(result)\r\n        };\r\n        fetchData();\r\n      },[])\r\n    return <>\r\n    <List\r\n    size=\"large\"\r\n    bordered\r\n    dataSource={users}\r\n    renderItem={item => <List.Item onClick={select.bind(null, item.id)}><h3>{item.username}</h3> <p>{item.email}</p></List.Item>}\r\n  /></>\r\n}\r\n\r\nexport default UserList;","import AddResponsible from './add-responsible'\r\n\r\nexport default AddResponsible;","import React, { useState } from 'react'\r\nimport ApiResponsibleService from '../../services/api-responsible-service'\r\nimport { Button, Drawer } from 'antd';\r\nimport UserList from './user-list';\r\nimport Cookies from 'js-cookie';\r\n\r\ninterface IAddResponsibleProps {\r\n    projectId: string,\r\n    categoryId: string,\r\n    groupId: string,\r\n    taskId: string,\r\n\r\n}\r\n\r\nconst AddResponsible: React.FC<IAddResponsibleProps> = ({ projectId, categoryId, groupId, taskId }) => {\r\n\r\n\r\n    const [userId, setUserId] = useState<string>()\r\n\r\n    const add = async () => {\r\n        if (userId) {\r\n            const api = new ApiResponsibleService();\r\n            api.addResponsible({ projectId, categoryId, groupId, taskId, userId: userId })\r\n        }\r\n    }\r\n    const [visible, setVisible] = useState(false);\r\n    const showDrawer = () => {\r\n        setVisible(true);\r\n    };\r\n    const onClose = () => {\r\n        setVisible(false);\r\n    };\r\n    const SelectUser = (i: string) => {\r\n        setUserId(i)\r\n    }\r\n    return <>\r\n        <Button type=\"primary\" onClick={showDrawer}>\r\n            Назначение ответственного\r\n      </Button>\r\n        <Drawer\r\n            title=\"Назначение ответственног\"\r\n            placement=\"right\"\r\n            width=\"600px\"\r\n            closable={false}\r\n            onClose={onClose}\r\n            visible={visible}\r\n        >\r\n            <UserList projectId={projectId} selectUser={SelectUser} />\r\n            <h2>Идентификатор выбранного пользователя: {userId}</h2>\r\n            <Button onClick={add}>Назначить ответственным</Button>\r\n        </Drawer>\r\n\r\n    </>\r\n}\r\n\r\nexport default AddResponsible;","import React, { Component } from 'react';\r\nimport './task.css';\r\nimport ApiService from '../../services/api-service';\r\nimport { statusType } from '../status/status';\r\nimport Comment from '../comment';\r\nimport { comment } from '../comment/comment';\r\nimport TaskCard from './task-card';\r\nimport ApiTaskService from '../../services/api-task-service';\r\nimport CommentCreate from '../comment-create';\r\nimport { Button } from 'antd';\r\nimport AddResponsible from '../add-responsible';\r\n\r\ninterface ITaskProps {\r\n  taskId: string | undefined;\r\n  projectId: string | undefined;\r\n  categoryId: string | undefined;\r\n  groupId: string | undefined;\r\n}\r\n\r\ninterface ITaskState {\r\n  id: string;\r\n  title: string;\r\n  description?: string;\r\n  text: string;\r\n  status: statusType;\r\n  creator?: string;\r\n  deadline?: Date;\r\n  comments?: comment[];\r\n}\r\n\r\nconst initionalState: ITaskState = {\r\n  id: '',\r\n  title: '',\r\n  description: '',\r\n  text: '',\r\n  status: 'IN_PROGRESS',\r\n  comments: [\r\n    {\r\n      text: '',\r\n      author: {\r\n        email: '',\r\n        id: '',\r\n      },\r\n      link: {\r\n        url: '',\r\n        text: '',\r\n      },\r\n    },\r\n  ],\r\n};\r\n\r\nexport default class Task extends Component<ITaskProps, ITaskState> {\r\n  constructor(props: ITaskProps) {\r\n    super(props);\r\n    this.state = initionalState;\r\n  }\r\n\r\n  apiService = new ApiTaskService();\r\n\r\n  componentDidMount() {\r\n    const { projectId, categoryId, groupId, taskId } = this.props;\r\n    if (projectId && categoryId && groupId && taskId) {\r\n      this.apiService.getTask({ projectId, categoryId, groupId, taskId }).then((res: any) => {\r\n        this.setState({\r\n          title: res.title,\r\n          description: res.description,\r\n          text: res.content.text,\r\n          status: res.status,\r\n          comments: res.comments,\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  handleClick = () => {\r\n    window.alert('Вы начали выполнение задачи');\r\n    const { projectId, categoryId, groupId, taskId } = this.props;\r\n    if (projectId && categoryId && groupId && taskId) {\r\n      this.apiService.updateStatus({ projectId, categoryId, groupId, taskId }).then(() => {\r\n        window.location.reload();\r\n      })\r\n    }\r\n  };\r\n\r\n  deleteTask = async () => {\r\n    const { projectId, categoryId, groupId, taskId } = this.props;\r\n    if (projectId && categoryId && groupId && taskId) {\r\n      const api = new ApiTaskService();\r\n      await api.deleteTask({ projectId, categoryId, groupId, taskId });\r\n      window.history.back();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    console.log(this.state);\r\n    const { title, description, text } = this.state;\r\n    const { projectId, categoryId, groupId, taskId } = this.props;\r\n    return (\r\n      <div>\r\n        <TaskCard\r\n          title={title}\r\n          text={text}\r\n          description={description}\r\n          status={this.state.status}\r\n          handleClick={this.handleClick}\r\n          deleteTask={this.deleteTask}\r\n        />\r\n        \r\n        <div style={{ margin: 50 }}>\r\n          \r\n          {projectId && categoryId && groupId && taskId\r\n            ? <>\r\n            <AddResponsible projectId={projectId} categoryId={categoryId}\r\n              groupId={groupId} taskId={taskId}/>\r\n              <h2 style={{marginTop:40}}>Написать комментаий</h2>\r\n            <CommentCreate projectId={projectId} categoryId={categoryId}\r\n              groupId={groupId} taskId={taskId} /></>\r\n            : ''\r\n          }\r\n        </div>\r\n        <Comment taskId={this.props.taskId} comments={this.state.comments} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import Task from \"./task\";\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Task from \"../task\";\r\ninterface IGroupPageProps {\r\n  projectId: string | undefined;\r\n  categoryId: string | undefined;\r\n  groupId: string | undefined;\r\n}\r\nconst TaskPage = (props: IGroupPageProps) => {\r\n  //const match = useRouteMatch();\r\n  const { taskId } = useParams();\r\n\r\n  return (\r\n    <>\r\n      <Task taskId={taskId} {...props} />\r\n    </>\r\n  );\r\n};\r\nexport default TaskPage;\r\n","import React from \"react\";\r\nimport { useRouteMatch, Switch, Route, useParams } from \"react-router-dom\";\r\nimport Group from \"../group\";\r\nimport TaskPage from \"./task-page\";\r\ninterface IGroupPageProps {\r\n  projectId: string | undefined;\r\n  categoryId: string | undefined;\r\n}\r\nconst GroupPage = ({ projectId, categoryId }: IGroupPageProps) => {\r\n  const match = useRouteMatch();\r\n  const { groupId } = useParams();\r\n  return (\r\n    <div>\r\n      <Switch>\r\n        <Route exact path={match.url}>\r\n          <Group projectId={projectId} categoryId={categoryId} groupId={groupId} />\r\n        </Route>\r\n        <Route path={`${match.url}/:taskId`}>\r\n          <TaskPage projectId={projectId} categoryId={categoryId} groupId={groupId} />\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  );\r\n};\r\nexport default GroupPage;\r\n","import React from \"react\";\r\nimport { Switch, Route, useRouteMatch, useParams } from \"react-router-dom\";\r\nimport Category from \"../category\";\r\nimport GroupPage from \"./group-page\";\r\n\r\ninterface ICategoryPageProps {\r\n  projectId: string | undefined;\r\n}\r\n\r\nconst CategoryPage = ({ projectId }: ICategoryPageProps) => {\r\n  const match = useRouteMatch();\r\n  const { categoryId } = useParams();\r\n\r\n  return (\r\n    <div>\r\n      <Switch>\r\n        <Route exact path={match.url}>\r\n          <Category projectId={projectId} categoryId={categoryId} />\r\n        </Route>\r\n        <Route path={`${match.url}/:groupId`}>\r\n          <GroupPage projectId={projectId} categoryId={categoryId} />\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CategoryPage;\r\n","import React from \"react\";\r\nimport { Switch, Route, useRouteMatch, useParams } from \"react-router-dom\";\r\nimport Project from \"../project\";\r\nimport CategoryPage from \"./category-page\";\r\n\r\nconst ProjectPage = () => {\r\n  const match = useRouteMatch();\r\n  const { projectId } = useParams();\r\n  return (\r\n    <Switch>\r\n      <Route exact path={match.url}>\r\n        <Project projectId={projectId} />\r\n      </Route>\r\n      <Route path={`${match.url}/:categoryId`}>\r\n        <CategoryPage projectId={projectId} />\r\n      </Route>\r\n    </Switch>\r\n  );\r\n};\r\nexport default ProjectPage;\r\n","import React from \"react\";\r\n\r\ninterface IInputsProjectProps {\r\n  nameValue: string;\r\n  HandleChangeName: (event: React.FormEvent<HTMLInputElement>) => void;\r\n  descriptionValue: string;\r\n  HandleChangeDescription: (event: React.FormEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nconst InputsProject = (props: IInputsProjectProps) => {\r\n  const { nameValue, descriptionValue } = props;\r\n  const { HandleChangeName, HandleChangeDescription } = props;\r\n  return (\r\n    <div className=\"form-project__inputs\">\r\n      <div className=\"form-project__inputs__block\">\r\n        <p className=\"form-project__inputs__label\">Название</p>\r\n        <input\r\n          value={nameValue}\r\n          onChange={HandleChangeName}\r\n          className=\"form-project__inputs__input\"\r\n        />\r\n      </div>\r\n\r\n      <p className=\"form-project__inputs__label\">Описание</p>\r\n      <input\r\n        value={descriptionValue}\r\n        onChange={HandleChangeDescription}\r\n        className=\"form-project__inputs__input\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputsProject;\r\n","import FormProject from \"./form-project\";\r\n\r\nexport default FormProject;\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"./form-project.css\";\r\nimport InputsProject from \"./inputs-project\";\r\nimport ApiService from \"../../../services/api-service\";\r\nimport { message } from \"antd\";\r\n\r\ninterface IFromProjectState {\r\n  title: string;\r\n  description: string;\r\n}\r\n\r\nexport default class FormProject extends Component<{}, IFromProjectState> {\r\n  constructor(props: never) {\r\n    super(props);\r\n    this.state = {\r\n      title: \"\",\r\n      description: \"\",\r\n    };\r\n  }\r\n\r\n  apiService = new ApiService();\r\n\r\n  handleChangeName = (event: React.FormEvent<HTMLInputElement>): void => {\r\n    this.setState({ title: event.currentTarget.value });\r\n  };\r\n  handleChangeDescription = (event: React.FormEvent<HTMLInputElement>): void => {\r\n    this.setState({ description: event.currentTarget.value });\r\n  };\r\n  SendForm = async () => {\r\n    const { title, description } = this.state;\r\n    if (title && description) {\r\n      await this.apiService.saveProject(title, description).then((res) => console.log(res));\r\n      message.success('Проект успешно создан');\r\n    } else window.alert(\"Заполните форму\");\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"wrap\">\r\n        <div className=\"form-project\">\r\n          <div className=\"form-project__description\">\r\n            <h2>\r\n              <ion-icon name=\"folder\" />\r\n              Проект\r\n            </h2>\r\n            <p>Введите название и описание проекта</p>\r\n            <button className=\"button green-bg\" onClick={this.SendForm}>\r\n              <ion-icon name={\"add\"} />\r\n              Создать проект\r\n            </button>\r\n          </div>\r\n          <InputsProject\r\n            nameValue={this.state.title}\r\n            HandleChangeName={this.handleChangeName}\r\n            descriptionValue={this.state.description}\r\n            HandleChangeDescription={this.handleChangeDescription}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nimport \"./form-category.css\";\r\n\r\ninterface ICategoryInputsProps {\r\n  nameValue: string;\r\n  HandleChangeName: (event: React.FormEvent<HTMLInputElement>) => void;\r\n  descriptionValue: string;\r\n  HandleChangeDescription: (event: React.FormEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nconst CategoryInputs = (props: ICategoryInputsProps) => {\r\n  const { nameValue, descriptionValue } = props;\r\n  const { HandleChangeName, HandleChangeDescription } = props;\r\n  return (\r\n    <>\r\n      <div className=\"form-project__inputs__block\">\r\n        <p className=\"form-project__inputs__label\">Название</p>\r\n        <input\r\n          value={nameValue}\r\n          onChange={HandleChangeName}\r\n          className=\"form-project__inputs__input\"\r\n        />\r\n      </div>\r\n      <div className=\"form-project__inputs__block\">\r\n        <p className=\"form-project__inputs__label\">Описание</p>\r\n        <input\r\n          value={descriptionValue}\r\n          onChange={HandleChangeDescription}\r\n          className=\"form-project__inputs__input\"\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CategoryInputs;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ApiService from \"../../../services/api-service\";\r\n\r\ninterface ISelectProjectProps {\r\n  projectIdValue: string;\r\n  HandleChangeProject: (selected: React.FormEvent<HTMLSelectElement>) => void;\r\n}\r\n\r\nexport interface IProjectMin {\r\n  id: string;\r\n  title: string;\r\n}\r\n\r\nconst SelectProject = (props: ISelectProjectProps) => {\r\n  const [projects, setProjects] = useState([{ id: \"\", title: \"Загрузка данных\" }]);\r\n\r\n  const apiService = new ApiService();\r\n  const LoadData = async () => {\r\n    const res: IProjectMin[] = await apiService.getAllProjectsMin();\r\n    setProjects(res);\r\n  };\r\n\r\n  useEffect((): void => {\r\n    console.log(\"gg\");\r\n    LoadData();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n  return (\r\n    <select\r\n      className=\"form-project__inputs__select\"\r\n      value={props.projectIdValue}\r\n      onChange={props.HandleChangeProject}\r\n    >\r\n      <option value=\"\" hidden>\r\n        Выберите проект\r\n      </option>\r\n      {projects.map((data) => {\r\n        return (\r\n          <option key={data.id} value={data.id}>\r\n            {data.title}\r\n          </option>\r\n        );\r\n      })}\r\n    </select>\r\n  );\r\n};\r\n\r\nexport default SelectProject;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ApiService from \"../../../services/api-service\";\r\n\r\ninterface ISelectProjectProps {\r\n  projectIdValue: string;\r\n  categoryIdValue: string;\r\n  HandleChangeCategory: (selected: React.FormEvent<HTMLSelectElement>) => void;\r\n}\r\n\r\nexport interface ICategoryMin {\r\n  id: string;\r\n  title: string;\r\n}\r\n\r\nconst SelectCategory = (props: ISelectProjectProps) => {\r\n  const [categories, setCategory] = useState([{ id: \"\", title: \"\" }]);\r\n\r\n  useEffect((): void => {\r\n    const LoadData = async () => {\r\n      const apiService = new ApiService();\r\n      const res: ICategoryMin[] = await apiService.getCategoriesMin(props.projectIdValue);\r\n      if (res) {\r\n        setCategory(res);\r\n      }\r\n    };\r\n    LoadData();\r\n  }, [props.projectIdValue]);\r\n  return (\r\n    <select\r\n      className=\"form-project__inputs__select\"\r\n      value={props.categoryIdValue}\r\n      onChange={props.HandleChangeCategory}\r\n    >\r\n      <option value=\"\" hidden>\r\n        Выберите категорию a\r\n      </option>\r\n      {categories.map((category) => {\r\n        return (\r\n          <option key={category.id} value={category.id}>\r\n            {category.title}\r\n          </option>\r\n        );\r\n      })}\r\n    </select>\r\n  );\r\n};\r\n\r\nexport default SelectCategory;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ApiService from \"../../../services/api-service\";\r\n\r\ninterface ISelectGroupProps {\r\n  projectIdValue: string;\r\n  categoryIdValue: string;\r\n  groupIdValue: string;\r\n  HandleChangeGroup: (selected: React.FormEvent<HTMLSelectElement>) => void;\r\n}\r\n\r\nexport interface IGroupMin {\r\n  id: string;\r\n  title: string;\r\n}\r\n\r\nconst SelectGroup = (props: ISelectGroupProps) => {\r\n  const { projectIdValue, categoryIdValue, groupIdValue, HandleChangeGroup } = props;\r\n  const [groups, setGroups] = useState([{ id: \"\", title: \"\" }]);\r\n\r\n  useEffect((): void => {\r\n    if (categoryIdValue !== \"\") {\r\n      const LoadData = async () => {\r\n        const apiService = new ApiService();\r\n        const res: IGroupMin[] = await apiService.getGroupMin(projectIdValue, categoryIdValue);\r\n        setGroups(res);\r\n      };\r\n      LoadData();\r\n    }\r\n  }, [categoryIdValue, projectIdValue]);\r\n  return (\r\n    <select\r\n      className=\"form-project__inputs__select\"\r\n      value={groupIdValue}\r\n      onChange={HandleChangeGroup}\r\n    >\r\n      <option value=\"\" hidden>\r\n        Выберите категорию\r\n      </option>\r\n      {groups.map((data) => {\r\n        return (\r\n          <option key={data.id} value={data.id}>\r\n            {data.title}\r\n          </option>\r\n        );\r\n      })}\r\n    </select>\r\n  );\r\n};\r\n\r\nexport default SelectGroup;\r\n","import FormCategory from \"./form-category\";\r\n\r\nexport default FormCategory;\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"./form-category.css\";\r\n\r\nimport CategoryInputs from \"./category-inputs\";\r\nimport { SelectProject } from \"../form-select\";\r\nimport ApiService from \"../../../services/api-service\";\r\nimport { message } from \"antd\";\r\n\r\ninterface IFromCategoryState {\r\n  title: string;\r\n  description: string;\r\n  projectId: string;\r\n}\r\n\r\nexport default class FormCategoty extends Component<{}, IFromCategoryState> {\r\n  constructor(props: never) {\r\n    super(props);\r\n    this.state = {\r\n      title: \"\",\r\n      description: \"\",\r\n      projectId: \"\",\r\n    };\r\n  }\r\n  apiService = new ApiService();\r\n  handleChangeName = (event: React.FormEvent<HTMLInputElement>): void => {\r\n    this.setState({ title: event.currentTarget.value });\r\n  };\r\n  handleChangeDescription = (event: React.FormEvent<HTMLInputElement>): void => {\r\n    this.setState({ description: event.currentTarget.value });\r\n  };\r\n  handleChangeProject = (selected: React.FormEvent<HTMLSelectElement>): void => {\r\n    this.setState({ projectId: selected.currentTarget.value });\r\n    console.log(selected.currentTarget.value);\r\n  };\r\n  SendForm = async () => {\r\n    const { title, description, projectId } = this.state;\r\n    if (title && description && projectId) {\r\n      await this.apiService.saveCategory(title, description, projectId);\r\n      message.success('Категория успешно создана');\r\n    }\r\n  };\r\n  render() {\r\n    const { projectId, title, description } = this.state;\r\n    const { handleChangeName, handleChangeDescription, handleChangeProject, SendForm } = this;\r\n    return (\r\n      <div className=\"wrap\">\r\n        <div className=\"form-project\">\r\n          <div className=\"form-project__description\">\r\n            <h2>\r\n              <ion-icon name=\"shapes\" />\r\n              Категория\r\n            </h2>\r\n            <p>Введите название и описание категоhии</p>\r\n            <button className=\"button green-bg\" onClick={SendForm}>\r\n              <ion-icon name={\"add\"} />\r\n              Создать категорию\r\n            </button>\r\n          </div>\r\n          <div className=\"form-project__inputs\">\r\n            <SelectProject projectIdValue={projectId} HandleChangeProject={handleChangeProject} />\r\n            <CategoryInputs\r\n              nameValue={title}\r\n              HandleChangeName={handleChangeName}\r\n              descriptionValue={description}\r\n              HandleChangeDescription={handleChangeDescription}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\ninterface ICategoryInputsProps {\r\n  nameValue: string;\r\n  HandleChangeName: (event: React.FormEvent<HTMLInputElement>) => void;\r\n  descriptionValue: string;\r\n  HandleChangeDescription: (event: React.FormEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nconst GroupInputs = (props: ICategoryInputsProps) => {\r\n  return (\r\n    <>\r\n      <div className=\"form-project__inputs__block\">\r\n        <p className=\"form-project__inputs__label\">Название</p>\r\n        <input\r\n          value={props.nameValue}\r\n          onChange={props.HandleChangeName}\r\n          className=\"form-project__inputs__input\"\r\n        />\r\n      </div>\r\n\r\n      <p className=\"form-project__inputs__label\">Описание</p>\r\n      <input\r\n        value={props.descriptionValue}\r\n        onChange={props.HandleChangeDescription}\r\n        className=\"form-project__inputs__input\"\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GroupInputs;\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"./form-group.css\";\r\nimport GroupInputs from \"./group-inputs\";\r\nimport { SelectProject, SelectCategory } from \"../form-select\";\r\nimport ApiService from \"../../../services/api-service\";\r\nimport { message } from \"antd\";\r\n\r\ninterface IFromCategoryState {\r\n  title: string;\r\n  description: string;\r\n  projectId: string;\r\n  categoryId: string;\r\n}\r\n\r\nconst initialState: IFromCategoryState = {\r\n  title: \"\",\r\n  description: \"\",\r\n  projectId: \"\",\r\n  categoryId: \"\",\r\n};\r\n\r\nexport default class FormGroup extends Component<{}, IFromCategoryState> {\r\n  constructor(props: never) {\r\n    super(props);\r\n    this.state = initialState;\r\n  }\r\n\r\n  handleChangeName = (event: React.FormEvent<HTMLInputElement>): void => {\r\n    this.setState({ title: event.currentTarget.value });\r\n  };\r\n\r\n  handleChangeDescription = (event: React.FormEvent<HTMLInputElement>): void => {\r\n    this.setState({ description: event.currentTarget.value });\r\n  };\r\n\r\n  handleChangeProject = (selected: React.FormEvent<HTMLSelectElement>): void => {\r\n    this.setState({ projectId: selected.currentTarget.value });\r\n  };\r\n\r\n  handleChangeCategory = (selected: React.FormEvent<HTMLSelectElement>): void => {\r\n    this.setState({ categoryId: selected.currentTarget.value });\r\n  };\r\n\r\n  apiService = new ApiService();\r\n\r\n  SendForm = async () => {\r\n    console.log(\"Обработка отправки формы\");\r\n    console.log(this.state);\r\n    const { title, description, projectId, categoryId } = this.state;\r\n        await this.apiService.saveGroup(title, description, projectId, categoryId);\r\n        message.success('Группа успешно создан');\r\n  };\r\n  render() {\r\n    const { title: name, description, projectId, categoryId } = this.state;\r\n    return (\r\n      <div className=\"wrap\">\r\n        <div className=\"form-project\">\r\n          <div className=\"form-project__description\">\r\n            <h2>\r\n              <ion-icon name=\"shapes\" />\r\n              Группа\r\n            </h2>\r\n            <p>Введите название и описание группы</p>\r\n            <button className=\"button green-bg\" onClick={this.SendForm}>\r\n              <ion-icon name={\"add\"} />\r\n              Создать Группу\r\n            </button>\r\n          </div>\r\n          <div className=\"form-project__inputs\">\r\n            <SelectProject\r\n              projectIdValue={projectId}\r\n              HandleChangeProject={this.handleChangeProject}\r\n            />\r\n            <SelectCategory\r\n              projectIdValue={projectId}\r\n              categoryIdValue={categoryId}\r\n              HandleChangeCategory={this.handleChangeCategory}\r\n            />\r\n            <GroupInputs\r\n              nameValue={name}\r\n              descriptionValue={description}\r\n              HandleChangeName={this.handleChangeName}\r\n              HandleChangeDescription={this.handleChangeDescription}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import FormGroup from \"./from-group\";\r\n\r\nexport default FormGroup;\r\n","import React from \"react\";\r\nimport { DatePicker } from 'antd';\r\n\r\ninterface ITaskInputsProps {\r\n  nameValue: string;\r\n  HandleChangeName: (event: React.FormEvent<HTMLInputElement>) => void;\r\n  descriptionValue: string;\r\n  HandleChangeDescription: (event: React.FormEvent<HTMLInputElement>) => void;\r\n  textValue: string;\r\n  HandleChangeText: (event: React.FormEvent<HTMLTextAreaElement>) => void;\r\n  HandleChangeDate: (event: any) => void;\r\n}\r\nconst TaskInputs = (props: ITaskInputsProps) => {\r\n  const { nameValue, descriptionValue, textValue } = props;\r\n  const { HandleChangeName, HandleChangeDescription, HandleChangeText, HandleChangeDate } = props;\r\n  return (\r\n    <>\r\n      <div className=\"form-project__inputs__block\">\r\n        <p className=\"form-project__inputs__label\">Название</p>\r\n        <input\r\n          value={nameValue}\r\n          onChange={HandleChangeName}\r\n          className=\"form-project__inputs__input\"\r\n        />\r\n      </div>\r\n      <div className=\"form-project__inputs__block\">\r\n        <p className=\"form-project__inputs__label\">Описание</p>\r\n        <input\r\n          value={descriptionValue}\r\n          onChange={HandleChangeDescription}\r\n          className=\"form-project__inputs__input\"\r\n        />\r\n      </div>\r\n      <DatePicker onChange={HandleChangeDate} />\r\n      <div className=\"form-project__inputs__block\">\r\n        <p className=\"form-project__inputs__label\">Текст задачи</p>\r\n        <textarea\r\n          value={textValue}\r\n          onChange={HandleChangeText}\r\n          className=\"form-project__inputs__input\"\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TaskInputs;\r\n","import React, { Component } from 'react';\r\n\r\nimport './form-task.css';\r\nimport TaskInputs from './task-inputs';\r\nimport { SelectCategory, SelectGroup, SelectProject } from '../form-select';\r\nimport moment from 'moment';\r\nimport 'moment/locale/ru';\r\nimport ApiTaskService from '../../../services/api-task-service';\r\nimport { message } from 'antd';\r\n\r\ninterface IFromTaskState {\r\n  title: string;\r\n  description: string;\r\n  content: string;\r\n  expiredDate: string | null;\r\n  projectId: string;\r\n  categoryId: string;\r\n  groupId: string;\r\n\r\n}\r\n\r\nconst initionalState: IFromTaskState = {\r\n  title: '',\r\n  description: '',\r\n  content: '',\r\n  expiredDate: null,\r\n  projectId: '',\r\n  categoryId: '',\r\n  groupId: '',\r\n};\r\n\r\nexport default class FormTask extends Component<{}, IFromTaskState> {\r\n  constructor (props: never) {\r\n    super(props);\r\n    this.state = initionalState;\r\n  }\r\n\r\n  handleChangeName = (event: React.FormEvent<HTMLInputElement>): void => {\r\n    this.setState({ title: event.currentTarget.value });\r\n  };\r\n  handleChangeDescription = (event: React.FormEvent<HTMLInputElement>): void => {\r\n    this.setState({ description: event.currentTarget.value });\r\n  };\r\n  handleChangeText = (event: React.FormEvent<HTMLTextAreaElement>): void => {\r\n    this.setState({ content: event.currentTarget.value });\r\n  };\r\n\r\n  handleChangeExpiredDate = (date: any): void => {\r\n    this.setState({ expiredDate: moment(date).format('L') });\r\n    console.log(moment(date).format('L'));\r\n  };\r\n  handleChangeProject = (selected: React.FormEvent<HTMLSelectElement>): void => {\r\n    this.setState({ projectId: selected.currentTarget.value, categoryId: '' });\r\n  };\r\n  handleChangeCategory = (selected: React.FormEvent<HTMLSelectElement>): void => {\r\n    this.setState({ categoryId: selected.currentTarget.value });\r\n  };\r\n  handleChangeGroup = (selected: React.FormEvent<HTMLSelectElement>): void => {\r\n    this.setState({ groupId: selected.currentTarget.value });\r\n  };\r\n  apiService = new ApiTaskService();\r\n  SendForm = async () => {\r\n    const { title, description, content, projectId, categoryId, groupId, expiredDate } = this.state;\r\n    await this.apiService.saveTask({ title, description, content, projectId, categoryId, groupId, expiredDate });\r\n    message.success('Задача успешно создана');\r\n  };\r\n\r\n  render () {\r\n    const { title, description, content, projectId, categoryId, groupId } = this.state;\r\n    return (\r\n      <div className=\"wrap\">\r\n        <div className=\"form-project\">\r\n          <div className=\"form-project__description\">\r\n            <h2>\r\n              <ion-icon name=\"document-text\"/>\r\n              Задача\r\n            </h2>\r\n            <p>Введите название и описание задачи</p>\r\n            <button className=\"button green-bg\" onClick={this.SendForm}>\r\n              <ion-icon name=\"add\"/>\r\n              Создать задачу\r\n            </button>\r\n          </div>\r\n          <div className=\"form-project__inputs\">\r\n            <SelectProject\r\n              projectIdValue={projectId}\r\n              HandleChangeProject={this.handleChangeProject}\r\n            />\r\n            <SelectCategory\r\n              categoryIdValue={categoryId}\r\n              projectIdValue={projectId}\r\n              HandleChangeCategory={this.handleChangeCategory}\r\n            />\r\n            <SelectGroup\r\n              categoryIdValue={categoryId}\r\n              projectIdValue={projectId}\r\n              groupIdValue={groupId}\r\n              HandleChangeGroup={this.handleChangeGroup}\r\n            />\r\n            <TaskInputs\r\n              nameValue={title}\r\n              descriptionValue={description}\r\n              textValue={content}\r\n              HandleChangeName={this.handleChangeName}\r\n              HandleChangeDescription={this.handleChangeDescription}\r\n              HandleChangeText={this.handleChangeText}\r\n              HandleChangeDate={this.handleChangeExpiredDate}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import FormTask from \"./form-task\";\r\n\r\nexport default FormTask;\r\n","import CreateNav from \"./create-nav\";\r\n\r\nexport default CreateNav;\r\n","import React from \"react\";\r\nimport { Link, useRouteMatch } from \"react-router-dom\";\r\nimport \"./create-nav.css\";\r\n\r\nconst CreateNav = () => {\r\n  const match = useRouteMatch();\r\n\r\n  return (\r\n    <div className=\"wrap\">\r\n      <Link className=\"nav-button\" to={`${match.url}`}>\r\n        Создать проект\r\n      </Link>\r\n      <Link className=\"nav-button\" to={`${match.url}/category`}>\r\n        Создать категорию\r\n      </Link>\r\n      <Link className=\"nav-button\" to={`${match.url}/group`}>\r\n        Создать группу\r\n      </Link>\r\n      <Link className=\"nav-button\" to={`${match.url}/task`}>\r\n        Создать задачу\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateNav;\r\n","import React from \"react\";\r\nimport Header from \"../header\";\r\nimport { Switch, Route, useRouteMatch } from \"react-router-dom\";\r\nimport FormProject from \"../forms/form-project\";\r\nimport FormCategory from \"../forms/form-category\";\r\nimport FormGroup from \"../forms/form-group\";\r\nimport FormTask from \"../forms/form-task\";\r\nimport CreateNav from \"../create-nav\";\r\n\r\nconst CreatePage = () => {\r\n  const match = useRouteMatch();\r\n  console.log(`${match.url}/category`);\r\n  return (\r\n    <>\r\n      <Header text=\"Создать\" icon=\"add-circle\" />\r\n      <CreateNav />\r\n      <Switch>\r\n        <Route exact path={`${match.url}`}>\r\n          <FormProject />\r\n        </Route>\r\n        <Route path={`${match.url}/category`}>\r\n          <FormCategory />\r\n        </Route>\r\n        <Route path={`${match.url}/group`}>\r\n          <FormGroup />\r\n        </Route>\r\n        <Route path={`${match.url}/task`}>\r\n          <FormTask />\r\n        </Route>\r\n      </Switch>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CreatePage;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport Navigation from \"./components/navigation\";\r\n\r\nimport { DashboardPage, ProjectPage, ProfilePage } from \"./components/pages\";\r\n\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport CreatePage from \"./components/pages/create-page\";\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router basename=\"/app\">\r\n        <Navigation />\r\n        <div className=\"content\">\r\n          <Switch>\r\n            <Route path=\"/\" exact>\r\n              <DashboardPage />\r\n            </Route>\r\n            <Route path=\"/create\">\r\n              <CreatePage />\r\n            </Route>\r\n            <Route path=\"/projects\">\r\n              <ProjectPage />\r\n            </Route>\r\n            <Route path=\"/profile\">\r\n              <ProfilePage />\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n//Icon Font\r\ndeclare global {\r\n  namespace JSX {\r\n    interface IntrinsicElements {\r\n      \"ion-icon\": any;\r\n    }\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport 'antd/dist/antd.css';\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}