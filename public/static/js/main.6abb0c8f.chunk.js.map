{"version":3,"sources":["types/service-types.ts","components/navigation/navigation-user.tsx","components/navigation/navigation-items.tsx","components/navigation/index.tsx","components/navigation/navigation.tsx","components/header/index.tsx","components/header/header.tsx","services/request.ts","services/dashboard-service.ts","components/today-tasks/index.tsx","components/today-tasks/today-tasks.tsx","components/week-tasks/index.tsx","components/week-tasks/week-tasks.tsx","components/outdate-tasks/index.tsx","components/outdate-tasks/outdate-tasks.tsx","components/Dashboard/index.tsx","components/Dashboard/dashboard.tsx","components/pages/dashboard-pages.tsx","services/api-service.tsx","components/status/index.tsx","components/status/status.tsx","components/card/index.tsx","components/card/card.tsx","components/projects/index.tsx","components/projects/projects.tsx","components/pages/projects-page.tsx","components/modal/index.tsx","components/modal/modal.tsx","components/pages/profile-page.tsx","services/api-participant-service.ts","components/add-participant/index.tsx","components/add-participant/add-participant.tsx","components/participant-list/index.tsx","components/participant-list/participant-list.tsx","components/project/project.tsx","components/project/index.tsx","components/category/category.tsx","components/category/index.tsx","components/group/group.tsx","components/group/index.tsx","components/comment/index.tsx","components/comment/comment.tsx","components/task/task-card.tsx","services/api-task-service.ts","services/api-comment-service.ts","components/comment-create/index.tsx","components/comment-create/comment-create.tsx","components/task/task.tsx","components/task/index.tsx","components/pages/task-page.tsx","components/pages/group-page.tsx","components/pages/category-page.tsx","components/pages/project-page.tsx","components/forms/form-project/inputs-project.tsx","components/forms/form-project/index.tsx","components/forms/form-project/form-project.tsx","components/forms/form-category/category-inputs.tsx","components/forms/form-select/select-project.tsx","components/forms/form-select/select-category.tsx","components/forms/form-select/select-group.tsx","components/forms/form-category/index.tsx","components/forms/form-category/form-category.tsx","components/forms/form-group/group-inputs.tsx","components/forms/form-group/from-group.tsx","components/forms/form-group/index.tsx","components/forms/form-task/task-inputs.tsx","components/forms/form-task/form-task.tsx","components/forms/form-task/index.tsx","components/create-nav/index.tsx","components/create-nav/create-nav.tsx","components/pages/create-page.tsx","App.tsx","index.tsx"],"names":["Method","NavigationUser","props","to","className","userName","email","NavigationItems","name","Navigation","id","Header","size","icon","text","description","RequestService","requestHeaders","Authorization","Cookies","get","Request","url","method","data","a","fetch","headers","body","JSON","stringify","response","console","log","ok","Error","Unauthorized","localStorage","removeItem","window","location","href","getRequest","Get","then","res","json","postRequest","Post","putRequest","Put","patchRequest","Patch","deleteRequest","Delete","DashboardService","requestService","getAllTasks","getTodayTasks","getWeekTasks","getOutDateTasks","getStatistic","this","TodayTasks","useState","tasks","setTasks","useEffect","Api","result","fetchData","bordered","dataSource","renderItem","item","Item","title","expiredDate","WeekTasks","OutDateTasks","Dashboard","defaultActiveKey","TabPane","tab","key","DashboardPage","Component","ApiService","GetRequest","axios","catch","e","error","PostRequest","post","getAllProjects","results","getProject","projectId","getCategory","categoryId","getGroup","groupId","getTask","taskId","getAllProjectsMin","fullProjects","map","getCategoriesMin","fullProject","categories","getGroupMin","fullCategory","groups","saveProject","saveCategory","saveGroup","saveTask","content","getUser","_userMin","Status","status","el","Card","match","useRouteMatch","Projects","apiService","state","projects","setState","length","ProjectsPage","exact","path","Modal","isOpen","setOpen","open","onClick","buttonText","children","ProfilePage","dd","ApiParticipantService","getParticipant","addParticipant","AddParticipant","visible","setVisible","onFinish","values","placement","closable","onClose","layout","initialValues","remember","onFinishFailed","errorInfo","label","rules","required","message","type","htmlType","ParticipantList","participants","setParticipants","width","username","role","initialState","creator","Project","category","index","project","Category","items","renderItems","Group","Comment","commentsList","comments","comment","author","link","TaskCard","btn","handleClick","danger","deleteTask","ApiTaskService","ApiCommentService","createComment","CommentCreate","api","initionalState","Task","alert","history","back","TaskPage","useParams","GroupPage","CategoryPage","ProjectPage","InputsProject","nameValue","descriptionValue","HandleChangeName","HandleChangeDescription","value","onChange","FormProject","handleChangeName","event","currentTarget","handleChangeDescription","SendForm","CategoryInputs","SelectProject","setProjects","LoadData","projectIdValue","HandleChangeProject","hidden","SelectCategory","setCategory","categoryIdValue","HandleChangeCategory","SelectGroup","groupIdValue","HandleChangeGroup","setGroups","FormCategory","handleChangeProject","selected","GroupInputs","FormGroup","handleChangeCategory","TaskInputs","textValue","HandleChangeText","HandleChangeDate","FormTask","handleChangeText","handleChangeExpiredDate","date","moment","format","handleChangeGroup","CreateNav","CreatePage","App","basename","ReactDOM","render","document","getElementById"],"mappings":"icAAYA,E,uECmBGC,EAXQ,SAACC,GACtB,OACE,kBAAC,IAAD,CAAMC,GAAG,YACP,yBAAKC,UAAU,cACb,yBAAKA,UAAU,oBAAoBF,EAAMG,UACzC,yBAAKD,UAAU,qBAAqBF,EAAMI,UCYnCC,EAtBS,WACtB,OACE,oCACE,yBAAKH,UAAU,cACb,kBAAC,IAAD,CAAMD,GAAG,WACP,8BAAUK,KAAK,eADjB,+CAIF,yBAAKJ,UAAU,gBACb,kBAAC,IAAD,CAAMD,GAAG,KACP,8BAAUK,KAAK,aADjB,4DAIF,yBAAKJ,UAAU,cACb,kBAAC,IAAD,CAAMD,GAAG,aACP,8BAAUK,KAAK,WADjB,iDCfOC,ECII,WACjB,OACE,yBAAKL,UAAU,QACb,kBAAC,EAAD,CAAgBM,GAAG,KAAKL,SAAS,gEAAcC,MAAM,8BACrD,kBAAC,EAAD,Q,gCCRSK,G,OCSuB,SAAAT,GACpC,IAAIU,EAAe,GACnB,OAAQV,EAAMU,MACZ,IAAK,SACHA,EAAO,SACP,MACF,IAAK,QACHA,EAAO,QAKX,OACE,kBAAC,WAAD,KACE,wBAAIR,UAAS,iBAAYQ,IACvB,8BAAUJ,KAAMN,EAAMW,OACrBX,EAAMY,MAET,uBAAGV,UAAU,uBAAuBF,EAAMa,gB,kDN7BpCf,K,UAAAA,E,YAAAA,E,UAAAA,E,cAAAA,E,iBAAAA,M,0BOWSgB,E,iDAEFC,eAA8B,CAC7C,eAAgB,mBAChBC,cAAc,UAAD,OAAYC,IAAQC,IAAI,S,KAG/BC,Q,uCAAU,WAAWC,EAAaC,EAAgBC,GAAxC,eAAAC,EAAA,sEACOC,MAAM,kCAAD,OAAmCP,IAAQC,IAAI,UAA/C,YAA4DE,GAAO,CAC7FC,SACAI,QAAS,EAAKV,eACdW,KAAMC,KAAKC,UAAUN,KAJP,UACVO,EADU,OAMhBC,QAAQC,IAAIF,GACPA,EAASG,GAPE,sBAOQ,IAAIC,MAAM,wCAPlB,gCASTJ,GATS,2C,+DAYVK,aAAe,WACrBC,aAAaC,WAAW,OACxBC,OAAOC,SAASC,KAAO,S,KAGzBC,W,uCAAa,WAAWpB,GAAX,SAAAG,EAAA,sEACE,EAAKJ,QAAQC,EAAKtB,EAAO2C,KAAKC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UADhD,mF,2DAIbC,Y,uCAAc,WAAWzB,EAAaE,GAAxB,SAAAC,EAAA,sEACN,EAAKJ,QAAWC,EAAKtB,EAAOgD,KAAMxB,GAD5B,2C,6DAIdyB,W,uCAAa,WAAW3B,EAAaE,GAAxB,SAAAC,EAAA,sEACL,EAAKJ,QAAWC,EAAKtB,EAAOkD,IAAK1B,GAD5B,2C,6DAGb2B,a,uCAAe,WAAW7B,EAAaE,GAAxB,SAAAC,EAAA,sEACP,EAAKJ,QAAWC,EAAKtB,EAAOoD,MAAO5B,GAD5B,2C,6DAGf6B,c,uCAAgB,WAAW/B,GAAX,SAAAG,EAAA,sEACR,EAAKJ,QAAWC,EAAKtB,EAAOsD,QADpB,2C,uDC9CGC,EAGnB,aAAgB,IAAD,gCAFEC,oBAEF,OAIfC,YAJe,sBAID,sBAAAhC,EAAA,sEACC,EAAK+B,eAAed,WAAgB,eADrC,mFAJC,KAQfgB,cARe,sBAQC,sBAAAjC,EAAA,sEACD,EAAK+B,eAAed,WAAoB,iBADvC,mFARD,KAYfiB,aAZe,sBAYA,sBAAAlC,EAAA,sEACA,EAAK+B,eAAed,WAAoB,gBADxC,mFAZA,KAgBfkB,gBAhBe,sBAgBG,sBAAAnC,EAAA,sEACD,EAAK+B,eAAed,WAAgB,mBADnC,mFAhBH,KAoBfmB,aApBe,sBAoBA,sBAAApC,EAAA,sEACA,EAAK+B,eAAed,WAAgB,YADpC,mFAnBboB,KAAKN,eAAiB,IAAIxC,G,SCLf+C,ECGI,WAAO,IAAD,EACGC,qBADH,mBAChBC,EADgB,KACTC,EADS,KAUvB,OARAC,qBAAU,YACO,uCAAG,8BAAA1C,EAAA,6DACV2C,EAAM,IAAIb,EADA,SAEKa,EAAIV,gBAFT,OAEVW,EAFU,OAGhBH,EAASG,GAHO,2CAAH,qDAKfC,KACC,IACI,kBAAC,IAAD,CACL1D,KAAK,QACL2D,UAAQ,EACRC,WAAYP,EACZQ,WAAY,SAAAC,GAAI,OAAI,kBAAC,IAAKC,KAAN,KAAW,4BAAKD,EAAKE,OAArB,IAAiC,2BAAIF,EAAK3D,aAA1C,IAA2D,2BAAI2D,EAAKG,kBCjB7EC,ECGG,WAAO,IAAD,EAEId,qBAFJ,mBAEfC,EAFe,KAERC,EAFQ,KAYtB,OARAC,qBAAU,YACO,uCAAG,8BAAA1C,EAAA,6DACV2C,EAAM,IAAIb,EADA,SAEKa,EAAIT,eAFT,OAEVU,EAFU,OAGhBH,EAASG,GAHO,2CAAH,qDAKfC,KACC,IACI,kBAAC,IAAD,CACL1D,KAAK,QACL2D,UAAQ,EACRC,WAAYP,EACZQ,WAAY,SAAAC,GAAI,OAAI,kBAAC,IAAKC,KAAN,KAAW,4BAAKD,EAAKE,OAArB,IAAiC,2BAAIF,EAAK3D,aAA1C,IAA2D,2BAAI2D,EAAKG,kBCnB7EE,ECGM,WAAO,IAAD,EACCf,qBADD,mBAClBC,EADkB,KACXC,EADW,KAUzB,OARAC,qBAAU,YACO,uCAAG,8BAAA1C,EAAA,6DACV2C,EAAM,IAAIb,EADA,SAEKa,EAAIR,kBAFT,OAEVS,EAFU,OAGhBH,EAASG,GAHO,2CAAH,qDAKfC,KACC,IACI,kBAAC,IAAD,CACL1D,KAAK,QACL2D,UAAQ,EACRC,WAAYP,EACZQ,WAAY,SAAAC,GAAI,OAAI,kBAAC,IAAKC,KAAN,KAAW,4BAAKD,EAAKE,OAArB,IAAiC,2BAAIF,EAAK3D,aAA1C,IAA2D,2BAAI2D,EAAKG,kBCjB7EG,ECKG,WAChB,OAAQ,kBAAC,IAAD,CAAMC,iBAAiB,KAC7B,kBAAC,IAAKC,QAAN,CAAcC,IAAI,+FAAoBC,IAAI,KACxC,kBAAC,EAAD,OAEF,kBAAC,IAAKF,QAAN,CAAcC,IAAI,0FAAoBC,IAAI,KACxC,kBAAC,EAAD,OAEF,kBAAC,IAAKF,QAAN,CAAcC,IAAI,iHAAuBC,IAAI,KAC3C,kBAAC,EAAD,SCZeC,E,uKAEjB,OACE,6BACE,kBAAC,EAAD,CAAQvE,KAAK,oGAAoBD,KAAK,cACtC,kBAAC,EAAD,W,GALmCyE,a,0BCmEtBC,E,iDACXC,W,uCAAa,WAAOlE,GAAP,SAAAG,EAAA,+EACZgE,IACJrE,IADI,yCACkCD,IAAQC,IAAI,UAD9C,mBACkEE,GAAO,CAC5EK,QAAS,CACPT,cAAc,UAAD,OAAYC,IAAQC,IAAI,WAGxCwB,MAAK,SAACC,GACL,OAAOA,EAAIrB,QAEZkE,OAAM,SAACC,GAAD,OAAO3D,QAAQ4D,MAAMD,EAAI,kFAVf,2C,2DAYbE,Y,uCAAc,WAAOvE,EAAaE,GAApB,SAAAC,EAAA,+EACbgE,IAAMK,KAAN,yCAC6B3E,IAAQC,IAAI,UADzC,mBAC6DE,GAClEE,EACA,CACEG,QAAS,CACPT,cAAc,UAAD,OAAYC,IAAQC,IAAI,QACrC,eAAgB,uBAPF,2C,6DActB2E,e,sBAAiB,4BAAAtE,EAAA,sEACmB,EAAK+D,WAAL,IADnB,cACTQ,EADS,yBAERA,GAFQ,2C,KAMjBC,W,uCAAa,WAAOC,GAAP,eAAAzE,EAAA,sEAC0B,EAAK+D,WAAL,WAAoBU,IAD9C,cACL7B,EADK,yBAEJA,GAFI,2C,2DAMb8B,Y,uCAAc,WAAOD,EAAmBE,GAA1B,eAAA3E,EAAA,sEAC0B,EAAK+D,WAAL,WAAoBU,EAApB,qBAA0CE,IADpE,cACN/B,EADM,yBAELA,GAFK,2C,6DAMdgC,S,uCAAW,WACTH,EACAE,EACAE,GAHS,eAAA7E,EAAA,sEAK0B,EAAK+D,WAAL,WAC7BU,EAD6B,qBACPE,EADO,kBACaE,IANvC,cAKHjC,EALG,yBAQFA,GARE,2C,+DAYXkC,Q,uCAAU,WACRL,EACAE,EACAE,EACAE,GAJQ,eAAA/E,EAAA,sEAM0B,EAAK+D,WAAL,WAC5BU,EAD4B,qBACNE,EADM,kBACcE,EADd,iBAC8BE,IAPxD,cAMFnC,EANE,yBASDA,GATC,2C,iEAaVoC,kB,sBAAoB,8BAAAhF,EAAA,sEACqB,EAAKsE,iBAD1B,cACZW,EADY,OAEZrC,EAAwBqC,EAAaC,KAAI,SAAC9D,GAC9C,MAAO,CAAEnC,GAAImC,EAAInC,GAAIkE,MAAO/B,EAAI+B,UAHhB,kBAKXP,GALW,2C,KASpBuC,iB,uCAAmB,WAAOlG,GAAP,iBAAAe,EAAA,sEACyB,EAAKwE,WAAWvF,GADzC,cACXmG,EADW,OAEXxC,EAAyBwC,EAAYC,WAF1B,kBAGVzC,GAHU,2C,2DAOnB0C,Y,uCAAc,WAAOb,EAAmBE,GAA1B,iBAAA3E,EAAA,sEACgC,EAAK0E,YAAYD,EAAWE,GAD5D,cACNY,EADM,OAEN3C,EAAsB2C,EAAaC,OACzCjF,QAAQC,IAAIoC,GAHA,kBAILA,GAJK,2C,6DAQd6C,Y,uCAAc,WAAOtC,EAAe7D,GAAtB,eAAAU,EAAA,sEACS,EAAKoE,YAAY,GAAI,CACxCjB,QACA7D,gBAHU,cACNsD,EADM,yBAKLA,GALK,2C,6DASd8C,a,uCAAe,WAAOvC,EAAe7D,EAAqBmF,GAA3C,eAAAzE,EAAA,sEACQ,EAAKoE,YAAL,WAAqBK,EAArB,aAA2C,CAC9DtB,QACA7D,gBAHW,cACPsD,EADO,yBAKNA,GALM,2C,+DASf+C,U,uCAAY,WAAOxC,EAAe7D,EAAqBmF,EAAmBE,GAA9D,eAAA3E,EAAA,sEACW,EAAKoE,YAAL,WAAqBK,EAArB,qBAA2CE,EAA3C,UAA+D,CAClFxB,QACA7D,gBAHQ,cACJsD,EADI,yBAKHA,GALG,2C,iEASZgD,S,uCAAW,WACTzC,EACA7D,EACAuG,EACApB,EACAE,EACAE,GANS,eAAA7E,EAAA,sEAQY,EAAKoE,YAAL,WACfK,EADe,qBACOE,EADP,kBAC2BE,EAD3B,SAEnB,CACE1B,QACA7D,cACAuG,UACAzC,YAAa,eAdR,cAQHR,EARG,yBAiBFA,GAjBE,2C,qEAmBXkD,Q,uCAAU,WAAO7G,GAAP,SAAAe,EAAA,+EACD,EAAK+F,UADJ,2C,2DAIVA,SAAW,CACT9G,GAAI,KACJF,KAAM,gEACNF,MAAO,wBCxNImH,G,cCcA,SAACvH,GAAyB,IAC/BwH,EAAWxH,EAAXwH,OACJC,EAAK,+BACT,OAAQD,GACN,IAAK,YACHC,EACE,0BAAMvH,UAAU,oBACd,8BAAUI,KAAK,YADjB,oDAKF,MACF,IAAK,YACHmH,EACE,0BAAMvH,UAAU,oBACd,8BAAUI,KAAK,cADjB,0DAKF,MACF,IAAK,YACHmH,EACE,0BAAMvH,UAAU,oBACb,IACD,8BAAUI,KAAK,SAFjB,sEAMF,MACF,IAAK,gBACHmH,EACE,0BAAMvH,UAAU,wBACd,8BAAUI,KAAK,UADjB,gEASN,OAAO,yBAAKJ,UAAU,UAAUuH,KCtDnBC,ECWmB,SAAA1H,GAChC,IAAM2H,EAAQC,cAENlD,EAAoD1E,EAApD0E,MAAO7D,EAA6Cb,EAA7Ca,YAH0B,EAGmBb,EAAhCQ,UAHa,MAGR,GAHQ,IAGmBR,EAAvBwH,cAHI,MAGK,UAHL,EAIzC,OACE,kBAAC,IAAD,CAAMvH,GAAE,UAAK0H,EAAMvG,IAAX,YAAkBZ,IACxB,yBAAKN,UAAU,QACb,kBAAC,EAAD,CAAQsH,OAAQA,IAEhB,wBAAItH,UAAU,eAAewE,GAC7B,uBAAGxE,UAAU,qBAAqBW,GAClC,4BAAQX,UAAU,gBAAlB,6DCtBO2H,E,kDCYb,WAAY7H,GAAY,IAAD,8BACrB,cAAMA,IAYR8H,WAAa,IAAIzC,EAXf,EAAK0C,MAAQ,CACXC,SAAU,CACR,CACExH,GAAI,GACJkE,MAAO,GACP7D,YAAa,MAPE,E,gEAcF,IAAD,OAClB+C,KAAKkE,WAAWjC,iBAAiBnD,MAAK,SAACC,GACjCA,EACF,EAAKsF,SAAS,CAAED,SAAUrF,IACrBb,QAAQ4D,MAAM,6C,+BAIf,IACAsC,EAAapE,KAAKmE,MAAlBC,SACR,OAAwB,IAApBA,EAASE,OACJ,iCAGP,yBAAKhI,UAAU,gBACZ8H,EAASvB,KAAI,SAACgB,GACb,OAAO,kBAAC,EAAD,CAAMvC,IAAKuC,EAAGjH,GAAIA,GAAIiH,EAAGjH,GAAIkE,MAAO+C,EAAG/C,MAAO7D,YAAa4G,EAAG5G,sB,GA/BzCuE,aCWvB+C,EAhBM,WACnB,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAI,aACf,kBAAC,EAAD,CAAQzH,KAAK,6CAAUD,KAAK,WAC5B,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAO0H,KAAI,wBACT,kBAAC,GAAD,UCfKC,G,OCMD,SAACtI,GAAwB,IAAD,EACV8D,oBAAS,GADC,mBAC7ByE,EAD6B,KACrBC,EADqB,KAWhCC,EAAO,GAKX,OAJKF,IACHE,EAAO,UAIP,oCACE,4BAAQvI,UAAU,kBAAkBwI,QAftB,WAChBF,GAAQ,KAeHxI,EAAM2I,YAET,yBAAKzI,UAAS,gBAAWuI,IACvB,yBAAKC,QAfQ,WACjBF,GAAQ,IAcsBtI,UAAU,gBAClC,8BAAUI,KAAK,WAEjB,yBAAKJ,UAAU,kBAAkBF,EAAM4I,cC5B1BC,E,4MACnBC,GAAK,IAAIzD,E,uDAGP,OADAzB,KAAKkF,GAAGjD,iBAEN,6BACE,kBAAC,EAAD,CAAQjF,KAAK,6CAAUD,KAAK,WAC5B,kBAAC,EAAD,CAAOgI,WAAW,8CAAlB,8F,GAPiCvD,a,mCCFpB2D,EAGnB,aAAgB,IAAD,gCAFEzF,oBAEF,OAIf0F,eAJe,uCAIE,WAAOhD,GAAP,SAAAzE,EAAA,sEACF,EAAK+B,eAAed,WAApB,kBAA0DwD,EAA1D,iBADE,mFAJF,2DAQfiD,eARe,uCAQE,WACf7I,EAAe4F,GADA,eAAAzE,EAAA,sEAGM,EAAK+B,eAAeT,YAApB,kBACRmD,EADQ,+BACwB5F,GAC3C,IALa,cAGT+D,EAHS,yBAORA,GAPQ,2CARF,wDACbP,KAAKN,eAAiB,IAAIxC,GCLfoI,ECMsC,SAAC,GAAiB,IAAhBlD,EAAe,EAAfA,UAAe,EACtClC,oBAAS,GAD6B,mBAC7DqF,EAD6D,KACpDC,EADoD,KAQ9DC,EAAQ,uCAAG,WAAOC,GAAP,eAAA/H,EAAA,6DACfO,QAAQC,IAAI,WAAYuH,GAClBxB,EAAc,IAAIiB,EAFT,SAGTjB,EAAWmB,eAAeK,EAAOlJ,MAAO4F,GAH/B,2CAAH,sDASd,OAAO,oCACL,4BAAQ9F,UAAW,SAAWwI,QAhBb,WACjBU,GAAW,KAeX,uJAGA,kBAAC,IAAD,CACE1E,MAAM,sHACN6E,UAAU,QACVC,UAAU,EACVC,QApBY,WACdL,GAAW,IAoBTD,QAASA,GAET,kBAAC,IAAD,CACE7I,KAAK,QACLoJ,OAAQ,WACRC,cAAe,CAAEC,UAAU,GAC3BP,SAAUA,EACVQ,eAnBiB,SAACC,GACtBhI,QAAQC,IAAI,UAAW+H,KAoBnB,kBAAC,IAAKrF,KAAN,CACEsF,MAAM,QACNzJ,KAAK,QACL0J,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,wJAEnC,kBAAC,IAAD,OAEF,kBAAC,IAAKzF,KAAN,KACE,kBAAC,IAAD,CAAQ0F,KAAK,UAAUC,SAAS,UAAhC,gHCjDKC,ECOyC,SAAC,GAAmB,IAAjBrE,EAAgB,EAAhBA,UAAgB,EAC3ClC,oBAAS,GADkC,mBAClEqF,EADkE,KACzDC,EADyD,OAEjCtF,qBAFiC,mBAElEwG,EAFkE,KAEpDC,EAFoD,KAmBzE,OATAtG,qBAAU,YACO,uCAAG,8BAAA1C,EAAA,6DACV2C,EAAM,IAAI6E,EADA,SAEK7E,EAAI8E,eAAehD,GAFxB,OAEV7B,EAFU,OAGhBoG,EAAgBpG,GAHA,2CAAH,qDAKfC,KACC,IAEI,oCACL,4BAAQlE,UAAW,SAAUwI,QAjBZ,WACjBU,GAAW,KAgBX,qLAGA,kBAAC,IAAD,CACE1E,MAAM,oGACN6E,UAAU,QACViB,MAAO,MACPhB,UAAU,EACVC,QAtBY,WACdL,GAAW,IAsBTD,QAASA,GAET,kBAAC,IAAD,CACEzI,KAAK,QACL2D,UAAQ,EACRC,WAAYgG,EACZ/F,WAAY,SAAAC,GAAI,OAAI,kBAAC,IAAKC,KAAN,KAAW,4BAAKD,EAAKiG,UAArB,IAAoC,2BAAIjG,EAAKpE,OAA7C,IAAwD,2BAAIoE,EAAKkG,aCjCvFC,EAA+B,CACnCnK,GAAI,GACJkE,MAAO,GACP7D,YAAa,GACb+J,QAAS,CACPpK,GAAI,GACJJ,MAAO,IAETwG,WAAY,CACV,CACEpG,GAAI,GACJK,YAAa,GACb6D,MAAO,2FCrBEmG,E,kDD2Bb,WAAY7K,GAAuB,IAAD,8BAChC,cAAMA,IAIR8H,WAAa,IAAIzC,EAHf,EAAK0C,MAAQ4C,EAFmB,E,gEAMb,IAAD,OACd/G,KAAK5D,MAAMgG,WACbpC,KAAKkE,WAAW/B,WAAWnC,KAAK5D,MAAMgG,WAAWtD,MAAK,SAACC,GACrD,EAAKsF,SAAStF,Q,+BAKV,IAAD,EAC8CiB,KAAKmE,MAAlDrD,EADD,EACCA,MAAO7D,EADR,EACQA,YAAyBiK,EADjC,EACqBlE,WAC5B,OACE,6BACE,kBAAC,EAAD,CAAQhG,KAAM8D,EAAO/D,KAAK,SAASE,YAAaA,IAC/C+C,KAAK5D,MAAMgG,UAAY,oCAAE,kBAAC,EAAD,CAAiBA,UAAWpC,KAAK5D,MAAMgG,YAAY,kBAAC,EAAD,CAAgBA,UAAWpC,KAAK5D,MAAMgG,aAAmB,GAEtI,yBAAK9F,UAAU,gBACZ4K,EAASrE,KAAI,SAACgB,EAAIsD,GACjB,OAAO,kBAAC,EAAD,CAAM7F,IAAK6F,EAAOvK,GAAIiH,EAAGjH,GAAIkE,MAAO+C,EAAG/C,MAAO7D,YAAa4G,EAAG5G,uB,GAxB5CuE,aElB/BuF,EAAgC,CACpCnK,GAAI,GACJkE,MAAO,GACP7D,YAAa,GACbkG,OAAQ,CACN,CACEvG,GAAI,GACJkE,MAAO,GACP7D,YAAa,KAGjBmK,QAAS,CACPxK,GAAI,GACJkE,MAAO,GACP7D,YAAa,KCtBFoK,E,kDD2Bb,WAAYjL,GAAwB,IAAD,8BACjC,cAAMA,IAIR8H,WAAa,IAAIzC,EAHf,EAAK0C,MAAQ4C,EAFoB,E,gEAMd,IAAD,OACd/G,KAAK5D,MAAMkG,YAActC,KAAK5D,MAAMgG,UACtCpC,KAAKkE,WACF7B,YAAYrC,KAAK5D,MAAMkG,WAAYtC,KAAK5D,MAAMgG,WAC9CtD,MAAK,SAACC,GACL,EAAKsF,SAAStF,MAEbb,QAAQ4D,MAAM,wQ,oCAIrB,OAAO9B,KAAKmE,MAAMhB,OAAON,KAAI,SAACgB,EAAIsD,GAChC,MAAc,SAAVtD,EAAGjH,GACE,GAGP,kBAAC,EAAD,CACE0E,IAAK6F,EACLvK,GAAIiH,EAAGjH,GACPgH,OAAO,UACP9C,MAAO+C,EAAG/C,MACV7D,YAAa4G,EAAG5G,mB,+BAOtB,IAAMqK,EAAQtH,KAAKuH,cADZ,EAEwBvH,KAAKmE,MAA5BrD,EAFD,EAECA,MAAO7D,EAFR,EAEQA,YACf,OACE,6BACE,kBAAC,EAAD,CAAQD,KAAM8D,EAAO/D,KAAK,SAASE,YAAaA,IAChD,yBAAKX,UAAU,gBAAgBgL,Q,GAxCD9F,aElBhCuF,EAA6B,CACjCnK,GAAI,GACJkE,MAAO,GACP7D,YAAa,GACbkD,MAAO,CACL,CACEvD,GAAI,GACJkE,MAAO,GACP7D,YAAa,MChBJuK,G,kDDsBb,WAAYpL,GAAqB,IAAD,8BAC9B,cAAMA,IAIR8H,WAAa,IAAIzC,EAHf,EAAK0C,MAAQ4C,EAFiB,E,gEAMX,IAAD,SACyB/G,KAAK5D,MAAxCgG,EADU,EACVA,UAAWE,EADD,EACCA,WAAYE,EADb,EACaA,QAC3BA,GAAWF,GAAcF,GAC3BpC,KAAKkE,WAAW3B,SAASH,EAAWE,EAAYE,GAAS1D,MAAK,SAACC,GAC7D,EAAKsF,SAAStF,Q,oCAMlB,GAAIiB,KAAKmE,MAAMhE,MACb,OAAOH,KAAKmE,MAAMhE,MAAM0C,KAAI,SAACgB,EAAIsD,GAC/B,OACE,kBAAC,EAAD,CACE7F,IAAKuC,EAAGjH,GACRA,GAAIiH,EAAGjH,GACPkE,MAAO+C,EAAG/C,MACV7D,YAAa4G,EAAG5G,YAChB2G,OAAO,iB,+BAQf,IAAM0D,EAAQtH,KAAKuH,cAEnB,OACE,6BACE,kBAAC,EAAD,CAAQvK,KAAMgD,KAAKmE,MAAMrD,MAAO/D,KAAK,SAASE,YAAa+C,KAAKmE,MAAMlH,cACtE,yBAAKX,UAAU,gBAAgBgL,Q,GAtCJ9F,aErBpBiG,I,cCmBC,SAACrL,GACf,IAAIsL,EAAe,CAAC,+NAiBpB,OAhBItL,EAAMuL,WACRD,EAAetL,EAAMuL,SAAS9E,KAAI,SAAC+E,EAAST,GAAW,IAAD,MACpD,OACE,yBAAK7F,IAAK6F,EAAO7K,UAAU,WACzB,6BACE,8BAAUI,KAAK,WADjB,UAEGkL,EAAQC,cAFX,aAEG,EAAgBrL,OAElBoL,EAAQ5K,KACT,uBAAGV,UAAU,gBAAgBqC,KAAI,UAAEiJ,EAAQE,YAAV,aAAE,EAActK,KAAjD,UACGoK,EAAQE,YADX,aACG,EAAc9K,WAOvB,yBAAKV,UAAU,QACb,kGACCoL,KCDQK,GA1BE,SAAC3L,GAChB,IAAI4L,EAAM,qCAEV,OAAQ5L,EAAMwH,QACZ,IAAK,YACHoE,EACE,4BAAQlD,QAAS1I,EAAM6L,YAAa3L,UAAU,mBAA9C,gEAQN,OACE,yBAAKA,UAAU,QACb,kBAAC,EAAD,CAAQsH,OAAQxH,EAAMwH,SACtB,wBAAItH,UAAU,eAAeF,EAAM0E,OACnC,uBAAGxE,UAAU,qBAAqBF,EAAMa,aACxC,yBAAKX,UAAU,cAAcF,EAAMY,MAClCgL,EACD,kBAAC,IAAD,CAAQE,QAAM,EAACpD,QAAS1I,EAAM+L,YAA9B,qFCjCeC,GAGnB,aAAgB,IAAD,gCAFE1I,oBAEF,OAIf6D,SAJe,uCAIJ,yCAAA5F,EAAA,6DACPmD,EADO,EACPA,MAAO7D,EADA,EACAA,YAAauG,EADb,EACaA,QAASzC,EADtB,EACsBA,YAAaqB,EADnC,EACmCA,UAAWE,EAD9C,EAC8CA,WAAYE,EAD1D,EAC0DA,QAD1D,kBAGF,EAAK9C,eAAeT,YAApB,kBACMmD,EADN,qBAC4BE,EAD5B,kBACgDE,EADhD,SAEL,CACE1B,QACA7D,cACAuG,UACAzC,iBATK,2CAJI,2DAiBfoH,WAjBe,uCAiBF,mCAAAxK,EAAA,6DAAQyE,EAAR,EAAQA,UAAWE,EAAnB,EAAmBA,WAAYE,EAA/B,EAA+BA,QAASE,EAAxC,EAAwCA,OAAxC,SACL,EAAKhD,eAAeH,cAApB,kBAA6C6C,EAA7C,qBAAmEE,EAAnE,kBAAuFE,EAAvF,iBAAuGE,IADlG,2CAjBE,sDACb1C,KAAKN,eAAiB,IAAIxC,GCHTmL,GAGnB,aAAgB,IAAD,gCAFE3I,oBAEF,OAIf0F,eAJe,uCAIE,WAAOhD,GAAP,SAAAzE,EAAA,sEACF,EAAK+B,eAAed,WAApB,kBAA0DwD,EAA1D,iBADE,mFAJF,2DAQfkG,cARe,uCAQC,uCAAA3K,EAAA,6DACZX,EADY,EACZA,KAAMoF,EADM,EACNA,UAAUE,EADJ,EACIA,WAAYE,EADhB,EACgBA,QAASE,EADzB,EACyBA,OADzB,SAGO,EAAKhD,eAAeT,YAApB,kBACRmD,EADQ,qBACcE,EADd,kBACkCE,EADlC,iBACkDE,EADlD,YAEnB,CACE1F,SANU,cAGRuD,EAHQ,yBASPA,GATO,2CARD,sDACbP,KAAKN,eAAiB,IAAIxC,GCNfqL,GCSsC,SAAC,GAA8C,IAA7CnG,EAA4C,EAA5CA,UAAWE,EAAiC,EAAjCA,WAAYE,EAAqB,EAArBA,QAASE,EAAY,EAAZA,OAC/E+C,EAAQ,uCAAG,WAAOC,GAAP,eAAA/H,EAAA,6DACfO,QAAQC,IAAI,WAAYuH,GAClB8C,EAAM,IAAIH,GAFD,SAGTG,EAAIF,cAAc,CAAEtL,KAAM0I,EAAO1I,KAAMoF,YAAWE,aAAYE,UAASE,WAH9D,2CAAH,sDAUd,OACE,kBAAC,IAAD,CACEhG,KAAK,QACL+I,SAAUA,EACVQ,eARmB,SAACC,GACtBhI,QAAQC,IAAI,UAAW+H,KAUrB,kBAAC,IAAKrF,KAAN,CACEnE,KAAK,OACL0J,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,kJAEnC,kBAAC,IAAD,OAEF,kBAAC,IAAKzF,KAAN,KACE,kBAAC,IAAD,CAAQ0F,KAAK,UAAUC,SAAS,UAAhC,6DCRFiC,GAA6B,CACjC7L,GAAI,GACJkE,MAAO,GACP7D,YAAa,GACbD,KAAM,GACN4G,OAAQ,UACR+D,SAAU,CACR,CACE3K,KAAM,GACN6K,OAAQ,CACNrL,MAAO,GACPI,GAAI,IAENkL,KAAM,CACJtK,IAAK,GACLR,KAAM,OCzCC0L,G,kDDgDb,WAAatM,GAAoB,IAAD,8BAC9B,cAAMA,IAIR8H,WAAa,IAAIzC,EALe,EAsBhCwG,YAAc,WACZxJ,OAAOkK,MAAM,wJAvBiB,EA0BhCR,WA1BgC,sBA0BnB,sCAAAxK,EAAA,2DACwC,EAAKvB,MAAhDgG,EADG,EACHA,UAAWE,EADR,EACQA,WAAYE,EADpB,EACoBA,QAASE,EAD7B,EAC6BA,SACpCN,GAAaE,GAAcE,GAAWE,GAF/B,uBAGH8F,EAAM,IAAIJ,GAHP,SAIHI,EAAIL,WAAW,CAAE/F,YAAWE,aAAYE,UAASE,WAJ9C,OAKTjE,OAAOmK,QAAQC,OALN,2CAxBX,EAAK1E,MAAQsE,GAFiB,E,gEAOV,IAAD,SACgCzI,KAAK5D,MAAhDgG,EADW,EACXA,UAAWE,EADA,EACAA,WAAYE,EADZ,EACYA,QAASE,EADrB,EACqBA,OACpCN,GAAaE,GAAcE,GAAWE,GACxC1C,KAAKkE,WAAWzB,QAAQL,EAAWE,EAAYE,EAASE,GAAQ5D,MAAK,SAACC,GACpE,EAAKsF,SAAS,CACZvD,MAAO/B,EAAI+B,MACX7D,YAAa8B,EAAI9B,YACjBD,KAAM+B,EAAIyE,QAAQxG,KAClB4G,OAAQ7E,EAAI6E,OACZ+D,SAAU5I,EAAI4I,gB,+BAoBpBzJ,QAAQC,IAAI6B,KAAKmE,OADT,MAE6BnE,KAAKmE,MAAlCrD,EAFA,EAEAA,MAAO7D,EAFP,EAEOA,YAAaD,EAFpB,EAEoBA,KAFpB,EAG2CgD,KAAK5D,MAAhDgG,EAHA,EAGAA,UAAWE,EAHX,EAGWA,WAAYE,EAHvB,EAGuBA,QAASE,EAHhC,EAGgCA,OACxC,OACE,6BACE,kBAAC,GAAD,CACE5B,MAAOA,EACP9D,KAAMA,EACNC,YAAaA,EACb2G,OAAQ5D,KAAKmE,MAAMP,OACnBqE,YAAajI,KAAKiI,YAClBE,WAAYnI,KAAKmI,aAElB/F,GAAaE,GAAcE,GAAWE,EAAS,kBAAC,GAAD,CAAeN,UAAWA,EAAWE,WAAYA,EAClCE,QAASA,EAASE,OAAQA,IAAY,GACrG,kBAAC,GAAD,CAASA,OAAQ1C,KAAK5D,MAAMsG,OAAQiF,SAAU3H,KAAKmE,MAAMwD,gB,GApD/BnG,aE/BnBsH,GAVE,SAAC1M,GAA2B,IAEnCsG,EAAWqG,cAAXrG,OAER,OACE,oCACE,kBAAC,GAAD,eAAMA,OAAQA,GAAYtG,MCUjB4M,GAhBG,SAAC,GAAgD,IAA9C5G,EAA6C,EAA7CA,UAAWE,EAAkC,EAAlCA,WACxByB,EAAQC,cACNxB,EAAYuG,cAAZvG,QACR,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOgC,OAAK,EAACC,KAAMV,EAAMvG,KACvB,kBAAC,GAAD,CAAO4E,UAAWA,EAAWE,WAAYA,EAAYE,QAASA,KAEhE,kBAAC,IAAD,CAAOiC,KAAI,UAAKV,EAAMvG,IAAX,aACT,kBAAC,GAAD,CAAU4E,UAAWA,EAAWE,WAAYA,EAAYE,QAASA,QCS5DyG,GAlBM,SAAC,GAAuC,IAArC7G,EAAoC,EAApCA,UAChB2B,EAAQC,cACN1B,EAAeyG,cAAfzG,WAER,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOkC,OAAK,EAACC,KAAMV,EAAMvG,KACvB,kBAAC,EAAD,CAAU4E,UAAWA,EAAWE,WAAYA,KAE9C,kBAAC,IAAD,CAAOmC,KAAI,UAAKV,EAAMvG,IAAX,cACT,kBAAC,GAAD,CAAW4E,UAAWA,EAAWE,WAAYA,QCDxC4G,GAdK,WAClB,IAAMnF,EAAQC,cACN5B,EAAc2G,cAAd3G,UACR,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOoC,OAAK,EAACC,KAAMV,EAAMvG,KACvB,kBAAC,EAAD,CAAS4E,UAAWA,KAEtB,kBAAC,IAAD,CAAOqC,KAAI,UAAKV,EAAMvG,IAAX,iBACT,kBAAC,GAAD,CAAc4E,UAAWA,OCmBlB+G,I,OAxBO,SAAC/M,GAAgC,IAC7CgN,EAAgChN,EAAhCgN,UAAWC,EAAqBjN,EAArBiN,iBACXC,EAA8ClN,EAA9CkN,iBAAkBC,EAA4BnN,EAA5BmN,wBAC1B,OACE,yBAAKjN,UAAU,wBACb,yBAAKA,UAAU,+BACb,uBAAGA,UAAU,+BAAb,oDACA,2BACEkN,MAAOJ,EACPK,SAAUH,EACVhN,UAAU,iCAId,uBAAGA,UAAU,+BAAb,oDACA,2BACEkN,MAAOH,EACPI,SAAUF,EACVjN,UAAU,mCCzBHoN,G,kDCUb,WAAYtN,GAAe,IAAD,8BACxB,cAAMA,IAOR8H,WAAa,IAAIzC,EARS,EAU1BkI,iBAAmB,SAACC,GAClB,EAAKvF,SAAS,CAAEvD,MAAO8I,EAAMC,cAAcL,SAXnB,EAa1BM,wBAA0B,SAACF,GACzB,EAAKvF,SAAS,CAAEpH,YAAa2M,EAAMC,cAAcL,SAdzB,EAgB1BO,SAhB0B,sBAgBf,gCAAApM,EAAA,wDACsB,EAAKwG,MAA5BrD,EADC,EACDA,MAAO7D,EADN,EACMA,YACX6D,GAAS7D,EACX,EAAKiH,WAAWd,YAAYtC,EAAO7D,GAAa6B,MAAK,SAACC,GAAD,OAASb,QAAQC,IAAIY,MACrEN,OAAOkK,MAAM,yFAJX,2CAdT,EAAKxE,MAAQ,CACXrD,MAAO,GACP7D,YAAa,IAJS,E,qDAuBxB,OACE,yBAAKX,UAAU,QACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,6BACb,4BACE,8BAAUI,KAAK,WADjB,wCAIA,6NACA,4BAAQJ,UAAU,kBAAkBwI,QAAS9E,KAAK+J,UAChD,8BAAUrN,KAAM,QADlB,oFAKF,kBAAC,GAAD,CACE0M,UAAWpJ,KAAKmE,MAAMrD,MACtBwI,iBAAkBtJ,KAAK2J,iBACvBN,iBAAkBrJ,KAAKmE,MAAMlH,YAC7BsM,wBAAyBvJ,KAAK8J,gC,GA1CDtI,aCyB1BwI,I,OAzBQ,SAAC5N,GAAiC,IAC/CgN,EAAgChN,EAAhCgN,UAAWC,EAAqBjN,EAArBiN,iBACXC,EAA8ClN,EAA9CkN,iBAAkBC,EAA4BnN,EAA5BmN,wBAC1B,OACE,oCACE,yBAAKjN,UAAU,+BACb,uBAAGA,UAAU,+BAAb,oDACA,2BACEkN,MAAOJ,EACPK,SAAUH,EACVhN,UAAU,iCAGd,yBAAKA,UAAU,+BACb,uBAAGA,UAAU,+BAAb,oDACA,2BACEkN,MAAOH,EACPI,SAAUF,EACVjN,UAAU,oCCkBL2N,GAlCO,SAAC7N,GAAgC,IAAD,EACpB8D,mBAAS,CAAC,CAAEtD,GAAI,GAAIkE,MAAO,2FADP,mBAC7CsD,EAD6C,KACnC8F,EADmC,KAG9ChG,EAAa,IAAIzC,EACjB0I,EAAQ,uCAAG,4BAAAxM,EAAA,sEACkBuG,EAAWvB,oBAD7B,OACT5D,EADS,OAEfmL,EAAYnL,GAFG,2CAAH,qDAUd,OALAsB,qBAAU,WACRnC,QAAQC,IAAI,MACZgM,MAEC,IAED,4BACE7N,UAAU,+BACVkN,MAAOpN,EAAMgO,eACbX,SAAUrN,EAAMiO,qBAEhB,4BAAQb,MAAM,GAAGc,QAAM,GAAvB,yFAGClG,EAASvB,KAAI,SAACnF,GACb,OACE,4BAAQ4D,IAAK5D,EAAKd,GAAI4M,MAAO9L,EAAKd,IAC/Bc,EAAKoD,YCQHyJ,GAjCQ,SAACnO,GAAgC,IAAD,EACnB8D,mBAAS,CAAC,CAAEtD,GAAI,GAAIkE,MAAO,MADR,mBAC9CkC,EAD8C,KAClCwH,EADkC,KAarD,OAVAnK,qBAAU,YACM,uCAAG,8BAAA1C,EAAA,6DACTuG,EAAa,IAAIzC,EADR,SAEmByC,EAAWpB,iBAAiB1G,EAAMgO,gBAFrD,QAETrL,EAFS,SAIbyL,EAAYzL,GAJC,2CAAH,qDAOdoL,KACC,CAAC/N,EAAMgO,iBAER,4BACE9N,UAAU,+BACVkN,MAAOpN,EAAMqO,gBACbhB,SAAUrN,EAAMsO,sBAEhB,4BAAQlB,MAAM,GAAGc,QAAM,GAAvB,6GAGCtH,EAAWH,KAAI,SAACqE,GACf,OACE,4BAAQ5F,IAAK4F,EAAStK,GAAI4M,MAAOtC,EAAStK,IACvCsK,EAASpG,YCUP6J,GAlCK,SAACvO,GAA8B,IACzCgO,EAAqEhO,EAArEgO,eAAgBK,EAAqDrO,EAArDqO,gBAAiBG,EAAoCxO,EAApCwO,aAAcC,EAAsBzO,EAAtByO,kBADP,EAEpB3K,mBAAS,CAAC,CAAEtD,GAAI,GAAIkE,MAAO,MAFP,mBAEzCqC,EAFyC,KAEjC2H,EAFiC,KAchD,OAVAzK,qBAAU,WACgB,KAApBoK,GACY,uCAAG,8BAAA9M,EAAA,6DACTuG,EAAa,IAAIzC,EADR,SAEgByC,EAAWjB,YAAYmH,EAAgBK,GAFvD,OAET1L,EAFS,OAGf+L,EAAU/L,GAHK,2CAAH,oDAKdoL,KAED,CAACM,EAAiBL,IAEnB,4BACE9N,UAAU,+BACVkN,MAAOoB,EACPnB,SAAUoB,GAEV,4BAAQrB,MAAM,GAAGc,QAAM,GAAvB,2GAGCnH,EAAON,KAAI,SAACnF,GACX,OACE,4BAAQ4D,IAAK5D,EAAKd,GAAI4M,MAAO9L,EAAKd,IAC/Bc,EAAKoD,YCvCHiK,G,kDCab,WAAY3O,GAAe,IAAD,8BACxB,cAAMA,IAOR8H,WAAa,IAAIzC,EARS,EAS1BkI,iBAAmB,SAACC,GAClB,EAAKvF,SAAS,CAAEvD,MAAO8I,EAAMC,cAAcL,SAVnB,EAY1BM,wBAA0B,SAACF,GACzB,EAAKvF,SAAS,CAAEpH,YAAa2M,EAAMC,cAAcL,SAbzB,EAe1BwB,oBAAsB,SAACC,GACrB,EAAK5G,SAAS,CAAEjC,UAAW6I,EAASpB,cAAcL,QAClDtL,QAAQC,IAAI8M,EAASpB,cAAcL,QAjBX,EAmB1BO,SAnB0B,sBAmBf,kCAAApM,EAAA,2DACiC,EAAKwG,MAAvCrD,EADC,EACDA,MAAO7D,EADN,EACMA,YAAamF,EADnB,EACmBA,YACxBtB,GAAS7D,GAAemF,GAFnB,gCAGD,EAAK8B,WAAWb,aAAavC,EAAO7D,EAAamF,GAHhD,2CAjBT,EAAK+B,MAAQ,CACXrD,MAAO,GACP7D,YAAa,GACbmF,UAAW,IALW,E,qDAyBhB,IAAD,EACmCpC,KAAKmE,MAAvC/B,EADD,EACCA,UAAWtB,EADZ,EACYA,MAAO7D,EADnB,EACmBA,YAClB0M,EAA6E3J,KAA7E2J,iBAAkBG,EAA2D9J,KAA3D8J,wBAAyBkB,EAAkChL,KAAlCgL,oBAAqBjB,EAAa/J,KAAb+J,SACxE,OACE,yBAAKzN,UAAU,QACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,6BACb,4BACE,8BAAUI,KAAK,WADjB,0DAIA,oOACA,4BAAQJ,UAAU,kBAAkBwI,QAASiF,GAC3C,8BAAUrN,KAAM,QADlB,sGAKF,yBAAKJ,UAAU,wBACb,kBAAC,GAAD,CAAe8N,eAAgBhI,EAAWiI,oBAAqBW,IAC/D,kBAAC,GAAD,CACE5B,UAAWtI,EACXwI,iBAAkBK,EAClBN,iBAAkBpM,EAClBsM,wBAAyBO,W,GAjDGtI,aCiB3B0J,I,OAtBK,SAAC9O,GACnB,OACE,oCACE,yBAAKE,UAAU,+BACb,uBAAGA,UAAU,+BAAb,oDACA,2BACEkN,MAAOpN,EAAMgN,UACbK,SAAUrN,EAAMkN,iBAChBhN,UAAU,iCAId,uBAAGA,UAAU,+BAAb,oDACA,2BACEkN,MAAOpN,EAAMiN,iBACbI,SAAUrN,EAAMmN,wBAChBjN,UAAU,mCCXZyK,GAAmC,CACvCjG,MAAO,GACP7D,YAAa,GACbmF,UAAW,GACXE,WAAY,IChBC6I,G,kDDoBb,WAAY/O,GAAe,IAAD,8BACxB,cAAMA,IAIRuN,iBAAmB,SAACC,GAClB,EAAKvF,SAAS,CAAEvD,MAAO8I,EAAMC,cAAcL,SANnB,EAS1BM,wBAA0B,SAACF,GACzB,EAAKvF,SAAS,CAAEpH,YAAa2M,EAAMC,cAAcL,SAVzB,EAa1BwB,oBAAsB,SAACC,GACrB,EAAK5G,SAAS,CAAEjC,UAAW6I,EAASpB,cAAcL,SAd1B,EAiB1B4B,qBAAuB,SAACH,GACtB,EAAK5G,SAAS,CAAE/B,WAAY2I,EAASpB,cAAcL,SAlB3B,EAqB1BtF,WAAa,IAAIzC,EArBS,EAuB1BsI,SAvB0B,sBAuBf,oCAAApM,EAAA,6DACTO,QAAQC,IAAI,0IACZD,QAAQC,IAAI,EAAKgG,OAFR,EAG6C,EAAKA,MAAnDrD,EAHC,EAGDA,MAAO7D,EAHN,EAGMA,YAAamF,EAHnB,EAGmBA,UAAWE,EAH9B,EAG8BA,WACvC7D,OAAOkK,MAAP,yJACiC,EAAKxE,MAAMrD,MAD5C,+DACgE,EAAKqD,MAAMlH,cALlE,SAOH,EAAKiH,WAAWZ,UAAUxC,EAAO7D,EAAamF,EAAWE,GAPtD,2CArBT,EAAK6B,MAAQ4C,GAFW,E,qDAgChB,IAAD,EACqD/G,KAAKmE,MAAlDzH,EADR,EACCoE,MAAa7D,EADd,EACcA,YAAamF,EAD3B,EAC2BA,UAAWE,EADtC,EACsCA,WAC7C,OACE,yBAAKhG,UAAU,QACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,6BACb,4BACE,8BAAUI,KAAK,WADjB,wCAIA,uNACA,4BAAQJ,UAAU,kBAAkBwI,QAAS9E,KAAK+J,UAChD,8BAAUrN,KAAM,QADlB,oFAKF,yBAAKJ,UAAU,wBACb,kBAAC,GAAD,CACE8N,eAAgBhI,EAChBiI,oBAAqBrK,KAAKgL,sBAE5B,kBAAC,GAAD,CACEZ,eAAgBhI,EAChBqI,gBAAiBnI,EACjBoI,qBAAsB1K,KAAKoL,uBAE7B,kBAAC,GAAD,CACEhC,UAAW1M,EACX2M,iBAAkBpM,EAClBqM,iBAAkBtJ,KAAK2J,iBACvBJ,wBAAyBvJ,KAAK8J,iC,GA/DLtI,a,mBEyBxB6J,GAlCI,SAACjP,GAA6B,IACvCgN,EAA2ChN,EAA3CgN,UAAWC,EAAgCjN,EAAhCiN,iBAAkBiC,EAAclP,EAAdkP,UAC7BhC,EAAkFlN,EAAlFkN,iBAAkBC,EAAgEnN,EAAhEmN,wBAAyBgC,EAAuCnP,EAAvCmP,iBAAkBC,EAAqBpP,EAArBoP,iBACrE,OACE,oCACE,yBAAKlP,UAAU,+BACb,uBAAGA,UAAU,+BAAb,oDACA,2BACEkN,MAAOJ,EACPK,SAAUH,EACVhN,UAAU,iCAGd,yBAAKA,UAAU,+BACb,uBAAGA,UAAU,+BAAb,oDACA,2BACEkN,MAAOH,EACPI,SAAUF,EACVjN,UAAU,iCAGd,kBAAC,KAAD,CAAYmN,SAAU+B,IACtB,yBAAKlP,UAAU,+BACb,uBAAGA,UAAU,+BAAb,uEACA,8BACEkN,MAAO8B,EACP7B,SAAU8B,EACVjP,UAAU,mC,oBCnBdmM,I,OAAiC,CACrC3H,MAAO,GACP7D,YAAa,GACbuG,QAAS,GACTzC,YAAa,KACbqB,UAAW,GACXE,WAAY,GACZE,QAAS,KCzBIiJ,G,kDD6Bb,WAAarP,GAAe,IAAD,8BACzB,cAAMA,IAIRuN,iBAAmB,SAACC,GAClB,EAAKvF,SAAS,CAAEvD,MAAO8I,EAAMC,cAAcL,SANlB,EAQ3BM,wBAA0B,SAACF,GACzB,EAAKvF,SAAS,CAAEpH,YAAa2M,EAAMC,cAAcL,SATxB,EAW3BkC,iBAAmB,SAAC9B,GAClB,EAAKvF,SAAS,CAAEb,QAASoG,EAAMC,cAAcL,SAZpB,EAe3BmC,wBAA0B,SAACC,GACzB,EAAKvH,SAAS,CAAEtD,YAAa8K,KAAOD,GAAME,OAAO,OACjD5N,QAAQC,IAAI0N,KAAOD,GAAME,OAAO,OAjBP,EAmB3Bd,oBAAsB,SAACC,GACrB,EAAK5G,SAAS,CAAEjC,UAAW6I,EAASpB,cAAcL,MAAOlH,WAAY,MApB5C,EAsB3B8I,qBAAuB,SAACH,GACtB,EAAK5G,SAAS,CAAE/B,WAAY2I,EAASpB,cAAcL,SAvB1B,EAyB3BuC,kBAAoB,SAACd,GACnB,EAAK5G,SAAS,CAAE7B,QAASyI,EAASpB,cAAcL,SA1BvB,EA4B3BtF,WAAa,IAAIkE,GA5BU,EA6B3B2B,SA7B2B,sBA6BhB,0CAAApM,EAAA,+DAC4E,EAAKwG,MAAlFrD,EADC,EACDA,MAAO7D,EADN,EACMA,YAAauG,EADnB,EACmBA,QAASpB,EAD5B,EAC4BA,UAAWE,EADvC,EACuCA,WAAYE,EADnD,EACmDA,QAASzB,EAD5D,EAC4DA,YAD5D,SAEH,EAAKmD,WAAWX,SAAS,CAAEzC,QAAO7D,cAAauG,UAASpB,YAAWE,aAAYE,UAASzB,gBAFrF,2CA3BT,EAAKoD,MAAQsE,GAFY,E,qDAmChB,IAAD,EACgEzI,KAAKmE,MAArErD,EADA,EACAA,MAAO7D,EADP,EACOA,YAAauG,EADpB,EACoBA,QAASpB,EAD7B,EAC6BA,UAAWE,EADxC,EACwCA,WAAYE,EADpD,EACoDA,QAC5D,OACE,yBAAKlG,UAAU,QACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,6BACb,4BACE,8BAAUI,KAAK,kBADjB,wCAIA,uNACA,4BAAQJ,UAAU,kBAAkBwI,QAAS9E,KAAK+J,UAChD,8BAAUrN,KAAK,QADjB,oFAKF,yBAAKJ,UAAU,wBACb,kBAAC,GAAD,CACE8N,eAAgBhI,EAChBiI,oBAAqBrK,KAAKgL,sBAE5B,kBAAC,GAAD,CACEP,gBAAiBnI,EACjB8H,eAAgBhI,EAChBsI,qBAAsB1K,KAAKoL,uBAE7B,kBAAC,GAAD,CACEX,gBAAiBnI,EACjB8H,eAAgBhI,EAChBwI,aAAcpI,EACdqI,kBAAmB7K,KAAK+L,oBAE1B,kBAAC,GAAD,CACE3C,UAAWtI,EACXuI,iBAAkBpM,EAClBqO,UAAW9H,EACX8F,iBAAkBtJ,KAAK2J,iBACvBJ,wBAAyBvJ,KAAK8J,wBAC9ByB,iBAAkBvL,KAAK0L,iBACvBF,iBAAkBxL,KAAK2L,iC,GA3ECnK,aE5BvBwK,I,OCEG,WAChB,IAAMjI,EAAQC,cAEd,OACE,yBAAK1H,UAAU,QACb,kBAAC,IAAD,CAAMA,UAAU,aAAaD,GAAE,UAAK0H,EAAMvG,MAA1C,mFAGA,kBAAC,IAAD,CAAMlB,UAAU,aAAaD,GAAE,UAAK0H,EAAMvG,IAAX,cAA/B,qGAGA,kBAAC,IAAD,CAAMlB,UAAU,aAAaD,GAAE,UAAK0H,EAAMvG,IAAX,WAA/B,mFAGA,kBAAC,IAAD,CAAMlB,UAAU,aAAaD,GAAE,UAAK0H,EAAMvG,IAAX,UAA/B,sFCgBSyO,GAzBI,WACjB,IAAMlI,EAAQC,cAEd,OADA9F,QAAQC,IAAR,UAAe4F,EAAMvG,IAArB,cAEE,oCACE,kBAAC,EAAD,CAAQR,KAAK,6CAAUD,KAAK,eAC5B,kBAAC,GAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOyH,OAAK,EAACC,KAAI,UAAKV,EAAMvG,MAC1B,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAOiH,KAAI,UAAKV,EAAMvG,IAAX,cACT,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAOiH,KAAI,UAAKV,EAAMvG,IAAX,WACT,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAOiH,KAAI,UAAKV,EAAMvG,IAAX,UACT,kBAAC,GAAD,UCSK0O,GA1BO,WACpB,OACE,yBAAK5P,UAAU,OACb,kBAAC,IAAD,CAAQ6P,SAAS,QACf,kBAAC,EAAD,MACA,yBAAK7P,UAAU,WACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOmI,KAAK,IAAID,OAAK,GACnB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOC,KAAK,WACV,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,aACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,YACV,kBAAC,EAAD,YCrBd2H,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.6abb0c8f.chunk.js","sourcesContent":["export enum Method {\r\n  Get = 'GET',\r\n  Post = 'POST',\r\n  Put = 'PUT',\r\n  Patch = 'PATCH',\r\n  Delete = 'DELETE'\r\n\r\n}","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\ninterface NavigationUserProps {\r\n  userName: string;\r\n  id: string;\r\n  email: string;\r\n}\r\n\r\nconst NavigationUser = (props: NavigationUserProps) => {\r\n  return (\r\n    <Link to=\"/profile\">\r\n      <div className=\"menu__user\">\r\n        <div className=\"menu__user__name\">{props.userName}</div>\r\n        <div className=\"menu__user__email\">{props.email}</div>\r\n      </div>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default NavigationUser;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst NavigationItems = () => {\r\n  return (\r\n    <>\r\n      <div className=\"menu__item\">\r\n        <Link to=\"/create\">\r\n          <ion-icon name=\"add-circle\"></ion-icon>Создать\r\n        </Link>\r\n      </div>\r\n      <div className=\"menu__item  \">\r\n        <Link to=\"/\">\r\n          <ion-icon name=\"document\"></ion-icon>Мои задачи\r\n        </Link>\r\n      </div>\r\n      <div className=\"menu__item\">\r\n        <Link to=\"/projects\">\r\n          <ion-icon name=\"folder\"></ion-icon>Проекты\r\n        </Link>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NavigationItems;\r\n","import Navigation from \"./navigation\";\r\n\r\nexport default Navigation;\r\n","import React from \"react\";\r\nimport \"./navigation.css\";\r\nimport NavigationUser from \"./navigation-user\";\r\nimport NavigationItems from \"./navigation-items\";\r\n\r\n//!Реализовать раскрывающиеся пункты, с подгрузкой данных с сервера.\r\nconst Navigation = () => {\r\n  return (\r\n    <nav className=\"menu\">\r\n      <NavigationUser id=\"gg\" userName=\"Иванов Иван\" email=\"ivanov-super-star@mail.ru\" />\r\n      <NavigationItems />\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","import Header from \"./header\";\r\n\r\nexport default Header;\r\n","import React, { Fragment } from \"react\";\r\n\r\nimport \"./header.css\";\r\n\r\nexport interface HeaderProps {\r\n  size?: \"middle\" | \"small\" | undefined;\r\n  icon: string | undefined;\r\n  text: string | undefined;\r\n  description?: string;\r\n}\r\n\r\nconst Header: React.FC<HeaderProps> = props => {\r\n  let size: string = \"\";\r\n  switch (props.size) {\r\n    case \"middle\":\r\n      size = \"middle\";\r\n      break;\r\n    case \"small\":\r\n      size = \"small\";\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return (\r\n    <Fragment>\r\n      <h1 className={`header ${size}`}>\r\n        <ion-icon name={props.icon} />\r\n        {props.text}\r\n      </h1>\r\n      <p className=\"header__description\">{props.description}</p>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default Header;\r\n","import { Method } from '../types/service-types';\r\nimport Cookies from 'js-cookie';\r\n\r\nexport interface IRequestService {\r\n  getRequest: <T>(url: string) => Promise<T>,\r\n  postRequest: <T>(url: string, data: T) => void\r\n  putRequest: <T>(url: string, data: T) => void\r\n  patchRequest: <T>(url: string, data: T) => void\r\n  deleteRequest: <T>(url: string) => void\r\n}\r\n\r\nexport default class RequestService implements IRequestService {\r\n\r\n  private readonly requestHeaders: HeadersInit = {\r\n    'Content-Type': 'application/json',\r\n    Authorization: `Bearer ${Cookies.get(\"jwt\")}`,\r\n  };\r\n\r\n  private Request = async <T> (url: string, method: Method, data?: T): Promise<Response> => {\r\n    const response = await fetch(`http://localhost:8080/api/user/${Cookies.get(\"userId\")}/${url}`, {\r\n      method,\r\n      headers: this.requestHeaders,\r\n      body: JSON.stringify(data),\r\n    });\r\n    console.log(response)\r\n    if (!response.ok) throw new Error('Ошибка');\r\n\r\n    return response;\r\n  };\r\n\r\n  private Unauthorized = () => {\r\n    localStorage.removeItem('jwt');\r\n    window.location.href = 'login';\r\n  };\r\n\r\n  getRequest = async <T> (url: string): Promise<T> => {\r\n    return await this.Request(url, Method.Get).then(res => res.json());\r\n  };\r\n\r\n  postRequest = async <T> (url: string, data: T) => {\r\n    await this.Request<T>(url, Method.Post, data);\r\n  };\r\n\r\n  putRequest = async <T> (url: string, data: T) => {\r\n    await this.Request<T>(url, Method.Put, data);\r\n  };\r\n  patchRequest = async <T> (url: string, data: T) => {\r\n    await this.Request<T>(url, Method.Patch, data);\r\n  };\r\n  deleteRequest = async <T> (url: string) => {\r\n    await this.Request<T>(url, Method.Delete);\r\n  };\r\n}\r\n","import RequestService, { IRequestService } from './request';\r\nimport { ITask } from '../types/model-types';\r\n\r\nexport default class DashboardService {\r\n  private readonly requestService: IRequestService;\r\n\r\n  constructor () {\r\n    this.requestService = new RequestService();\r\n  }\r\n\r\n  getAllTasks = async () => {\r\n    return await this.requestService.getRequest<any>('project/all');\r\n  }\r\n\r\n  getTodayTasks = async () => {\r\n    return await this.requestService.getRequest<ITask[]>('project/today')\r\n  }\r\n\r\n  getWeekTasks = async () => {\r\n    return await this.requestService.getRequest<ITask[]>('project/week')\r\n  }\r\n\r\n  getOutDateTasks = async () => {\r\n      return await this.requestService.getRequest<any>('project/outdate')\r\n  }\r\n\r\n  getStatistic = async ()=>{\r\n    return await this.requestService.getRequest<any>('project/')\r\n  }\r\n}","import TodayTasks from './today-tasks';\r\n\r\nexport default TodayTasks;","import React, { useEffect, useState } from 'react';\r\nimport DashboardService from '../../services/dashboard-service';\r\nimport { ITask } from '../../types/model-types';\r\nimport { List } from 'antd';\r\n\r\nconst TodayTasks = () => {\r\n  const [tasks, setTasks] = useState<ITask[]>();\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const Api = new DashboardService();\r\n      const result = await Api.getTodayTasks();\r\n      setTasks(result);\r\n    };\r\n    fetchData();\r\n  }, []);\r\n  return <List\r\n    size=\"large\"\r\n    bordered\r\n    dataSource={tasks}\r\n    renderItem={item => <List.Item><h2>{item.title}</h2> <p>{item.description}</p> <p>{item.expiredDate}</p>\r\n    </List.Item>}\r\n  />;\r\n};\r\n\r\nexport default TodayTasks;","import WeekTasks from './week-tasks';\r\n\r\nexport default WeekTasks;","import React, { useEffect, useState } from 'react';\r\nimport DashboardService from '../../services/dashboard-service';\r\nimport { List } from 'antd';\r\nimport { ITask } from '../../types/model-types';\r\n\r\nconst WeekTasks = () => {\r\n\r\n  const [tasks, setTasks] = useState<ITask[]>();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const Api = new DashboardService();\r\n      const result = await Api.getWeekTasks();\r\n      setTasks(result);\r\n    };\r\n    fetchData();\r\n  }, []);\r\n  return <List\r\n    size=\"large\"\r\n    bordered\r\n    dataSource={tasks}\r\n    renderItem={item => <List.Item><h2>{item.title}</h2> <p>{item.description}</p> <p>{item.expiredDate}</p>\r\n    </List.Item>}\r\n  />\r\n};\r\n\r\nexport default WeekTasks;","import OutDateTasks from './outdate-tasks';\r\n\r\nexport default OutDateTasks;","import React, { useEffect, useState } from 'react';\r\nimport DashboardService from '../../services/dashboard-service';\r\nimport { List } from 'antd';\r\nimport { ITask } from '../../types/model-types';\r\n\r\nconst OutDateTasks = () => {\r\n  const [tasks, setTasks] = useState<ITask[]>();\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const Api = new DashboardService();\r\n      const result = await Api.getOutDateTasks();\r\n      setTasks(result);\r\n    };\r\n    fetchData();\r\n  }, []);\r\n  return <List\r\n    size=\"large\"\r\n    bordered\r\n    dataSource={tasks}\r\n    renderItem={item => <List.Item><h2>{item.title}</h2> <p>{item.description}</p> <p>{item.expiredDate}</p>\r\n    </List.Item>}\r\n  />\r\n};\r\n\r\nexport default OutDateTasks;","import Dashboard from './dashboard';\r\n\r\nexport default Dashboard;","import React from 'react';\r\nimport { Tabs } from 'antd';\r\nimport AllTasks from '../all-tasks';\r\nimport TodayTasks from '../today-tasks';\r\nimport WeekTasks from '../week-tasks';\r\nimport OutDateTasks from '../outdate-tasks';\r\n\r\nconst Dashboard = ()=>{\r\n  return  <Tabs defaultActiveKey=\"1\">\r\n    <Tabs.TabPane tab=\"Задачи на сегодня\" key=\"1\">\r\n      <TodayTasks/>\r\n    </Tabs.TabPane>\r\n    <Tabs.TabPane tab=\" Задачи на неделю\" key=\"2\">\r\n      <WeekTasks/>\r\n    </Tabs.TabPane>\r\n    <Tabs.TabPane tab=\" Просроченные задачи\" key=\"3\">\r\n      <OutDateTasks/>\r\n    </Tabs.TabPane>\r\n  </Tabs>\r\n}\r\n\r\nexport default Dashboard","import React, { Component } from \"react\";\r\nimport Header from \"../header\";\r\nimport Dashboard from '../Dashboard';\r\n\r\nexport default class DashboardPage extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header text=\"Актуальные задачи\" icon=\"bar-chart\"></Header>\r\n        <Dashboard/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import axios from \"axios\";\r\nimport Cookies from \"js-cookie\";\r\nimport { IProject } from \"../components/projects/projects\";\r\nimport { IProjectMin } from \"../components/forms/form-select/select-project\";\r\nimport { ICategoryMin } from \"../components/forms/form-select/select-category\";\r\nimport { IGroupMin } from \"../components/forms/form-select/select-group\";\r\n\r\ninterface ICreator {\r\n  id: string;\r\n  email: string;\r\n}\r\nexport interface IProjectExtend {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  creator: ICreator;\r\n  categories: ICategory[];\r\n}\r\n\r\ninterface ICategory {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n}\r\n\r\nexport interface ICategoryExtend {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  groups: IGroup[];\r\n  project: IProject;\r\n}\r\n\r\ninterface IGroup {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n}\r\n\r\nexport interface IGroupExtend {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  tasks: ITask[];\r\n}\r\n\r\ninterface ITask {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n}\r\n\r\nexport interface ITaskExtend {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  expiredDate: Date,\r\n  status: string,\r\n  createDate: Date,\r\n  content: {\r\n    text: string;\r\n  };\r\n  comments: IComment[];\r\n}\r\n\r\ninterface IComment {\r\n  id: string;\r\n  text: string;\r\n  author: ICreator;\r\n}\r\n\r\nexport default class ApiService {\r\n  private GetRequest = async (url: string) => {\r\n    return axios\r\n      .get(`http://127.0.0.1:8080/api/user/${Cookies.get(\"userId\")}/project${url}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${Cookies.get(\"jwt\")}`,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        return res.data;\r\n      })\r\n      .catch((e) => console.error(e + \"какая-то херня\"));\r\n  };\r\n  private PostRequest = async (url: string, data: object) => {\r\n    return axios.post(\r\n      `http://localhost:8080/api/user/${Cookies.get(\"userId\")}/project${url}`,\r\n      data,\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${Cookies.get(\"jwt\")}`,\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      },\r\n    );\r\n  };\r\n\r\n  //*Получение всех проектов пользователя\r\n  getAllProjects = async (): Promise<IProject[]> => {\r\n    const results: IProject[] = await this.GetRequest(``);\r\n    return results;\r\n  };\r\n\r\n  //*Получение данных преокта  и списка категорий по id проекта\r\n  getProject = async (projectId: string): Promise<IProjectExtend> => {\r\n    const result: IProjectExtend = await this.GetRequest(`/${projectId}`);\r\n    return result;\r\n  };\r\n\r\n  //*Получение данных категории и списка групп по id категории\r\n  getCategory = async (projectId: string, categoryId: string): Promise<ICategoryExtend> => {\r\n    const result: ICategoryExtend = await this.GetRequest(`/${projectId}/category/${categoryId}`);\r\n    return result;\r\n  };\r\n\r\n  //*Получение данных группы и списка задач по id группы\r\n  getGroup = async (\r\n    projectId: string,\r\n    categoryId: string,\r\n    groupId: string,\r\n  ): Promise<IGroupExtend> => {\r\n    const result: IGroupExtend = await this.GetRequest(\r\n      `/${projectId}/category/${categoryId}/group/${groupId}`,\r\n    );\r\n    return result;\r\n  };\r\n\r\n  //*Получение данных задачи и списка коментариев\r\n  getTask = async (\r\n    projectId: string,\r\n    categoryId: string,\r\n    groupId: string,\r\n    taskId: string,\r\n  ): Promise<ITaskExtend> => {\r\n    const result: ITaskExtend = await this.GetRequest(\r\n      `/${projectId}/category/${categoryId}/group/${groupId}/task/${taskId}`,\r\n    );\r\n    return result;\r\n  };\r\n\r\n  //*Получение массива всех проектов в виде [{id, title}]\r\n  getAllProjectsMin = async (): Promise<IProjectMin[]> => {\r\n    const fullProjects: IProject[] = await this.getAllProjects();\r\n    const result: IProjectMin[] = fullProjects.map((res) => {\r\n      return { id: res.id, title: res.title };\r\n    });\r\n    return result;\r\n  };\r\n\r\n  //*Получение массива всех категорий в виде [{id, title}]\r\n  getCategoriesMin = async (id: string): Promise<ICategoryMin[]> => {\r\n    const fullProject: IProjectExtend = await this.getProject(id);\r\n    const result: ICategoryMin[] = fullProject.categories;\r\n    return result;\r\n  };\r\n\r\n  //*Получение массива всех групп в виде [{id, title}]\r\n  getGroupMin = async (projectId: string, categoryId: string) => {\r\n    const fullCategory: ICategoryExtend = await this.getCategory(projectId, categoryId);\r\n    const result: IGroupMin[] = fullCategory.groups;\r\n    console.log(result);\r\n    return result;\r\n  };\r\n\r\n  //*Создание нового проекта\r\n  saveProject = async (title: string, description: string) => {\r\n    const result = await this.PostRequest(\"\", {\r\n      title,\r\n      description,\r\n    });\r\n    return result;\r\n  };\r\n\r\n  //*Создание новой категории\r\n  saveCategory = async (title: string, description: string, projectId: string) => {\r\n    const result = await this.PostRequest(`/${projectId}/category`, {\r\n      title,\r\n      description,\r\n    });\r\n    return result;\r\n  };\r\n\r\n  //*Создание новой группы\r\n  saveGroup = async (title: string, description: string, projectId: string, categoryId: string) => {\r\n    const result = await this.PostRequest(`/${projectId}/category/${categoryId}/group`, {\r\n      title,\r\n      description,\r\n    });\r\n    return result;\r\n  };\r\n\r\n  //*Создание новой задачи\r\n  saveTask = async (\r\n    title: string,\r\n    description: string,\r\n    content: string,\r\n    projectId: string,\r\n    categoryId: string,\r\n    groupId: string,\r\n  ) => {\r\n    const result = await this.PostRequest(\r\n      `/${projectId}/category/${categoryId}/group/${groupId}/task`,\r\n      {\r\n        title,\r\n        description,\r\n        content,\r\n        expiredDate: \"13.06.2020\"\r\n      },\r\n    );\r\n    return result;\r\n  };\r\n  getUser = async (id?: string) => {\r\n    return this._userMin;\r\n  };\r\n\r\n  _userMin = {\r\n    id: \"00\",\r\n    name: \"Иванов Иван\",\r\n    email: \"ivanov.ivan@mail.ey\",\r\n  };\r\n}\r\n","import Status from \"./status\";\r\n\r\nexport default Status;\r\n","import React from \"react\";\r\n\r\nimport \"./status.css\";\r\n\r\nexport type statusType =\r\n  | \"completed\"\r\n  | \"performed\"\r\n  | \"available\"\r\n  | \"not_available\"\r\n  | undefined\r\n  | \"unknown\";\r\n\r\ninterface IStatusProps {\r\n  status: statusType;\r\n}\r\n\r\nconst Status = (props: IStatusProps) => {\r\n  const { status } = props;\r\n  let el = <span></span>;\r\n  switch (status) {\r\n    case \"available\":\r\n      el = (\r\n        <span className=\"status_available\">\r\n          <ion-icon name=\"ellipse\" />\r\n          Доступно\r\n        </span>\r\n      );\r\n      break;\r\n    case \"completed\":\r\n      el = (\r\n        <span className=\"status_complated\">\r\n          <ion-icon name=\"checkmark\" />\r\n          Завершено\r\n        </span>\r\n      );\r\n      break;\r\n    case \"performed\":\r\n      el = (\r\n        <span className=\"status_performed\">\r\n          {\" \"}\r\n          <ion-icon name=\"sync\" />\r\n          Выполняется\r\n        </span>\r\n      );\r\n      break;\r\n    case \"not_available\":\r\n      el = (\r\n        <span className=\"status_not-available\">\r\n          <ion-icon name=\"close\" />\r\n          Недоступно\r\n        </span>\r\n      );\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return <div className=\"status\">{el}</div>;\r\n};\r\n\r\nexport default Status;\r\n","import Card from \"./card\";\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport \"./card.css\";\r\nimport { Link, useRouteMatch } from \"react-router-dom\";\r\nimport Status from \"../status\";\r\n\r\n//Добавить deadline\r\ninterface CardProps {\r\n  id: string | undefined;\r\n  title: string | undefined;\r\n  description: string | undefined;\r\n  status?: \"completed\" | \"performed\" | \"available\" | \"not_available\" | \"unknown\";\r\n}\r\n\r\nconst Card: React.FC<CardProps> = props => {\r\n  const match = useRouteMatch();\r\n\r\n  const { title, description, id = \"\", status = \"unknown\" } = props;\r\n  return (\r\n    <Link to={`${match.url}/${id}`}>\r\n      <div className=\"card\">\r\n        <Status status={status} />\r\n\r\n        <h2 className=\"card__title\">{title}</h2>\r\n        <p className=\"card__description\">{description}</p>\r\n        <button className=\"card__button\">Подробнее</button>\r\n      </div>\r\n    </Link>\r\n  );\r\n};\r\nexport default Card;\r\n","import Projects from \"./projects\";\r\n\r\nexport default Projects;\r\n","import React, { Component } from \"react\";\r\nimport ApiService from \"../../services/api-service\";\r\nimport Card from \"../card\";\r\n\r\nexport interface IProject {\r\n  id: string;\r\n  title: string;\r\n  description: string | undefined;\r\n}\r\ninterface IProjectsState {\r\n  projects: IProject[];\r\n}\r\n\r\nexport default class Projects extends Component<{}, IProjectsState> {\r\n  constructor(props: {}) {\r\n    super(props);\r\n    this.state = {\r\n      projects: [\r\n        {\r\n          id: \"\",\r\n          title: \"\",\r\n          description: \"\",\r\n        },\r\n      ],\r\n    };\r\n  }\r\n  //Запрос на сервер\r\n  apiService = new ApiService();\r\n  componentDidMount() {\r\n    this.apiService.getAllProjects().then((res: IProject[]) => {\r\n      if (res) {\r\n        this.setState({ projects: res });\r\n      } else console.error(\"Ошибка\");\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { projects } = this.state;\r\n    if (projects.length === 0) {\r\n      return <p>gg</p>;\r\n    }\r\n    return (\r\n      <div className=\"flex-wrapper\">\r\n        {projects.map((el: IProject) => {\r\n          return <Card key={el.id} id={el.id} title={el.title} description={el.description} />;\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Header from \"../header\";\r\nimport { ProjectItemPage } from \".\";\r\n\r\nimport { Switch, Route } from \"react-router-dom\";\r\n\r\nimport Projects from \"../projects\";\r\n\r\nconst ProjectsPage = () => {\r\n  return (\r\n    <div>\r\n      <Switch>\r\n        <Route exact path={`/projects`}>\r\n          <Header text=\"Проекты\" icon=\"folder\"></Header>\r\n          <Projects />\r\n        </Route>\r\n        <Route path={`/projects/:projectId`}>\r\n          <ProjectItemPage />\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProjectsPage;\r\n","import Modal from \"./modal\";\r\n\r\nexport default Modal;\r\n","import React, { useState, ReactChild } from \"react\";\r\nimport \"./modal.css\";\r\n\r\ninterface IModalProps {\r\n  buttonText: string;\r\n  children?: ReactChild;\r\n}\r\n\r\nconst Modal = (props: IModalProps) => {\r\n  const [isOpen, setOpen] = useState(false);\r\n\r\n  const openModal = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  let open = \"\";\r\n  if (!isOpen) {\r\n    open = \"hidden\";\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <button className=\"button green-bg\" onClick={openModal}>\r\n        {props.buttonText}\r\n      </button>\r\n      <div className={`modal ${open}`}>\r\n        <div onClick={closeModal} className=\"modal__close\">\r\n          <ion-icon name=\"close\" />\r\n        </div>\r\n        <div className=\"modal__content\">{props.children}</div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import React, { Component } from \"react\";\r\nimport Header from \"../header\";\r\nimport Modal from \"../modal\";\r\nimport ApiService from \"../../services/api-service\";\r\n\r\nexport default class ProfilePage extends Component {\r\n  dd = new ApiService();\r\n  render() {\r\n    this.dd.getAllProjects();\r\n    return (\r\n      <div>\r\n        <Header text=\"Профиль\" icon=\"person\"></Header>\r\n        <Modal buttonText=\"Открыть\">Рандомный текст</Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import RequestService, { IRequestService } from './request';\r\nimport { IParticipant } from '../types/model-types';\r\n\r\nexport default class ApiParticipantService {\r\n  private readonly requestService: IRequestService;\r\n\r\n  constructor () {\r\n    this.requestService = new RequestService();\r\n  }\r\n\r\n  getParticipant = async (projectId: string) => {\r\n    return await this.requestService.getRequest<IParticipant[]>(`project/${projectId}/participant`)\r\n  };\r\n\r\n  addParticipant = async (\r\n    email: string, projectId: string,\r\n  ) => {\r\n    const result = await this.requestService.postRequest<any>(\r\n      `project/${projectId}/participant/?email=${email}`,\r\n      {},\r\n    );\r\n    return result;\r\n  };\r\n}","import AddParticipant from './add-participant';\r\n\r\nexport default AddParticipant","import React, { useState } from 'react';\r\nimport { Button, Drawer, Form, Input } from 'antd';\r\nimport ApiParticipantService from '../../services/api-participant-service';\r\n\r\ninterface AddParticipantProps {\r\n  projectId: string\r\n}\r\n\r\nconst AddParticipant:React.FC<AddParticipantProps> = ({projectId}) => {\r\n  const [visible, setVisible] = useState(false);\r\n  const showDrawer = () => {\r\n    setVisible(true);\r\n  };\r\n  const onClose = () => {\r\n    setVisible(false);\r\n  };\r\n  const onFinish = async (values:any) => {\r\n    console.log('Success:', values);\r\n    const apiService =  new ApiParticipantService();\r\n    await apiService.addParticipant(values.email, projectId)\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo:any) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n  return <>\r\n    <button className={\"button\"}  onClick={showDrawer}>\r\n      Добавить участника в проект\r\n    </button>\r\n    <Drawer\r\n      title=\"Добавление участника\"\r\n      placement=\"right\"\r\n      closable={false}\r\n      onClose={onClose}\r\n      visible={visible}\r\n    >\r\n      <Form\r\n        name=\"basic\"\r\n        layout={\"vertical\"}\r\n        initialValues={{ remember: true }}\r\n        onFinish={onFinish}\r\n        onFinishFailed={onFinishFailed}\r\n      >\r\n        <Form.Item\r\n          label=\"Email\"\r\n          name=\"email\"\r\n          rules={[{ required: true, message: 'Введите email участника проекта' }]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item >\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            Добавить участника\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </Drawer>\r\n  </>;\r\n};\r\n\r\nexport default AddParticipant;","import ParticipantList from './participant-list';\r\n\r\nexport default ParticipantList;","import React, { useEffect, useState } from 'react';\r\nimport { Drawer, List } from 'antd';\r\nimport { IParticipant } from '../../types/model-types';\r\nimport ApiParticipantService from '../../services/api-participant-service';\r\n\r\ninterface ParticipantListProps {\r\n  projectId: string\r\n}\r\n\r\nconst ParticipantList: React.FC<ParticipantListProps> = ({ projectId }) => {\r\n  const [visible, setVisible] = useState(false);\r\n  const [participants, setParticipants] = useState<IParticipant[]>();\r\n  const showDrawer = () => {\r\n    setVisible(true);\r\n  };\r\n  const onClose = () => {\r\n    setVisible(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const Api = new ApiParticipantService();\r\n      const result = await Api.getParticipant(projectId);\r\n      setParticipants(result);\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  return <>\r\n    <button className={'button'} onClick={showDrawer}>\r\n      Показать всех участников проекта\r\n    </button>\r\n    <Drawer\r\n      title=\"Список участников\"\r\n      placement=\"right\"\r\n      width={\"600\"}\r\n      closable={false}\r\n      onClose={onClose}\r\n      visible={visible}\r\n    >\r\n      <List\r\n        size=\"large\"\r\n        bordered\r\n        dataSource={participants}\r\n        renderItem={item => <List.Item><h2>{item.username}</h2> <p>{item.email}</p> <p>{item.role}</p></List.Item>}>\r\n      </List>\r\n    </Drawer>\r\n  </>;\r\n};\r\n\r\nexport default ParticipantList;","import React, { Component } from \"react\";\r\nimport ApiService, { IProjectExtend } from \"../../services/api-service\";\r\nimport Card from \"../card\";\r\nimport Header from \"../header\";\r\nimport AddParticipant from '../add-participant';\r\nimport ParticipantList from '../participant-list';\r\n\r\ninterface IProjectProps {\r\n  projectId: string | undefined;\r\n}\r\n\r\nconst initialState: IProjectExtend = {\r\n  id: \"\",\r\n  title: \"\",\r\n  description: \"\",\r\n  creator: {\r\n    id: \"\",\r\n    email: \"\",\r\n  },\r\n  categories: [\r\n    {\r\n      id: \"\",\r\n      description: \"\",\r\n      title: \"Загрузка данных\",\r\n    },\r\n  ],\r\n};\r\n\r\nexport default class Project extends Component<IProjectProps, IProjectExtend> {\r\n  constructor(props: IProjectProps) {\r\n    super(props);\r\n    this.state = initialState;\r\n  }\r\n  //Запрос на сервер\r\n  apiService = new ApiService();\r\n  componentDidMount() {\r\n    if (this.props.projectId) {\r\n      this.apiService.getProject(this.props.projectId).then((res: IProjectExtend) => {\r\n        this.setState(res);\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { title, description, categories: category } = this.state;\r\n    return (\r\n      <div>\r\n        <Header text={title} icon=\"folder\" description={description} />\r\n        {this.props.projectId ? <><ParticipantList projectId={this.props.projectId}/><AddParticipant projectId={this.props.projectId}/></>  : ''}\r\n\r\n        <div className=\"flex-wrapper\">\r\n          {category.map((el, index) => {\r\n            return <Card key={index} id={el.id} title={el.title} description={el.description} />;\r\n          })}\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import Project from \"./project\";\r\n\r\nexport default Project;\r\n","import React, { Component } from \"react\";\r\nimport ApiService, { ICategoryExtend } from \"../../services/api-service\";\r\nimport Card from \"../card\";\r\nimport Header from \"../header\";\r\n\r\ninterface ICategoryProps {\r\n  categoryId: string | undefined;\r\n  projectId: string | undefined;\r\n}\r\n\r\nconst initialState: ICategoryExtend = {\r\n  id: \"\",\r\n  title: \"\",\r\n  description: \"\",\r\n  groups: [\r\n    {\r\n      id: \"\",\r\n      title: \"\",\r\n      description: \"\",\r\n    },\r\n  ],\r\n  project: {\r\n    id: \"\",\r\n    title: \"\",\r\n    description: \"\",\r\n  },\r\n};\r\n\r\nexport default class Category extends Component<ICategoryProps, ICategoryExtend> {\r\n  constructor(props: ICategoryProps) {\r\n    super(props);\r\n    this.state = initialState;\r\n  }\r\n  //Запрос на сервер\r\n  apiService = new ApiService();\r\n  componentDidMount() {\r\n    if (this.props.categoryId && this.props.projectId) {\r\n      this.apiService\r\n        .getCategory(this.props.categoryId, this.props.projectId)\r\n        .then((res: ICategoryExtend) => {\r\n          this.setState(res);\r\n        });\r\n    } else console.error(\"Ошибка, нет идентификатора категории или проекта\");\r\n  }\r\n  //Создание массива карточек групп\r\n  renderItems() {\r\n    return this.state.groups.map((el, index) => {\r\n      if (el.id === \"main\") {\r\n        return \"\";\r\n      }\r\n      return (\r\n        <Card\r\n          key={index}\r\n          id={el.id}\r\n          status=\"unknown\"\r\n          title={el.title}\r\n          description={el.description}\r\n        />\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const items = this.renderItems();\r\n    const { title, description } = this.state;\r\n    return (\r\n      <div>\r\n        <Header text={title} icon=\"shapes\" description={description} />\r\n        <div className=\"flex-wrapper\">{items}</div>\r\n        {/* <Header text=\"Задачи основной группы\" icon=\"albums\" size=\"middle\" /> */\r\n        /* //!Костыль с groupId, UPDATE: ВСЁ КОТСЫЛЬ, ПЕРЕДЕЛАТЬ!!!!\r\n        <Group type=\"without_header\" groupId=\"main\" /> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import Category from \"./category\";\r\n\r\nexport default Category;\r\n","import React, { Component } from \"react\";\r\nimport ApiService, { IGroupExtend } from \"../../services/api-service\";\r\nimport Card from \"../card\";\r\nimport Header from \"../header\";\r\ninterface IGroupProps {\r\n  groupId: string | undefined;\r\n  categoryId: string | undefined;\r\n  projectId: string | undefined;\r\n}\r\n\r\nconst initialState: IGroupExtend = {\r\n  id: \"\",\r\n  title: \"\",\r\n  description: \"\",\r\n  tasks: [\r\n    {\r\n      id: \"\",\r\n      title: \"\",\r\n      description: \"\",\r\n    },\r\n  ],\r\n};\r\n\r\nexport default class Group extends Component<IGroupProps, IGroupExtend> {\r\n  constructor(props: IGroupProps) {\r\n    super(props);\r\n    this.state = initialState;\r\n  }\r\n\r\n  apiService = new ApiService();\r\n  componentDidMount() {\r\n    const { projectId, categoryId, groupId } = this.props;\r\n    if (groupId && categoryId && projectId) {\r\n      this.apiService.getGroup(projectId, categoryId, groupId).then((res: IGroupExtend) => {\r\n        this.setState(res);\r\n      });\r\n    }\r\n  }\r\n\r\n  renderItems() {\r\n    if (this.state.tasks) {\r\n      return this.state.tasks.map((el, index) => {\r\n        return (\r\n          <Card\r\n            key={el.id}\r\n            id={el.id}\r\n            title={el.title}\r\n            description={el.description}\r\n            status=\"unknown\"\r\n          />\r\n        );\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const items = this.renderItems();\r\n\r\n    return (\r\n      <div>\r\n        <Header text={this.state.title} icon=\"albums\" description={this.state.description} />\r\n        <div className=\"flex-wrapper\">{items}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import Group from \"./group\";\r\n\r\nexport default Group;\r\n","import Comment from \"./comment\";\r\n\r\nexport default Comment;\r\n","import React from \"react\";\r\n\r\nimport \"./comment.css\";\r\n\r\nexport type comment = {\r\n  text?: string;\r\n  author?: {\r\n    email?: string;\r\n    id?: string;\r\n  };\r\n  link?: {\r\n    url?: string;\r\n    text?: string;\r\n  };\r\n};\r\n\r\ninterface ICommentProps {\r\n  taskId?: string;\r\n  comments?: comment[];\r\n}\r\n\r\nconst Comment = (props: ICommentProps) => {\r\n  let commentsList = [<p>Ни один комментарий ещё не добавленн</p>];\r\n  if (props.comments) {\r\n    commentsList = props.comments.map((comment, index) => {\r\n      return (\r\n        <div key={index} className=\"comment\">\r\n          <div>\r\n            <ion-icon name=\"person\" />\r\n            {comment.author?.email}\r\n          </div>\r\n          {comment.text}\r\n          <a className=\"comment__link\" href={comment.link?.url}>\r\n            {comment.link?.text}\r\n          </a>\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <div className=\"wrap\">\r\n      <h2>Комментарии</h2>\r\n      {commentsList}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Comment;\r\n","import React from \"react\";\r\nimport Status from \"../status\";\r\nimport { statusType } from \"../status/status\";\r\nimport { Button } from 'antd';\r\nimport ApiTaskService from '../../services/api-task-service';\r\n\r\ninterface ITaskCard {\r\n  title: string;\r\n  description: string | undefined;\r\n  text: string;\r\n  status: statusType;\r\n  handleClick: () => void;\r\n  deleteTask: ()=>void;\r\n}\r\n\r\nconst TaskCard = (props: ITaskCard) => {\r\n  let btn = <></>;\r\n\r\n  switch (props.status) {\r\n    case \"available\":\r\n      btn = (\r\n        <button onClick={props.handleClick} className=\"button green-bg\">\r\n          Приступить\r\n        </button>\r\n      );\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return (\r\n    <div className=\"task\">\r\n      <Status status={props.status} />\r\n      <h1 className=\"task__title\">{props.title}</h1>\r\n      <p className=\"task__description\">{props.description}</p>\r\n      <div className=\"task__text\">{props.text}</div>\r\n      {btn}\r\n      <Button danger onClick={props.deleteTask}>Удалить задачу</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskCard;\r\n","import RequestService, { IRequestService } from './request';\r\nimport { ITaskFull, ITask, ITaskCreate } from '../types/model-types';\r\n\r\nexport default class ApiTaskService {\r\n  private readonly requestService: IRequestService;\r\n\r\n  constructor () {\r\n    this.requestService = new RequestService();\r\n  }\r\n\r\n  saveTask = async (\r\n    { title, description, content, expiredDate, projectId, categoryId ,groupId} :ITaskCreateInput\r\n  ) => {\r\n    return this.requestService.postRequest<ITaskCreate>(\r\n      `project/${projectId}/category/${categoryId}/group/${groupId}/task`,\r\n      {\r\n        title,\r\n        description,\r\n        content,\r\n        expiredDate\r\n      },\r\n    );\r\n  };\r\n  deleteTask = async ({projectId, categoryId, groupId, taskId}:ITaskDeleteInput) =>{\r\n    await this.requestService.deleteRequest(`project/${projectId}/category/${categoryId}/group/${groupId}/task/${taskId}`)\r\n  }\r\n}\r\n\r\ninterface ITaskCreateInput {\r\n  title: string,\r\n  description: string,\r\n  content: string,\r\n  projectId: string,\r\n  categoryId: string,\r\n  groupId: string,\r\n  expiredDate: string | null\r\n}\r\n\r\ninterface ITaskDeleteInput {\r\n  projectId: string,\r\n  categoryId: string,\r\n  groupId: string,\r\n  taskId: string\r\n}","import RequestService, { IRequestService } from './request';\r\nimport { IParticipant } from '../types/model-types';\r\nimport task from '../components/task/task';\r\n\r\nexport default class ApiCommentService {\r\n  private readonly requestService: IRequestService;\r\n\r\n  constructor () {\r\n    this.requestService = new RequestService();\r\n  }\r\n\r\n  getParticipant = async (projectId: string) => {\r\n    return await this.requestService.getRequest<IParticipant[]>(`project/${projectId}/participant`)\r\n  };\r\n\r\n  createComment = async (\r\n    { text, projectId,categoryId, groupId, taskId }: ICreateCommentInput\r\n  ) => {\r\n    const result = await this.requestService.postRequest<any>(\r\n      `project/${projectId}/category/${categoryId}/group/${groupId}/task/${taskId}/comment`,\r\n      {\r\n        text\r\n      },\r\n    );\r\n    return result;\r\n  };\r\n}\r\n\r\ninterface ICreateCommentInput {\r\n  text: string,\r\n  projectId: string,\r\n  categoryId: string,\r\n  groupId: string,\r\n  taskId: string\r\n}","import CommentCreate from './comment-create';\r\n\r\nexport default CommentCreate;","import React from 'react';\r\nimport { Button, Form, Input } from 'antd';\r\nimport ApiCommentService from '../../services/api-comment-service';\r\n\r\ninterface ICommentCreateProps {\r\n  projectId: string,\r\n  categoryId: string,\r\n  groupId: string,\r\n  taskId: string\r\n}\r\n\r\nconst CommentCreate: React.FC<ICommentCreateProps> = ({projectId, categoryId, groupId, taskId}) => {\r\n  const onFinish = async (values: any) => {\r\n    console.log('Success:', values);\r\n    const api = new ApiCommentService();\r\n    await api.createComment({ text: values.text, projectId, categoryId, groupId, taskId })\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo: any) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n\r\n  return (\r\n    <Form\r\n      name=\"basic\"\r\n      onFinish={onFinish}\r\n      onFinishFailed={onFinishFailed}\r\n    >\r\n\r\n      <Form.Item\r\n        name=\"text\"\r\n        rules={[{ required: true, message: 'Введите текст комментария' }]}\r\n      >\r\n        <Input/>\r\n      </Form.Item>\r\n      <Form.Item>\r\n        <Button type=\"primary\" htmlType=\"submit\">\r\n          Отправить\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default CommentCreate;","import React, { Component } from 'react';\r\nimport './task.css';\r\nimport ApiService from '../../services/api-service';\r\nimport { statusType } from '../status/status';\r\nimport Comment from '../comment';\r\nimport { comment } from '../comment/comment';\r\nimport TaskCard from './task-card';\r\nimport ApiTaskService from '../../services/api-task-service';\r\nimport CommentCreate from '../comment-create';\r\n\r\ninterface ITaskProps {\r\n  taskId: string | undefined;\r\n  projectId: string | undefined;\r\n  categoryId: string | undefined;\r\n  groupId: string | undefined;\r\n}\r\n\r\ninterface ITaskState {\r\n  id: string;\r\n  title: string;\r\n  description?: string;\r\n  text: string;\r\n  status?: statusType;\r\n  creator?: string;\r\n  deadline?: Date;\r\n  comments?: comment[];\r\n}\r\n\r\nconst initionalState: ITaskState = {\r\n  id: '',\r\n  title: '',\r\n  description: '',\r\n  text: '',\r\n  status: 'unknown',\r\n  comments: [\r\n    {\r\n      text: '',\r\n      author: {\r\n        email: '',\r\n        id: '',\r\n      },\r\n      link: {\r\n        url: '',\r\n        text: '',\r\n      },\r\n    },\r\n  ],\r\n};\r\n\r\nexport default class Task extends Component<ITaskProps, ITaskState> {\r\n  constructor (props: ITaskProps) {\r\n    super(props);\r\n    this.state = initionalState;\r\n  }\r\n\r\n  apiService = new ApiService();\r\n\r\n  componentDidMount () {\r\n    const { projectId, categoryId, groupId, taskId } = this.props;\r\n    if (projectId && categoryId && groupId && taskId) {\r\n      this.apiService.getTask(projectId, categoryId, groupId, taskId).then((res: any) => {\r\n        this.setState({\r\n          title: res.title,\r\n          description: res.description,\r\n          text: res.content.text,\r\n          status: res.status,\r\n          comments: res.comments,\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  handleClick = () => {\r\n    window.alert('Вы начали выполнение задачи');\r\n  };\r\n\r\n  deleteTask = async () => {\r\n    const { projectId, categoryId, groupId, taskId } = this.props;\r\n    if (projectId && categoryId && groupId && taskId) {\r\n      const api = new ApiTaskService();\r\n      await api.deleteTask({ projectId, categoryId, groupId, taskId });\r\n      window.history.back();\r\n    }\r\n  };\r\n\r\n  render () {\r\n    console.log(this.state);\r\n    const { title, description, text } = this.state;\r\n    const { projectId, categoryId, groupId, taskId } = this.props;\r\n    return (\r\n      <div>\r\n        <TaskCard\r\n          title={title}\r\n          text={text}\r\n          description={description}\r\n          status={this.state.status}\r\n          handleClick={this.handleClick}\r\n          deleteTask={this.deleteTask}\r\n        />\r\n        {projectId && categoryId && groupId && taskId ? <CommentCreate projectId={projectId} categoryId={categoryId}\r\n                                                                       groupId={groupId} taskId={taskId}/> : ''}\r\n        <Comment taskId={this.props.taskId} comments={this.state.comments}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import Task from \"./task\";\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Task from \"../task\";\r\ninterface IGroupPageProps {\r\n  projectId: string | undefined;\r\n  categoryId: string | undefined;\r\n  groupId: string | undefined;\r\n}\r\nconst TaskPage = (props: IGroupPageProps) => {\r\n  //const match = useRouteMatch();\r\n  const { taskId } = useParams();\r\n\r\n  return (\r\n    <>\r\n      <Task taskId={taskId} {...props} />\r\n    </>\r\n  );\r\n};\r\nexport default TaskPage;\r\n","import React from \"react\";\r\nimport { useRouteMatch, Switch, Route, useParams } from \"react-router-dom\";\r\nimport Group from \"../group\";\r\nimport TaskPage from \"./task-page\";\r\ninterface IGroupPageProps {\r\n  projectId: string | undefined;\r\n  categoryId: string | undefined;\r\n}\r\nconst GroupPage = ({ projectId, categoryId }: IGroupPageProps) => {\r\n  const match = useRouteMatch();\r\n  const { groupId } = useParams();\r\n  return (\r\n    <div>\r\n      <Switch>\r\n        <Route exact path={match.url}>\r\n          <Group projectId={projectId} categoryId={categoryId} groupId={groupId} />\r\n        </Route>\r\n        <Route path={`${match.url}/:taskId`}>\r\n          <TaskPage projectId={projectId} categoryId={categoryId} groupId={groupId} />\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  );\r\n};\r\nexport default GroupPage;\r\n","import React from \"react\";\r\nimport { Switch, Route, useRouteMatch, useParams } from \"react-router-dom\";\r\nimport Category from \"../category\";\r\nimport GroupPage from \"./group-page\";\r\n\r\ninterface ICategoryPageProps {\r\n  projectId: string | undefined;\r\n}\r\n\r\nconst CategoryPage = ({ projectId }: ICategoryPageProps) => {\r\n  const match = useRouteMatch();\r\n  const { categoryId } = useParams();\r\n\r\n  return (\r\n    <div>\r\n      <Switch>\r\n        <Route exact path={match.url}>\r\n          <Category projectId={projectId} categoryId={categoryId} />\r\n        </Route>\r\n        <Route path={`${match.url}/:groupId`}>\r\n          <GroupPage projectId={projectId} categoryId={categoryId} />\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CategoryPage;\r\n","import React from \"react\";\r\nimport { Switch, Route, useRouteMatch, useParams } from \"react-router-dom\";\r\nimport Project from \"../project\";\r\nimport CategoryPage from \"./category-page\";\r\n\r\nconst ProjectPage = () => {\r\n  const match = useRouteMatch();\r\n  const { projectId } = useParams();\r\n  return (\r\n    <Switch>\r\n      <Route exact path={match.url}>\r\n        <Project projectId={projectId} />\r\n      </Route>\r\n      <Route path={`${match.url}/:categoryId`}>\r\n        <CategoryPage projectId={projectId} />\r\n      </Route>\r\n    </Switch>\r\n  );\r\n};\r\nexport default ProjectPage;\r\n","import React from \"react\";\r\n\r\ninterface IInputsProjectProps {\r\n  nameValue: string;\r\n  HandleChangeName: (event: React.FormEvent<HTMLInputElement>) => void;\r\n  descriptionValue: string;\r\n  HandleChangeDescription: (event: React.FormEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nconst InputsProject = (props: IInputsProjectProps) => {\r\n  const { nameValue, descriptionValue } = props;\r\n  const { HandleChangeName, HandleChangeDescription } = props;\r\n  return (\r\n    <div className=\"form-project__inputs\">\r\n      <div className=\"form-project__inputs__block\">\r\n        <p className=\"form-project__inputs__label\">Название</p>\r\n        <input\r\n          value={nameValue}\r\n          onChange={HandleChangeName}\r\n          className=\"form-project__inputs__input\"\r\n        />\r\n      </div>\r\n\r\n      <p className=\"form-project__inputs__label\">Описание</p>\r\n      <input\r\n        value={descriptionValue}\r\n        onChange={HandleChangeDescription}\r\n        className=\"form-project__inputs__input\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputsProject;\r\n","import FormProject from \"./form-project\";\r\n\r\nexport default FormProject;\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"./form-project.css\";\r\nimport InputsProject from \"./inputs-project\";\r\nimport ApiService from \"../../../services/api-service\";\r\n\r\ninterface IFromProjectState {\r\n  title: string;\r\n  description: string;\r\n}\r\n\r\nexport default class FormProject extends Component<{}, IFromProjectState> {\r\n  constructor(props: never) {\r\n    super(props);\r\n    this.state = {\r\n      title: \"\",\r\n      description: \"\",\r\n    };\r\n  }\r\n\r\n  apiService = new ApiService();\r\n\r\n  handleChangeName = (event: React.FormEvent<HTMLInputElement>): void => {\r\n    this.setState({ title: event.currentTarget.value });\r\n  };\r\n  handleChangeDescription = (event: React.FormEvent<HTMLInputElement>): void => {\r\n    this.setState({ description: event.currentTarget.value });\r\n  };\r\n  SendForm = async () => {\r\n    const { title, description } = this.state;\r\n    if (title && description) {\r\n      this.apiService.saveProject(title, description).then((res) => console.log(res));\r\n    } else window.alert(\"Заполните форму\");\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"wrap\">\r\n        <div className=\"form-project\">\r\n          <div className=\"form-project__description\">\r\n            <h2>\r\n              <ion-icon name=\"folder\" />\r\n              Проект\r\n            </h2>\r\n            <p>Введите название и описание проекта</p>\r\n            <button className=\"button green-bg\" onClick={this.SendForm}>\r\n              <ion-icon name={\"add\"} />\r\n              Создать проект\r\n            </button>\r\n          </div>\r\n          <InputsProject\r\n            nameValue={this.state.title}\r\n            HandleChangeName={this.handleChangeName}\r\n            descriptionValue={this.state.description}\r\n            HandleChangeDescription={this.handleChangeDescription}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nimport \"./form-category.css\";\r\n\r\ninterface ICategoryInputsProps {\r\n  nameValue: string;\r\n  HandleChangeName: (event: React.FormEvent<HTMLInputElement>) => void;\r\n  descriptionValue: string;\r\n  HandleChangeDescription: (event: React.FormEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nconst CategoryInputs = (props: ICategoryInputsProps) => {\r\n  const { nameValue, descriptionValue } = props;\r\n  const { HandleChangeName, HandleChangeDescription } = props;\r\n  return (\r\n    <>\r\n      <div className=\"form-project__inputs__block\">\r\n        <p className=\"form-project__inputs__label\">Название</p>\r\n        <input\r\n          value={nameValue}\r\n          onChange={HandleChangeName}\r\n          className=\"form-project__inputs__input\"\r\n        />\r\n      </div>\r\n      <div className=\"form-project__inputs__block\">\r\n        <p className=\"form-project__inputs__label\">Описание</p>\r\n        <input\r\n          value={descriptionValue}\r\n          onChange={HandleChangeDescription}\r\n          className=\"form-project__inputs__input\"\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CategoryInputs;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ApiService from \"../../../services/api-service\";\r\n\r\ninterface ISelectProjectProps {\r\n  projectIdValue: string;\r\n  HandleChangeProject: (selected: React.FormEvent<HTMLSelectElement>) => void;\r\n}\r\n\r\nexport interface IProjectMin {\r\n  id: string;\r\n  title: string;\r\n}\r\n\r\nconst SelectProject = (props: ISelectProjectProps) => {\r\n  const [projects, setProjects] = useState([{ id: \"\", title: \"Загрузка данных\" }]);\r\n\r\n  const apiService = new ApiService();\r\n  const LoadData = async () => {\r\n    const res: IProjectMin[] = await apiService.getAllProjectsMin();\r\n    setProjects(res);\r\n  };\r\n\r\n  useEffect((): void => {\r\n    console.log(\"gg\");\r\n    LoadData();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n  return (\r\n    <select\r\n      className=\"form-project__inputs__select\"\r\n      value={props.projectIdValue}\r\n      onChange={props.HandleChangeProject}\r\n    >\r\n      <option value=\"\" hidden>\r\n        Выберите проект\r\n      </option>\r\n      {projects.map((data) => {\r\n        return (\r\n          <option key={data.id} value={data.id}>\r\n            {data.title}\r\n          </option>\r\n        );\r\n      })}\r\n    </select>\r\n  );\r\n};\r\n\r\nexport default SelectProject;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ApiService from \"../../../services/api-service\";\r\n\r\ninterface ISelectProjectProps {\r\n  projectIdValue: string;\r\n  categoryIdValue: string;\r\n  HandleChangeCategory: (selected: React.FormEvent<HTMLSelectElement>) => void;\r\n}\r\n\r\nexport interface ICategoryMin {\r\n  id: string;\r\n  title: string;\r\n}\r\n\r\nconst SelectCategory = (props: ISelectProjectProps) => {\r\n  const [categories, setCategory] = useState([{ id: \"\", title: \"\" }]);\r\n\r\n  useEffect((): void => {\r\n    const LoadData = async () => {\r\n      const apiService = new ApiService();\r\n      const res: ICategoryMin[] = await apiService.getCategoriesMin(props.projectIdValue);\r\n      if (res) {\r\n        setCategory(res);\r\n      }\r\n    };\r\n    LoadData();\r\n  }, [props.projectIdValue]);\r\n  return (\r\n    <select\r\n      className=\"form-project__inputs__select\"\r\n      value={props.categoryIdValue}\r\n      onChange={props.HandleChangeCategory}\r\n    >\r\n      <option value=\"\" hidden>\r\n        Выберите категорию a\r\n      </option>\r\n      {categories.map((category) => {\r\n        return (\r\n          <option key={category.id} value={category.id}>\r\n            {category.title}\r\n          </option>\r\n        );\r\n      })}\r\n    </select>\r\n  );\r\n};\r\n\r\nexport default SelectCategory;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ApiService from \"../../../services/api-service\";\r\n\r\ninterface ISelectGroupProps {\r\n  projectIdValue: string;\r\n  categoryIdValue: string;\r\n  groupIdValue: string;\r\n  HandleChangeGroup: (selected: React.FormEvent<HTMLSelectElement>) => void;\r\n}\r\n\r\nexport interface IGroupMin {\r\n  id: string;\r\n  title: string;\r\n}\r\n\r\nconst SelectGroup = (props: ISelectGroupProps) => {\r\n  const { projectIdValue, categoryIdValue, groupIdValue, HandleChangeGroup } = props;\r\n  const [groups, setGroups] = useState([{ id: \"\", title: \"\" }]);\r\n\r\n  useEffect((): void => {\r\n    if (categoryIdValue !== \"\") {\r\n      const LoadData = async () => {\r\n        const apiService = new ApiService();\r\n        const res: IGroupMin[] = await apiService.getGroupMin(projectIdValue, categoryIdValue);\r\n        setGroups(res);\r\n      };\r\n      LoadData();\r\n    }\r\n  }, [categoryIdValue, projectIdValue]);\r\n  return (\r\n    <select\r\n      className=\"form-project__inputs__select\"\r\n      value={groupIdValue}\r\n      onChange={HandleChangeGroup}\r\n    >\r\n      <option value=\"\" hidden>\r\n        Выберите категорию\r\n      </option>\r\n      {groups.map((data) => {\r\n        return (\r\n          <option key={data.id} value={data.id}>\r\n            {data.title}\r\n          </option>\r\n        );\r\n      })}\r\n    </select>\r\n  );\r\n};\r\n\r\nexport default SelectGroup;\r\n","import FormCategory from \"./form-category\";\r\n\r\nexport default FormCategory;\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"./form-category.css\";\r\n\r\nimport CategoryInputs from \"./category-inputs\";\r\nimport { SelectProject } from \"../form-select\";\r\nimport ApiService from \"../../../services/api-service\";\r\n\r\ninterface IFromCategoryState {\r\n  title: string;\r\n  description: string;\r\n  projectId: string;\r\n}\r\n\r\nexport default class FormCategoty extends Component<{}, IFromCategoryState> {\r\n  constructor(props: never) {\r\n    super(props);\r\n    this.state = {\r\n      title: \"\",\r\n      description: \"\",\r\n      projectId: \"\",\r\n    };\r\n  }\r\n  apiService = new ApiService();\r\n  handleChangeName = (event: React.FormEvent<HTMLInputElement>): void => {\r\n    this.setState({ title: event.currentTarget.value });\r\n  };\r\n  handleChangeDescription = (event: React.FormEvent<HTMLInputElement>): void => {\r\n    this.setState({ description: event.currentTarget.value });\r\n  };\r\n  handleChangeProject = (selected: React.FormEvent<HTMLSelectElement>): void => {\r\n    this.setState({ projectId: selected.currentTarget.value });\r\n    console.log(selected.currentTarget.value);\r\n  };\r\n  SendForm = async () => {\r\n    const { title, description, projectId } = this.state;\r\n    if (title && description && projectId) {\r\n      await this.apiService.saveCategory(title, description, projectId);\r\n    }\r\n  };\r\n  render() {\r\n    const { projectId, title, description } = this.state;\r\n    const { handleChangeName, handleChangeDescription, handleChangeProject, SendForm } = this;\r\n    return (\r\n      <div className=\"wrap\">\r\n        <div className=\"form-project\">\r\n          <div className=\"form-project__description\">\r\n            <h2>\r\n              <ion-icon name=\"shapes\" />\r\n              Категория\r\n            </h2>\r\n            <p>Введите название и описание категоhии</p>\r\n            <button className=\"button green-bg\" onClick={SendForm}>\r\n              <ion-icon name={\"add\"} />\r\n              Создать категорию\r\n            </button>\r\n          </div>\r\n          <div className=\"form-project__inputs\">\r\n            <SelectProject projectIdValue={projectId} HandleChangeProject={handleChangeProject} />\r\n            <CategoryInputs\r\n              nameValue={title}\r\n              HandleChangeName={handleChangeName}\r\n              descriptionValue={description}\r\n              HandleChangeDescription={handleChangeDescription}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\ninterface ICategoryInputsProps {\r\n  nameValue: string;\r\n  HandleChangeName: (event: React.FormEvent<HTMLInputElement>) => void;\r\n  descriptionValue: string;\r\n  HandleChangeDescription: (event: React.FormEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nconst GroupInputs = (props: ICategoryInputsProps) => {\r\n  return (\r\n    <>\r\n      <div className=\"form-project__inputs__block\">\r\n        <p className=\"form-project__inputs__label\">Название</p>\r\n        <input\r\n          value={props.nameValue}\r\n          onChange={props.HandleChangeName}\r\n          className=\"form-project__inputs__input\"\r\n        />\r\n      </div>\r\n\r\n      <p className=\"form-project__inputs__label\">Описание</p>\r\n      <input\r\n        value={props.descriptionValue}\r\n        onChange={props.HandleChangeDescription}\r\n        className=\"form-project__inputs__input\"\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GroupInputs;\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"./form-group.css\";\r\nimport GroupInputs from \"./group-inputs\";\r\nimport { SelectProject, SelectCategory } from \"../form-select\";\r\nimport ApiService from \"../../../services/api-service\";\r\n\r\ninterface IFromCategoryState {\r\n  title: string;\r\n  description: string;\r\n  projectId: string;\r\n  categoryId: string;\r\n}\r\n\r\nconst initialState: IFromCategoryState = {\r\n  title: \"\",\r\n  description: \"\",\r\n  projectId: \"\",\r\n  categoryId: \"\",\r\n};\r\n\r\nexport default class FormGroup extends Component<{}, IFromCategoryState> {\r\n  constructor(props: never) {\r\n    super(props);\r\n    this.state = initialState;\r\n  }\r\n\r\n  handleChangeName = (event: React.FormEvent<HTMLInputElement>): void => {\r\n    this.setState({ title: event.currentTarget.value });\r\n  };\r\n\r\n  handleChangeDescription = (event: React.FormEvent<HTMLInputElement>): void => {\r\n    this.setState({ description: event.currentTarget.value });\r\n  };\r\n\r\n  handleChangeProject = (selected: React.FormEvent<HTMLSelectElement>): void => {\r\n    this.setState({ projectId: selected.currentTarget.value });\r\n  };\r\n\r\n  handleChangeCategory = (selected: React.FormEvent<HTMLSelectElement>): void => {\r\n    this.setState({ categoryId: selected.currentTarget.value });\r\n  };\r\n\r\n  apiService = new ApiService();\r\n\r\n  SendForm = async () => {\r\n    console.log(\"Обработка отправки формы\");\r\n    console.log(this.state);\r\n    const { title, description, projectId, categoryId } = this.state;\r\n    window.alert(\r\n      `Форма отправлена. Название: ${this.state.title}, Описание: ${this.state.description}`,\r\n    );\r\n    await this.apiService.saveGroup(title, description, projectId, categoryId);\r\n  };\r\n  render() {\r\n    const { title: name, description, projectId, categoryId } = this.state;\r\n    return (\r\n      <div className=\"wrap\">\r\n        <div className=\"form-project\">\r\n          <div className=\"form-project__description\">\r\n            <h2>\r\n              <ion-icon name=\"shapes\" />\r\n              Группа\r\n            </h2>\r\n            <p>Введите название и описание группы</p>\r\n            <button className=\"button green-bg\" onClick={this.SendForm}>\r\n              <ion-icon name={\"add\"} />\r\n              Создать Группу\r\n            </button>\r\n          </div>\r\n          <div className=\"form-project__inputs\">\r\n            <SelectProject\r\n              projectIdValue={projectId}\r\n              HandleChangeProject={this.handleChangeProject}\r\n            />\r\n            <SelectCategory\r\n              projectIdValue={projectId}\r\n              categoryIdValue={categoryId}\r\n              HandleChangeCategory={this.handleChangeCategory}\r\n            />\r\n            <GroupInputs\r\n              nameValue={name}\r\n              descriptionValue={description}\r\n              HandleChangeName={this.handleChangeName}\r\n              HandleChangeDescription={this.handleChangeDescription}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import FormGroup from \"./from-group\";\r\n\r\nexport default FormGroup;\r\n","import React from \"react\";\r\nimport { DatePicker } from 'antd';\r\n\r\ninterface ITaskInputsProps {\r\n  nameValue: string;\r\n  HandleChangeName: (event: React.FormEvent<HTMLInputElement>) => void;\r\n  descriptionValue: string;\r\n  HandleChangeDescription: (event: React.FormEvent<HTMLInputElement>) => void;\r\n  textValue: string;\r\n  HandleChangeText: (event: React.FormEvent<HTMLTextAreaElement>) => void;\r\n  HandleChangeDate: (event: any) => void;\r\n}\r\nconst TaskInputs = (props: ITaskInputsProps) => {\r\n  const { nameValue, descriptionValue, textValue } = props;\r\n  const { HandleChangeName, HandleChangeDescription, HandleChangeText, HandleChangeDate } = props;\r\n  return (\r\n    <>\r\n      <div className=\"form-project__inputs__block\">\r\n        <p className=\"form-project__inputs__label\">Название</p>\r\n        <input\r\n          value={nameValue}\r\n          onChange={HandleChangeName}\r\n          className=\"form-project__inputs__input\"\r\n        />\r\n      </div>\r\n      <div className=\"form-project__inputs__block\">\r\n        <p className=\"form-project__inputs__label\">Описание</p>\r\n        <input\r\n          value={descriptionValue}\r\n          onChange={HandleChangeDescription}\r\n          className=\"form-project__inputs__input\"\r\n        />\r\n      </div>\r\n      <DatePicker onChange={HandleChangeDate} />\r\n      <div className=\"form-project__inputs__block\">\r\n        <p className=\"form-project__inputs__label\">Текст задачи</p>\r\n        <textarea\r\n          value={textValue}\r\n          onChange={HandleChangeText}\r\n          className=\"form-project__inputs__input\"\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TaskInputs;\r\n","import React, { Component } from 'react';\r\n\r\nimport './form-task.css';\r\nimport TaskInputs from './task-inputs';\r\nimport { SelectCategory, SelectGroup, SelectProject } from '../form-select';\r\nimport moment from 'moment';\r\nimport 'moment/locale/ru';\r\nimport ApiTaskService from '../../../services/api-task-service';\r\n\r\ninterface IFromTaskState {\r\n  title: string;\r\n  description: string;\r\n  content: string;\r\n  expiredDate: string | null;\r\n  projectId: string;\r\n  categoryId: string;\r\n  groupId: string;\r\n\r\n}\r\n\r\nconst initionalState: IFromTaskState = {\r\n  title: '',\r\n  description: '',\r\n  content: '',\r\n  expiredDate: null,\r\n  projectId: '',\r\n  categoryId: '',\r\n  groupId: '',\r\n};\r\n\r\nexport default class FormTask extends Component<{}, IFromTaskState> {\r\n  constructor (props: never) {\r\n    super(props);\r\n    this.state = initionalState;\r\n  }\r\n\r\n  handleChangeName = (event: React.FormEvent<HTMLInputElement>): void => {\r\n    this.setState({ title: event.currentTarget.value });\r\n  };\r\n  handleChangeDescription = (event: React.FormEvent<HTMLInputElement>): void => {\r\n    this.setState({ description: event.currentTarget.value });\r\n  };\r\n  handleChangeText = (event: React.FormEvent<HTMLTextAreaElement>): void => {\r\n    this.setState({ content: event.currentTarget.value });\r\n  };\r\n\r\n  handleChangeExpiredDate = (date: any): void => {\r\n    this.setState({ expiredDate: moment(date).format('L') });\r\n    console.log(moment(date).format('L'));\r\n  };\r\n  handleChangeProject = (selected: React.FormEvent<HTMLSelectElement>): void => {\r\n    this.setState({ projectId: selected.currentTarget.value, categoryId: '' });\r\n  };\r\n  handleChangeCategory = (selected: React.FormEvent<HTMLSelectElement>): void => {\r\n    this.setState({ categoryId: selected.currentTarget.value });\r\n  };\r\n  handleChangeGroup = (selected: React.FormEvent<HTMLSelectElement>): void => {\r\n    this.setState({ groupId: selected.currentTarget.value });\r\n  };\r\n  apiService = new ApiTaskService();\r\n  SendForm = async () => {\r\n    const { title, description, content, projectId, categoryId, groupId, expiredDate } = this.state;\r\n    await this.apiService.saveTask({ title, description, content, projectId, categoryId, groupId, expiredDate });\r\n\r\n  };\r\n\r\n  render () {\r\n    const { title, description, content, projectId, categoryId, groupId } = this.state;\r\n    return (\r\n      <div className=\"wrap\">\r\n        <div className=\"form-project\">\r\n          <div className=\"form-project__description\">\r\n            <h2>\r\n              <ion-icon name=\"document-text\"/>\r\n              Задача\r\n            </h2>\r\n            <p>Введите название и описание задачи</p>\r\n            <button className=\"button green-bg\" onClick={this.SendForm}>\r\n              <ion-icon name=\"add\"/>\r\n              Создать задачу\r\n            </button>\r\n          </div>\r\n          <div className=\"form-project__inputs\">\r\n            <SelectProject\r\n              projectIdValue={projectId}\r\n              HandleChangeProject={this.handleChangeProject}\r\n            />\r\n            <SelectCategory\r\n              categoryIdValue={categoryId}\r\n              projectIdValue={projectId}\r\n              HandleChangeCategory={this.handleChangeCategory}\r\n            />\r\n            <SelectGroup\r\n              categoryIdValue={categoryId}\r\n              projectIdValue={projectId}\r\n              groupIdValue={groupId}\r\n              HandleChangeGroup={this.handleChangeGroup}\r\n            />\r\n            <TaskInputs\r\n              nameValue={title}\r\n              descriptionValue={description}\r\n              textValue={content}\r\n              HandleChangeName={this.handleChangeName}\r\n              HandleChangeDescription={this.handleChangeDescription}\r\n              HandleChangeText={this.handleChangeText}\r\n              HandleChangeDate={this.handleChangeExpiredDate}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import FormTask from \"./form-task\";\r\n\r\nexport default FormTask;\r\n","import CreateNav from \"./create-nav\";\r\n\r\nexport default CreateNav;\r\n","import React from \"react\";\r\nimport { Link, useRouteMatch } from \"react-router-dom\";\r\nimport \"./create-nav.css\";\r\n\r\nconst CreateNav = () => {\r\n  const match = useRouteMatch();\r\n\r\n  return (\r\n    <div className=\"wrap\">\r\n      <Link className=\"nav-button\" to={`${match.url}`}>\r\n        Создать проект\r\n      </Link>\r\n      <Link className=\"nav-button\" to={`${match.url}/category`}>\r\n        Создать категорию\r\n      </Link>\r\n      <Link className=\"nav-button\" to={`${match.url}/group`}>\r\n        Создать группу\r\n      </Link>\r\n      <Link className=\"nav-button\" to={`${match.url}/task`}>\r\n        Создать задачу\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateNav;\r\n","import React from \"react\";\r\nimport Header from \"../header\";\r\nimport { Switch, Route, useRouteMatch } from \"react-router-dom\";\r\nimport FormProject from \"../forms/form-project\";\r\nimport FormCategory from \"../forms/form-category\";\r\nimport FormGroup from \"../forms/form-group\";\r\nimport FormTask from \"../forms/form-task\";\r\nimport CreateNav from \"../create-nav\";\r\n\r\nconst CreatePage = () => {\r\n  const match = useRouteMatch();\r\n  console.log(`${match.url}/category`);\r\n  return (\r\n    <>\r\n      <Header text=\"Создать\" icon=\"add-circle\" />\r\n      <CreateNav />\r\n      <Switch>\r\n        <Route exact path={`${match.url}`}>\r\n          <FormProject />\r\n        </Route>\r\n        <Route path={`${match.url}/category`}>\r\n          <FormCategory />\r\n        </Route>\r\n        <Route path={`${match.url}/group`}>\r\n          <FormGroup />\r\n        </Route>\r\n        <Route path={`${match.url}/task`}>\r\n          <FormTask />\r\n        </Route>\r\n      </Switch>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CreatePage;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport Navigation from \"./components/navigation\";\r\n\r\nimport { DashboardPage, ProjectPage, ProfilePage } from \"./components/pages\";\r\n\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport CreatePage from \"./components/pages/create-page\";\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router basename=\"/app\">\r\n        <Navigation />\r\n        <div className=\"content\">\r\n          <Switch>\r\n            <Route path=\"/\" exact>\r\n              <DashboardPage />\r\n            </Route>\r\n            <Route path=\"/create\">\r\n              <CreatePage />\r\n            </Route>\r\n            <Route path=\"/projects\">\r\n              <ProjectPage />\r\n            </Route>\r\n            <Route path=\"/profile\">\r\n              <ProfilePage />\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n//Icon Font\r\ndeclare global {\r\n  namespace JSX {\r\n    interface IntrinsicElements {\r\n      \"ion-icon\": any;\r\n    }\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport 'antd/dist/antd.css';\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}